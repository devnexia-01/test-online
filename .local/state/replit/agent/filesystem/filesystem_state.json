{"file_contents":{"DEPLOYMENT_CHECKLIST.md":{"content":"# Deployment Checklist\n\n## Pre-Deployment Steps\n\n### 1. Backend (Render)\n- [ ] Create Render account and connect GitHub repository\n- [ ] Set up web service with Node.js runtime\n- [ ] Configure environment variables:\n  - [ ] `NODE_ENV=production`\n  - [ ] `PORT=10000`\n  - [ ] `MONGODB_URI=mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS`\n  - [ ] `JWT_SECRET=<secure-random-string>`\n  - [ ] `SESSION_SECRET=<secure-random-string>`\n  - [ ] `CORS_ORIGIN=https://online-learning-platform-puce-sigma.vercel.app`\n- [ ] Set build command: `npm install && npm run build:backend`\n- [ ] Set start command: `npm start`\n- [ ] Deploy and note the backend URL\n\n### 2. Frontend Configuration\n- [ ] Run: `node scripts/prepare-deployment.js https://onlinelearningplatform-ppes.onrender.com`\n- [ ] Verify vercel.json has correct backend URL\n- [ ] Verify queryClient.ts has correct API endpoint\n\n### 3. Frontend (Vercel)\n- [ ] Create Vercel account and import GitHub repository\n- [ ] Configure project settings:\n  - [ ] Framework: Vite\n  - [ ] Build command: `npm run build:frontend`\n  - [ ] Output directory: `dist/public`\n  - [ ] Install command: `npm install`\n- [ ] Set environment variable: `VITE_API_URL=https://onlinelearningplatform-ppes.onrender.com`\n- [ ] Deploy to: `online-learning-platform-puce-sigma.vercel.app`\n\n## Post-Deployment Testing\n\n### Backend Testing\n- [ ] Health check: `https://onlinelearningplatform-ppes.onrender.com/health` (if implemented)\n- [ ] API endpoints: `https://onlinelearningplatform-ppes.onrender.com/api/mongo/courses`\n- [ ] CORS headers present for frontend domain\n\n### Frontend Testing\n- [ ] Site loads: `https://online-learning-platform-puce-sigma.vercel.app`\n- [ ] Authentication works (login/register)\n- [ ] Course listing displays\n- [ ] Student dashboard functions\n- [ ] Admin panel accessible\n- [ ] Test results display correctly\n\n### Integration Testing\n- [ ] User registration creates account in MongoDB\n- [ ] Course enrollment works\n- [ ] Test taking and grading functions\n- [ ] Admin approval workflow works\n- [ ] File uploads/downloads work (if applicable)\n\n## Troubleshooting\n\n### Common Issues\n- **CORS errors**: Verify backend CORS_ORIGIN matches frontend domain\n- **API connection failed**: Check VITE_API_URL environment variable\n- **Database connection**: Verify MongoDB URI and network access\n- **Authentication issues**: Check JWT_SECRET consistency\n- **Build failures**: Verify all dependencies are in package.json\n\n### Debug Commands\n```bash\n# Test backend locally\nnpm run build:backend && npm start\n\n# Test frontend build\nnpm run build:frontend\n\n# Check environment variables\necho $VITE_API_URL\n```\n\n## Production Considerations\n\n### Security\n- [ ] Use strong JWT_SECRET and SESSION_SECRET\n- [ ] Enable HTTPS only in production\n- [ ] Restrict CORS to specific domains\n- [ ] Sanitize user inputs\n\n### Performance\n- [ ] Enable gzip compression\n- [ ] Optimize database queries\n- [ ] Use CDN for static assets\n- [ ] Monitor backend performance\n\n### Monitoring\n- [ ] Set up error logging\n- [ ] Monitor API response times\n- [ ] Track user authentication errors\n- [ ] Monitor database connections","size_bytes":3152},"DEPLOY_NOW.md":{"content":"# Deploy Your EduPlatform Right Now\n\n## Part 1: Deploy Backend to Render (Do This First)\n\n### 1. Go to Render.com\n- Visit https://render.com\n- Sign up with your GitHub account\n- Click \"New +\" → \"Web Service\"\n\n### 2. Connect Your Repository\n- Select your GitHub repository\n- Choose the main branch\n\n### 3. Configure Service Settings\n```\nName: eduplatform-backend\nRuntime: Node\nBuild Command: npm install\nStart Command: npm start\n```\n\n### 4. Add Environment Variables (CRITICAL)\nClick \"Environment\" tab and add these:\n```\nNODE_ENV=production\nPORT=10000\nMONGODB_URI=mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS\nJWT_SECRET=make-this-a-very-long-random-string-123456789\nSESSION_SECRET=another-very-long-random-string-987654321\nCORS_ORIGIN=https://online-learning-platform-puce-sigma.vercel.app\n```\n\n### 5. Deploy\n- Click \"Deploy\"\n- Wait 5-10 minutes\n- Your backend will be at: https://onlinelearningplatform-ppes.onrender.com\n\n## Part 2: Deploy Frontend to Vercel (Do This Second)\n\n### 1. Go to Vercel.com  \n- Visit https://vercel.com\n- Sign up with your GitHub account\n- Click \"New Project\"\n\n### 2. Import Repository\n- Select your GitHub repository\n- Click \"Import\"\n\n### 3. Configure Project Settings\n```\nFramework Preset: Vite\nBuild Command: npm run build\nOutput Directory: dist/public\nInstall Command: npm install\n```\n\n### 4. Add Environment Variable\nIn \"Environment Variables\" section:\n```\nVITE_API_URL=https://onlinelearningplatform-ppes.onrender.com\n```\n\n### 5. Deploy\n- Click \"Deploy\"\n- Wait 3-5 minutes\n- Your frontend will be at: https://online-learning-platform-puce-sigma.vercel.app\n\n## Part 3: Test Everything\n\n### Test Backend\nVisit: https://onlinelearningplatform-ppes.onrender.com/api/mongo/courses\nShould show course data\n\n### Test Frontend  \nVisit: https://online-learning-platform-puce-sigma.vercel.app\nShould load your login page\n\n### Test Together\n- Register a new user on frontend\n- Login and browse courses\n- Test admin features\n\n## If Something Goes Wrong\n\n### Backend Issues\n- Check Render logs for errors\n- Verify all environment variables are set\n- Make sure MongoDB URI is correct\n\n### Frontend Issues  \n- Check Vercel function logs\n- Verify VITE_API_URL points to your Render backend\n- Try building locally first: `npm run build`\n\n### CORS Issues\n- Backend must have CORS_ORIGIN set to your Vercel domain\n- Both domains must use HTTPS in production\n\n## Important Notes\n- Backend takes longer to deploy (5-10 min)\n- Frontend deploys faster (3-5 min)  \n- Render free tier sleeps after 15 min idle\n- First request after sleep takes ~30 seconds","size_bytes":2588},"RENDER_FIX_STEPS.md":{"content":"# Fix Render Authentication Issues - Action Required\n\n## The Problem\nYour Render deployment is failing because JWT tokens are invalid. This happens when JWT_SECRET in production doesn't match what was used to create the tokens.\n\n## Fix Steps (Do This Now):\n\n### 1. Update Render Environment Variables\nGo to your Render dashboard → Your service → Environment:\n\nSet this EXACT value:\n```\nJWT_SECRET=your-super-long-secret-key-12345678901234567890\n```\n\n### 2. Push Code Changes to GitHub\nThe code fixes are ready. Push to GitHub:\n```bash\ngit add .\ngit commit -m \"Fix JWT authentication for production\"\ngit push origin main\n```\n\n### 3. Render Will Auto-Deploy\nWait 3-5 minutes for Render to redeploy automatically.\n\n### 4. Clear Browser Storage & Login Fresh\n- Open your Render URL: https://onlinelearningplatform-ppes.onrender.com\n- Clear browser localStorage (F12 → Application → Local Storage → Clear)\n- Login again with admin credentials\n- Test admin features\n\n## What Was Fixed:\n- JWT_SECRET now uses environment variable instead of hardcoded value\n- CORS updated to include Render domain\n- All authentication middleware is properly configured\n\n## Test These After Fix:\n- Login as admin\n- Access user management\n- View pending approvals\n- Check student test results\n- Course management\n\nThe authentication system is correctly implemented - it just needed the environment variable fix.","size_bytes":1395},"aws-setup.md":{"content":"# AWS Environment Setup Guide\n\n## Running the Application on AWS\n\n### 1. Install Dependencies\n```bash\nnpm install\n```\n\n### 2. Run in Local/AWS Mode\n```bash\n# Method 1: Use the local runner script\nnode run-local.js\n\n# Method 2: Set environment variables manually\nexport NODE_ENV=development\nunset REPL_ID\nunset REPLIT_DOMAINS\nnpx tsx server/index.ts\n\n# Method 3: One-liner\nNODE_ENV=development npx tsx server/index.ts\n```\n\n### 3. Build for Production\n```bash\n# For AWS/local environment\nnpm run build:local\n```\n\n### 4. Environment Variables\nCreate a `.env` file with:\n```env\nNODE_ENV=development\nMONGODB_URI=mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS\nJWT_SECRET=your-secret-key\nPORT=5000\n```\n\n### 5. Port Configuration\n- Backend runs on port 5000\n- Frontend dev server runs on port 3000 (when using vite)\n- Make sure these ports are open in your AWS security groups\n\n### 6. MongoDB Connection\nThe app is configured to use your existing MongoDB Atlas database. No changes needed.\n\n### 7. Troubleshooting\n\n#### \"Address already in use\" error:\n```bash\n# Kill existing Node processes\npkill -f \"node.*server/index.ts\"\npkill -f tsx\n# Or find and kill the specific port\nsudo netstat -tlnp | grep :5000\nsudo kill -9 <PID>\n```\n\n#### Vite config errors with `import.meta.dirname`:\n```bash\n# Use the local runner which bypasses Replit configs\nnode run-local.js\n```\n\n#### Permission errors:\n```bash\n# Make the script executable\nchmod +x run-local.js\n```\n\n#### Missing dependencies:\n```bash\n# Install if not already installed\nnpm install tsx cross-env\n```","size_bytes":1566},"create_sample_enrollment.js":{"content":"import mongoose from 'mongoose';\nimport User from './server/models/User.js';\nimport Course from './server/models/Course.js';\nimport Enrollment from './server/models/Enrollment.js';\n\n// Connect to MongoDB\nmongoose.connect('mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS');\n\nasync function createSampleEnrollment() {\n  try {\n    // Find an existing user and course\n    const user = await User.findOne({ role: 'student' });\n    const course = await Course.findOne();\n    \n    if (!user) {\n      console.log('No student user found');\n      return;\n    }\n    \n    if (!course) {\n      console.log('No course found');\n      return;\n    }\n    \n    // Create enrollment\n    const enrollment = new Enrollment({\n      student: user._id,\n      course: course._id,\n      progress: 25\n    });\n    \n    await enrollment.save();\n    \n    console.log('Sample enrollment created:', {\n      student: user.firstName + ' ' + user.lastName,\n      course: course.title,\n      progress: enrollment.progress\n    });\n    \n  } catch (error) {\n    console.error('Error creating sample enrollment:', error);\n  } finally {\n    await mongoose.connection.close();\n  }\n}\n\ncreateSampleEnrollment();","size_bytes":1186},"deployment-guide.md":{"content":"# Deployment Guide: Vercel + Render\n\n## Overview\n- **Frontend**: Vercel (online-learning-platform-puce-sigma.vercel.app)\n- **Backend**: Render (Node.js service)\n- **Database**: MongoDB Atlas (existing)\n\n## Quick Start Commands\n\n```bash\n# 1. Install dependencies\nnpm install\n\n# 2. Configure for deployment\nnode scripts/prepare-deployment.js https://onlinelearningplatform-ppes.onrender.com\n\n# 3. Build for production\nnpm run build:prod\n```\n\n## Step 1: Prepare Environment Files\n\nCreate these environment variable files:\n\n### Frontend (.env.production)\n```env\nVITE_API_URL=https://onlinelearningplatform-ppes.onrender.com\n```\n\n### Backend Environment Variables (for Render)\n```env\nNODE_ENV=production\nPORT=10000\nMONGODB_URI=mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS\nJWT_SECRET=your-super-secret-jwt-key-here\nSESSION_SECRET=your-session-secret-key-here\nCORS_ORIGIN=https://online-learning-platform-puce-sigma.vercel.app\n```\n\n## Step 2: Deploy Backend to Render\n\n1. **Create Render Account**: Go to https://render.com and sign up\n2. **Connect GitHub**: Link your GitHub repository\n3. **Create Web Service**:\n   - Service Type: Web Service\n   - Repository: Your GitHub repo\n   - Branch: main\n   - Runtime: Node\n   - Build Command: `npm install && npm run build:backend`\n   - Start Command: `npm start`\n   - Instance Type: Free (or paid for better performance)\n   - Auto-Deploy: Yes\n\n4. **Set Environment Variables** in Render dashboard:\n   - `NODE_ENV=production`\n   - `PORT=10000`\n   - `MONGODB_URI=mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS`\n   - `JWT_SECRET=your-super-secret-jwt-key-here`\n   - `SESSION_SECRET=your-session-secret-key-here`\n   - `CORS_ORIGIN=https://online-learning-platform-puce-sigma.vercel.app`\n\n5. **Deploy**: Render will automatically build and deploy your backend\n\n## Step 3: Update Frontend Configuration\n\n**Use the automated script:**\n```bash\nnode scripts/prepare-deployment.js https://your-actual-render-url.onrender.com\n```\n\nThis script will:\n1. Update `vercel.json` with your backend URL\n2. Update `queryClient.ts` with the correct API endpoint\n3. Create production environment file\n\n## Step 4: Deploy Frontend to Vercel\n\n1. **Create Vercel Account**: Go to https://vercel.com and sign up\n2. **Connect GitHub**: Import your repository\n3. **Configure Project**:\n   - Framework Preset: Vite\n   - Build Command: `npm run build:frontend`\n   - Output Directory: `dist/public`\n   - Install Command: `npm install`\n\n4. **Set Environment Variables** in Vercel dashboard:\n   - `VITE_API_URL=https://onlinelearningplatform-ppes.onrender.com`\n\n5. **Custom Domain**: Set up your domain `online-learning-platform-puce-sigma.vercel.app`\n\n## Step 5: Update CORS Configuration\n\nUpdate your backend's CORS configuration to allow requests from Vercel:\n\n```javascript\n// In server/index.ts\napp.use(cors({\n  origin: [\n    'https://online-learning-platform-puce-sigma.vercel.app',\n    'http://localhost:3000', // for local development\n  ],\n  credentials: true\n}));\n```\n\n## Step 6: Test Deployment\n\n1. **Backend Health Check**: Visit `https://onlinelearningplatform-ppes.onrender.com/health`\n2. **Frontend**: Visit `https://online-learning-platform-puce-sigma.vercel.app`\n3. **Test Authentication**: Try logging in/registering\n4. **Test Features**: Verify courses, tests, and admin features work\n\n## Build Commands Added\n\n- `npm run build:frontend` - Builds only the frontend for Vercel\n- `npm run build:backend` - Builds only the backend for Render\n- `npm run build:prod` - Builds both for production\n- `node scripts/prepare-deployment.js <backend-url>` - Configures URLs for deployment\n\n## Important Notes\n\n1. **Database**: Your MongoDB Atlas database will work with both platforms\n2. **Environment Variables**: Keep JWT_SECRET and SESSION_SECRET secure\n3. **CORS**: Make sure backend allows requests from your Vercel domain\n4. **Free Tier Limitations**: \n   - Render free tier sleeps after 15 minutes of inactivity\n   - Consider upgrading for production use\n5. **SSL**: Both Vercel and Render provide SSL certificates automatically\n\n## Troubleshooting\n\n### Backend Issues\n- Check Render logs for errors\n- Verify environment variables are set correctly\n- Ensure MongoDB connection string is correct\n\n### Frontend Issues\n- Check browser console for API errors\n- Verify API URL is correctly set\n- Test API endpoints directly\n\n### CORS Issues\n- Update backend CORS origin to match Vercel domain\n- Check that credentials are properly configured","size_bytes":4496},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render.yaml":{"content":"services:\n  - type: web\n    name: eduplatform-backend\n    runtime: node\n    buildCommand: npm run build:backend\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: PORT\n        value: 10000\n      - key: MONGODB_URI\n        fromDatabase:\n          name: mongodb\n          property: connectionString\n      - key: JWT_SECRET\n        generateValue: true\n      - key: SESSION_SECRET\n        generateValue: true","size_bytes":455},"replit.md":{"content":"## Overview\n\nEduPlatform is a comprehensive, full-stack learning management system designed for online education. It provides a platform for students, instructors, and administrators to manage courses, track progress, and facilitate learning. The system emphasizes a user-friendly interface, robust authentication, and real-time data insights, aiming to deliver a seamless and engaging educational experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite\n- **Routing**: Wouter\n- **State Management**: TanStack Query (React Query)\n- **UI Framework**: Tailwind CSS with shadcn/ui and Radix UI primitives\n- **Styling**: CSS variables for theming with dark/light mode support. UI/UX design emphasizes modern aesthetics with gradients, animated elements, and a clean, intuitive layout. This includes comprehensive redesigns of the landing page, dashboard, course detail pages, and administrative panels to ensure a visually appealing and highly interactive experience.\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM (previously MongoDB, now migrated)\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API Design**: RESTful APIs with JSON responses\n- **Development**: tsx for TypeScript execution\n\n### Core Features and Implementations\n- **Authentication & Authorization**: Supports email/password with JWT tokens and Replit OpenID Connect (and Google OAuth). Implements role-based access control (student, instructor, admin) and a user approval workflow for new student registrations. JWT tokens are stored in `localStorage`.\n- **Course Management**: Comprehensive CRUD operations for courses, including video lectures (YouTube integration) and downloadable PDF notes.\n- **Learning Progression**: Students can mark video lectures as completed with persistence, and track overall course progress.\n- **Assessment System**: Admins can create and manage tests for courses. A comprehensive grading interface allows instructors to assign scores and grades, with students viewing their results. Test results are filtered based on student enrollment.\n- **Dashboards**:\n    - **Student Dashboard**: Personalized overview with progress tracking.\n    - **Admin Dashboard**: Provides comprehensive, real-time platform-wide statistics (e.g., total courses, unique students, average test scores, completion rates) with dynamic course filtering. Analytics are designed for manual refresh only, removing continuous auto-refresh to improve performance.\n- **UI/UX Decisions**:\n    - **Navigation**: Replaced traditional navbar with a consistent sidebar navigation across all authenticated pages.\n    - **Visuals**: Extensive use of gradients, shadows, animations (hover, pulsing, animated backgrounds), and modern typography. Components like course cards, test sections, and forms have received significant visual overhauls for a clean, professional, and interactive feel.\n    - **Responsiveness**: Design maintains mobile compatibility.\n\n### Data Flow\n- Frontend communicates with backend via HTTP requests to `/api` endpoints.\n- Backend processes requests, interacts with PostgreSQL via Drizzle ORM, and sends JSON responses.\n- TanStack Query manages client-side data fetching, caching, and state updates.\n\n## External Dependencies\n\n### Frontend\n- **Form Handling**: React Hook Form with Zod validation\n- **Date Utilities**: date-fns\n- **Icons**: Lucide React\n- **Carousel**: Embla Carousel\n\n### Backend\n- **Database Connection**: @neondatabase/serverless\n- **ORM**: Drizzle ORM\n- **Session Management**: connect-pg-simple (for PostgreSQL session store)\n- **Validation**: Zod\n- **Email Service**: Nodemailer (for OTP email verification)\n- **Authentication**: passport-google-oauth20 (for Google OAuth)\n\n### Development Tools\n- **Build**: esbuild (for server bundling)\n- **Database Tools**: Drizzle Kit (for migrations and schema management)","size_bytes":4066},"run-local.js":{"content":"#!/usr/bin/env node\n\n// Simple script to run the app locally without Replit-specific configs\nprocess.env.NODE_ENV = 'development';\nprocess.env.REPL_ID = undefined;\nprocess.env.REPLIT_DOMAINS = undefined;\n\n// Import and run the server\nimport('./server/index.ts');","size_bytes":262},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.local.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// Get directory name (compatible with both local and AWS environments)\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 3000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":826},"vite.config.prod.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n    sourcemap: false,\n    minify: true,\n  },\n  define: {\n    'process.env.NODE_ENV': '\"production\"'\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 3000,\n  },\n});","size_bytes":785},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/build.js":{"content":"#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport { existsSync, mkdirSync } from 'fs';\n\nconsole.log('🚀 Building EduPlatform for production...');\n\n// Create dist directory if it doesn't exist\nif (!existsSync('dist')) {\n  mkdirSync('dist');\n}\n\ntry {\n  // Build frontend\n  console.log('📦 Building frontend...');\n  execSync('vite build --config vite.config.prod.ts', { stdio: 'inherit' });\n  \n  // Build backend\n  console.log('⚙️ Building backend...');\n  execSync('esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --target=node18', { stdio: 'inherit' });\n  \n  console.log('✅ Build completed successfully!');\n} catch (error) {\n  console.error('❌ Build failed:', error.message);\n  process.exit(1);\n}","size_bytes":774},"scripts/prepare-deployment.js":{"content":"#!/usr/bin/env node\n\nimport { writeFileSync, readFileSync } from 'fs';\nimport { execSync } from 'child_process';\n\nconsole.log('🚀 Preparing EduPlatform for deployment...');\n\n// Get backend URL from user input\nconst args = process.argv.slice(2);\nconst backendUrl = args[0];\n\nif (!backendUrl) {\n  console.error('❌ Please provide the backend URL as an argument');\n  console.log('Usage: node scripts/prepare-deployment.js https://your-backend.onrender.com');\n  process.exit(1);\n}\n\ntry {\n  // Update vercel.json with the correct backend URL\n  console.log('📝 Updating vercel.json...');\n  const vercelConfig = JSON.parse(readFileSync('vercel.json', 'utf8'));\n  \n  // Update routes\n  vercelConfig.routes = vercelConfig.routes.map(route => {\n    if (route.src === '/api/(.*)') {\n      route.dest = `${backendUrl}/api/$1`;\n    }\n    return route;\n  });\n  \n  // Update rewrites\n  vercelConfig.rewrites = vercelConfig.rewrites.map(rewrite => {\n    if (rewrite.source === '/api/(.*)') {\n      rewrite.destination = `${backendUrl}/api/$1`;\n    }\n    return rewrite;\n  });\n  \n  writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));\n  \n  // Update queryClient.ts with the correct backend URL\n  console.log('📝 Updating API configuration...');\n  let queryClientContent = readFileSync('client/src/lib/queryClient.ts', 'utf8');\n  queryClientContent = queryClientContent.replace(\n    'https://your-render-backend.onrender.com',\n    backendUrl\n  );\n  writeFileSync('client/src/lib/queryClient.ts', queryClientContent);\n  \n  // Update environment file\n  console.log('📝 Updating environment configuration...');\n  writeFileSync('client/.env.production', `VITE_API_URL=${backendUrl}`);\n  \n  console.log(`✅ Configuration updated successfully!`);\n  console.log(`📋 Backend URL set to: ${backendUrl}`);\n  console.log(`📋 Frontend will be deployed to: https://online-learning-platform-puce-sigma.vercel.app`);\n  \n} catch (error) {\n  console.error('❌ Preparation failed:', error.message);\n  process.exit(1);\n}","size_bytes":2014},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectDB } from \"./config/database.js\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\nconst app = express();\n\n// CORS configuration for production deployment\napp.use(cors({\n  origin: [\n    'https://online-learning-platform-puce-sigma.vercel.app',\n    'https://onlinelearningplatform-ppes.onrender.com',\n    'https://www.online.toolshelp.me',\n    'https://online.toolshelp.me',\n    'http://localhost:3000',\n    'http://localhost:5000',\n    process.env.CORS_ORIGIN\n  ].filter(Boolean) as string[],\n  credentials: true,\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Connect to MongoDB\n  await connectDB();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use PORT from environment (for Render) or default to 5000 (for Replit)\n  const port = process.env.PORT || 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2630},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n// Using MongoDB models instead of shared schema\nimport { z } from \"zod\";\nimport { \n  insertCourseSchema, \n  insertTestSchema, \n  insertTestResultSchema \n} from \"../shared/schema.js\";\nimport mongoRoutes from \"./routes/mongoRoutes.js\";\n// Removed Replit auth - using MongoDB only\nimport authRoutes from \"./routes/authRoutes.js\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Use MongoDB-only authentication routes\n  app.use('/api/auth', authRoutes);\n\n  // JWT authentication middleware\n  const verifyToken = (req: any, res: any, next: any) => {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n    \n    try {\n      const jwt = require('jsonwebtoken');\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');\n      req.user = decoded;\n      next();\n    } catch (error) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n  };\n\n  // Admin middleware\n  const isAdmin = async (req: any, res: any, next: any) => {\n    try {\n      const User = (await import('./models/User.js')).default;\n      const user = await User.findById(req.user.userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      req.dbUser = user;\n      next();\n    } catch (error) {\n      return res.status(500).json({ message: 'Server error' });\n    }\n  };\n\n  // Auth routes for user info\n  app.get('/api/auth/user', verifyToken, async (req: any, res) => {\n    try {\n      const User = (await import('./models/User.js')).default;\n      const user = await User.findById(req.user.userId).populate('enrolledCourses');\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        profileImageUrl: user.profileImageUrl || user.avatar,\n        isApproved: user.isApproved,\n        enrolledCourses: user.enrolledCourses || [],\n        isActive: user.isActive\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Add MongoDB routes - auth routes need to be accessible without middleware\n  app.use('/api/mongo', mongoRoutes);\n  \n  // Legacy routes (keeping for backward compatibility)\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(u => ({ ...u, password: undefined })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(parseInt(req.params.id));\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/stats\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      let courses;\n      \n      if (category && typeof category === \"string\") {\n        courses = await storage.getCoursesByCategory(category);\n      } else {\n        courses = await storage.getAllCourses();\n      }\n      \n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const course = await storage.getCourse(parseInt(req.params.id));\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  app.post(\"/api/courses\", async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid course data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  app.put(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(courseId, courseData);\n      \n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      \n      res.json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid course data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update course\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const success = await storage.deleteCourse(courseId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      \n      res.json({ message: \"Course deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  // Course modules routes\n  app.get(\"/api/courses/:id/modules\", async (req, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const modules = await storage.getCourseModules(courseId);\n      res.json(modules);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course modules\" });\n    }\n  });\n\n  // Course notes routes\n  app.get(\"/api/courses/:id/notes\", async (req, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const notes = await storage.getCourseNotes(courseId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course notes\" });\n    }\n  });\n\n  // Enrollment routes\n  app.get(\"/api/users/:id/enrollments\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const enrollments = await storage.getEnrollmentsByUser(userId);\n      \n      // Get course details for each enrollment\n      const enrollmentsWithCourses = await Promise.all(\n        enrollments.map(async (enrollment) => {\n          const course = await storage.getCourse(enrollment.courseId);\n          return { ...enrollment, course };\n        })\n      );\n      \n      res.json(enrollmentsWithCourses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enrollments\" });\n    }\n  });\n\n  app.post(\"/api/enrollments\", async (req, res) => {\n    try {\n      const { userId, courseId } = req.body;\n      const enrollment = await storage.createEnrollment({ userId, courseId, progress: 0 });\n      res.status(201).json(enrollment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create enrollment\" });\n    }\n  });\n\n  app.put(\"/api/enrollments/:userId/:courseId/progress\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const courseId = parseInt(req.params.courseId);\n      const { progress } = req.body;\n      \n      const enrollment = await storage.updateEnrollmentProgress(userId, courseId, progress);\n      if (!enrollment) {\n        return res.status(404).json({ message: \"Enrollment not found\" });\n      }\n      \n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Test routes\n  app.get(\"/api/courses/:id/tests\", async (req, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const tests = await storage.getTestsByCourse(courseId);\n      res.json(tests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tests\" });\n    }\n  });\n\n  app.post(\"/api/tests\", async (req, res) => {\n    try {\n      const testData = insertTestSchema.parse(req.body);\n      const test = await storage.createTest(testData);\n      res.status(201).json(test);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test\" });\n    }\n  });\n\n  // Test results routes\n  app.get(\"/api/users/:id/test-results\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const results = await storage.getTestResultsByUser(userId);\n      \n      // Get test and course details for each result\n      const resultsWithDetails = await Promise.all(\n        results.map(async (result) => {\n          const test = await storage.getTest(result.testId);\n          const course = test ? await storage.getCourse(test.courseId) : null;\n          return { ...result, test, course };\n        })\n      );\n      \n      res.json(resultsWithDetails);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch test results\" });\n    }\n  });\n\n  app.post(\"/api/test-results\", async (req, res) => {\n    try {\n      const resultData = insertTestResultSchema.parse(req.body);\n      const result = await storage.createTestResult(resultData);\n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid test result data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create test result\" });\n    }\n  });\n\n  // Recent activities routes\n  app.get(\"/api/users/:id/activities\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const activities = await storage.getRecentActivitiesByUser(userId, limit);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Admin stats routes\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  // File download routes (mock)\n  app.get(\"/api/notes/download/:id\", (req, res) => {\n    // Mock PDF download - in real app would serve actual files\n    res.setHeader(\"Content-Type\", \"application/pdf\");\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"note-${req.params.id}.pdf\"`);\n    res.send(\"Mock PDF content\");\n  });\n\n  // Mount MongoDB routes\n  // Removed legacy MongoDB routes\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11910},"server/storage.ts":{"content":"import {\n  users, courses, courseModules, courseNotes, enrollments, tests, testResults, recentActivities,\n  type User, type InsertUser, type Course, type InsertCourse, type CourseModule, type InsertCourseModule,\n  type CourseNote, type InsertCourseNote, type Enrollment, type InsertEnrollment, type Test, type InsertTest,\n  type TestResult, type InsertTestResult, type RecentActivity, type InsertRecentActivity\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n\n  // Courses\n  getCourse(id: number): Promise<Course | undefined>;\n  getAllCourses(): Promise<Course[]>;\n  getCoursesByCategory(category: string): Promise<Course[]>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: number, course: Partial<InsertCourse>): Promise<Course | undefined>;\n  deleteCourse(id: number): Promise<boolean>;\n\n  // Course Modules\n  getCourseModules(courseId: number): Promise<CourseModule[]>;\n  createCourseModule(module: InsertCourseModule): Promise<CourseModule>;\n  updateCourseModule(id: number, module: Partial<InsertCourseModule>): Promise<CourseModule | undefined>;\n\n  // Course Notes\n  getCourseNotes(courseId: number): Promise<CourseNote[]>;\n  createCourseNote(note: InsertCourseNote): Promise<CourseNote>;\n\n  // Enrollments\n  getEnrollmentsByUser(userId: number): Promise<Enrollment[]>;\n  getEnrollmentsByCourse(courseId: number): Promise<Enrollment[]>;\n  createEnrollment(enrollment: InsertEnrollment): Promise<Enrollment>;\n  updateEnrollmentProgress(userId: number, courseId: number, progress: number): Promise<Enrollment | undefined>;\n\n  // Tests\n  getTest(id: number): Promise<Test | undefined>;\n  getTestsByCourse(courseId: number): Promise<Test[]>;\n  createTest(test: InsertTest): Promise<Test>;\n  updateTest(id: number, test: Partial<InsertTest>): Promise<Test | undefined>;\n\n  // Test Results\n  getTestResult(id: number): Promise<TestResult | undefined>;\n  getTestResultsByUser(userId: number): Promise<TestResult[]>;\n  getTestResultsByTest(testId: number): Promise<TestResult[]>;\n  createTestResult(result: InsertTestResult): Promise<TestResult>;\n\n  // Recent Activities\n  getRecentActivitiesByUser(userId: number, limit?: number): Promise<RecentActivity[]>;\n  createRecentActivity(activity: InsertRecentActivity): Promise<RecentActivity>;\n\n  // Dashboard Stats\n  getUserStats(userId: number): Promise<{\n    enrolledCourses: number;\n    completedCourses: number;\n    hoursLearned: number;\n    averageScore: number;\n  }>;\n\n  getAdminStats(): Promise<{\n    totalUsers: number;\n    activeCourses: number;\n    testsCompleted: number;\n    averageScore: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User> = new Map();\n  private courses: Map<number, Course> = new Map();\n  private courseModules: Map<number, CourseModule> = new Map();\n  private courseNotes: Map<number, CourseNote> = new Map();\n  private enrollments: Map<number, Enrollment> = new Map();\n  private tests: Map<number, Test> = new Map();\n  private testResults: Map<number, TestResult> = new Map();\n  private recentActivities: Map<number, RecentActivity> = new Map();\n\n  private currentId = 1;\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed admin user\n    const adminUser: User = {\n      id: this.currentId++,\n      username: \"admin\",\n      email: \"admin@eduplatform.com\",\n      password: \"admin123\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n      role: \"admin\",\n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Seed student user\n    const studentUser: User = {\n      id: this.currentId++,\n      username: \"john\",\n      email: \"john@example.com\",\n      password: \"john123\",\n      firstName: \"John\",\n      lastName: \"Smith\",\n      role: \"student\",\n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.users.set(studentUser.id, studentUser);\n\n    // Seed courses\n    const webDevCourse: Course = {\n      id: this.currentId++,\n      title: \"Web Development Fundamentals\",\n      description: \"Learn HTML, CSS, JavaScript, and React to build modern web applications\",\n      category: \"Programming\",\n      thumbnail: \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      duration: 24,\n      videoCount: 18,\n      instructorId: 1,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.courses.set(webDevCourse.id, webDevCourse);\n\n    const dataScienceCourse: Course = {\n      id: this.currentId++,\n      title: \"Data Science with Python\",\n      description: \"Master data analysis, visualization, and machine learning with Python\",\n      category: \"Data Science\",\n      thumbnail: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      duration: 32,\n      videoCount: 25,\n      instructorId: 1,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.courses.set(dataScienceCourse.id, dataScienceCourse);\n\n    const mathCourse: Course = {\n      id: this.currentId++,\n      title: \"Advanced Mathematics\",\n      description: \"Calculus, Linear Algebra, and Differential Equations for Engineers\",\n      category: \"Mathematics\",\n      thumbnail: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      duration: 28,\n      videoCount: 22,\n      instructorId: 1,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.courses.set(mathCourse.id, mathCourse);\n\n    // Seed enrollments\n    const enrollment1: Enrollment = {\n      id: this.currentId++,\n      userId: 2,\n      courseId: 3,\n      progress: 65,\n      enrolledAt: new Date(),\n    };\n    this.enrollments.set(enrollment1.id, enrollment1);\n\n    const enrollment2: Enrollment = {\n      id: this.currentId++,\n      userId: 2,\n      courseId: 4,\n      progress: 0,\n      enrolledAt: new Date(),\n    };\n    this.enrollments.set(enrollment2.id, enrollment2);\n\n    const enrollment3: Enrollment = {\n      id: this.currentId++,\n      userId: 2,\n      courseId: 5,\n      progress: 100,\n      enrolledAt: new Date(),\n    };\n    this.enrollments.set(enrollment3.id, enrollment3);\n\n    // Seed course modules\n    const modules = [\n      {\n        id: this.currentId++,\n        courseId: 3,\n        title: \"Introduction to JavaScript\",\n        description: \"Basic concepts and syntax\",\n        videoUrl: \"https://example.com/video1.mp4\",\n        duration: 8,\n        orderIndex: 1,\n        isCompleted: true,\n      },\n      {\n        id: this.currentId++,\n        courseId: 3,\n        title: \"Variables and Data Types\",\n        description: \"Understanding JavaScript variables\",\n        videoUrl: \"https://example.com/video2.mp4\",\n        duration: 12,\n        orderIndex: 2,\n        isCompleted: false,\n      },\n      {\n        id: this.currentId++,\n        courseId: 3,\n        title: \"Functions and Scope\",\n        description: \"Working with functions\",\n        videoUrl: \"https://example.com/video3.mp4\",\n        duration: 15,\n        orderIndex: 3,\n        isCompleted: false,\n      },\n    ];\n    modules.forEach(module => this.courseModules.set(module.id, module));\n\n    // Seed course notes\n    const notes = [\n      {\n        id: this.currentId++,\n        courseId: 3,\n        title: \"JavaScript Fundamentals.pdf\",\n        fileName: \"javascript-fundamentals.pdf\",\n        fileSize: \"2.3 MB\",\n        downloadUrl: \"/api/notes/download/1\",\n      },\n      {\n        id: this.currentId++,\n        courseId: 3,\n        title: \"Exercise Solutions.pdf\",\n        fileName: \"exercise-solutions.pdf\",\n        fileSize: \"1.8 MB\",\n        downloadUrl: \"/api/notes/download/2\",\n      },\n    ];\n    notes.forEach(note => this.courseNotes.set(note.id, note));\n\n    // Seed tests\n    const webTest: Test = {\n      id: this.currentId++,\n      courseId: 3,\n      title: \"JavaScript Quiz\",\n      maxScore: 100,\n      timeLimit: 60,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.tests.set(webTest.id, webTest);\n\n    const dataTest: Test = {\n      id: this.currentId++,\n      courseId: 4,\n      title: \"Data Structures\",\n      maxScore: 100,\n      timeLimit: 90,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.tests.set(dataTest.id, dataTest);\n\n    const mathTest: Test = {\n      id: this.currentId++,\n      courseId: 5,\n      title: \"Calculus Final\",\n      maxScore: 100,\n      timeLimit: 120,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    this.tests.set(mathTest.id, mathTest);\n\n    // Seed test results\n    const results = [\n      {\n        id: this.currentId++,\n        testId: webTest.id,\n        userId: 2,\n        score: 92,\n        maxScore: 100,\n        grade: \"A\",\n        completedAt: new Date(\"2024-10-15\"),\n      },\n      {\n        id: this.currentId++,\n        testId: dataTest.id,\n        userId: 2,\n        score: 78,\n        maxScore: 100,\n        grade: \"B\",\n        completedAt: new Date(\"2024-10-12\"),\n      },\n      {\n        id: this.currentId++,\n        testId: mathTest.id,\n        userId: 2,\n        score: 95,\n        maxScore: 100,\n        grade: \"A+\",\n        completedAt: new Date(\"2024-10-08\"),\n      },\n    ];\n    results.forEach(result => this.testResults.set(result.id, result));\n\n    // Seed recent activities\n    const activities = [\n      {\n        id: this.currentId++,\n        userId: 2,\n        type: \"completed_video\",\n        description: 'Completed \"Introduction to Machine Learning\"',\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      },\n      {\n        id: this.currentId++,\n        userId: 2,\n        type: \"scored_test\",\n        description: 'Scored 92% on \"Data Structures Quiz\"',\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n      },\n      {\n        id: this.currentId++,\n        userId: 2,\n        type: \"downloaded_notes\",\n        description: 'Downloaded \"Python Fundamentals Notes\"',\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n      },\n    ];\n    activities.forEach(activity => this.recentActivities.set(activity.id, activity));\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = {\n      ...insertUser,\n      id: this.currentId++,\n      role: insertUser.role || \"student\",\n      isActive: insertUser.isActive ?? true,\n      avatar: insertUser.avatar || null,\n      createdAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updateUser: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updateUser };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Course methods\n  async getCourse(id: number): Promise<Course | undefined> {\n    return this.courses.get(id);\n  }\n\n  async getAllCourses(): Promise<Course[]> {\n    return Array.from(this.courses.values()).filter(course => course.isActive);\n  }\n\n  async getCoursesByCategory(category: string): Promise<Course[]> {\n    return Array.from(this.courses.values()).filter(\n      course => course.category === category && course.isActive\n    );\n  }\n\n  async createCourse(insertCourse: InsertCourse): Promise<Course> {\n    const course: Course = {\n      ...insertCourse,\n      id: this.currentId++,\n      isActive: insertCourse.isActive ?? true,\n      createdAt: new Date(),\n    };\n    this.courses.set(course.id, course);\n    return course;\n  }\n\n  async updateCourse(id: number, updateCourse: Partial<InsertCourse>): Promise<Course | undefined> {\n    const course = this.courses.get(id);\n    if (!course) return undefined;\n    \n    const updatedCourse = { ...course, ...updateCourse };\n    this.courses.set(id, updatedCourse);\n    return updatedCourse;\n  }\n\n  async deleteCourse(id: number): Promise<boolean> {\n    const course = this.courses.get(id);\n    if (!course) return false;\n    \n    const updatedCourse = { ...course, isActive: false };\n    this.courses.set(id, updatedCourse);\n    return true;\n  }\n\n  // Course Module methods\n  async getCourseModules(courseId: number): Promise<CourseModule[]> {\n    return Array.from(this.courseModules.values())\n      .filter(module => module.courseId === courseId)\n      .sort((a, b) => a.orderIndex - b.orderIndex);\n  }\n\n  async createCourseModule(insertModule: InsertCourseModule): Promise<CourseModule> {\n    const module: CourseModule = {\n      ...insertModule,\n      id: this.currentId++,\n      description: insertModule.description || null,\n      videoUrl: insertModule.videoUrl || null,\n      isCompleted: insertModule.isCompleted ?? false,\n    };\n    this.courseModules.set(module.id, module);\n    return module;\n  }\n\n  async updateCourseModule(id: number, updateModule: Partial<InsertCourseModule>): Promise<CourseModule | undefined> {\n    const module = this.courseModules.get(id);\n    if (!module) return undefined;\n    \n    const updatedModule = { ...module, ...updateModule };\n    this.courseModules.set(id, updatedModule);\n    return updatedModule;\n  }\n\n  // Course Notes methods\n  async getCourseNotes(courseId: number): Promise<CourseNote[]> {\n    return Array.from(this.courseNotes.values()).filter(note => note.courseId === courseId);\n  }\n\n  async createCourseNote(insertNote: InsertCourseNote): Promise<CourseNote> {\n    const note: CourseNote = {\n      ...insertNote,\n      id: this.currentId++,\n    };\n    this.courseNotes.set(note.id, note);\n    return note;\n  }\n\n  // Enrollment methods\n  async getEnrollmentsByUser(userId: number): Promise<Enrollment[]> {\n    return Array.from(this.enrollments.values()).filter(enrollment => enrollment.userId === userId);\n  }\n\n  async getEnrollmentsByCourse(courseId: number): Promise<Enrollment[]> {\n    return Array.from(this.enrollments.values()).filter(enrollment => enrollment.courseId === courseId);\n  }\n\n  async createEnrollment(insertEnrollment: InsertEnrollment): Promise<Enrollment> {\n    const enrollment: Enrollment = {\n      ...insertEnrollment,\n      id: this.currentId++,\n      progress: insertEnrollment.progress ?? 0,\n      enrolledAt: new Date(),\n    };\n    this.enrollments.set(enrollment.id, enrollment);\n    return enrollment;\n  }\n\n  async updateEnrollmentProgress(userId: number, courseId: number, progress: number): Promise<Enrollment | undefined> {\n    const enrollment = Array.from(this.enrollments.values()).find(\n      e => e.userId === userId && e.courseId === courseId\n    );\n    if (!enrollment) return undefined;\n    \n    const updatedEnrollment = { ...enrollment, progress };\n    this.enrollments.set(enrollment.id, updatedEnrollment);\n    return updatedEnrollment;\n  }\n\n  // Test methods\n  async getTest(id: number): Promise<Test | undefined> {\n    return this.tests.get(id);\n  }\n\n  async getTestsByCourse(courseId: number): Promise<Test[]> {\n    return Array.from(this.tests.values()).filter(test => test.courseId === courseId && test.isActive);\n  }\n\n  async createTest(insertTest: InsertTest): Promise<Test> {\n    const test: Test = {\n      ...insertTest,\n      id: this.currentId++,\n      isActive: insertTest.isActive ?? true,\n      timeLimit: insertTest.timeLimit || null,\n      createdAt: new Date(),\n    };\n    this.tests.set(test.id, test);\n    return test;\n  }\n\n  async updateTest(id: number, updateTest: Partial<InsertTest>): Promise<Test | undefined> {\n    const test = this.tests.get(id);\n    if (!test) return undefined;\n    \n    const updatedTest = { ...test, ...updateTest };\n    this.tests.set(id, updatedTest);\n    return updatedTest;\n  }\n\n  // Test Result methods\n  async getTestResult(id: number): Promise<TestResult | undefined> {\n    return this.testResults.get(id);\n  }\n\n  async getTestResultsByUser(userId: number): Promise<TestResult[]> {\n    return Array.from(this.testResults.values()).filter(result => result.userId === userId);\n  }\n\n  async getTestResultsByTest(testId: number): Promise<TestResult[]> {\n    return Array.from(this.testResults.values()).filter(result => result.testId === testId);\n  }\n\n  async createTestResult(insertResult: InsertTestResult): Promise<TestResult> {\n    const result: TestResult = {\n      ...insertResult,\n      id: this.currentId++,\n      completedAt: new Date(),\n    };\n    this.testResults.set(result.id, result);\n    return result;\n  }\n\n  // Recent Activities methods\n  async getRecentActivitiesByUser(userId: number, limit = 10): Promise<RecentActivity[]> {\n    return Array.from(this.recentActivities.values())\n      .filter(activity => activity.userId === userId)\n      .sort((a, b) => {\n        const aTime = a.createdAt ? a.createdAt.getTime() : 0;\n        const bTime = b.createdAt ? b.createdAt.getTime() : 0;\n        return bTime - aTime;\n      })\n      .slice(0, limit);\n  }\n\n  async createRecentActivity(insertActivity: InsertRecentActivity): Promise<RecentActivity> {\n    const activity: RecentActivity = {\n      ...insertActivity,\n      id: this.currentId++,\n      createdAt: new Date(),\n    };\n    this.recentActivities.set(activity.id, activity);\n    return activity;\n  }\n\n  // Dashboard Stats methods\n  async getUserStats(userId: number): Promise<{\n    enrolledCourses: number;\n    completedCourses: number;\n    hoursLearned: number;\n    averageScore: number;\n  }> {\n    const enrollments = await this.getEnrollmentsByUser(userId);\n    const testResults = await this.getTestResultsByUser(userId);\n    \n    const enrolledCourses = enrollments.length;\n    const completedCourses = enrollments.filter(e => (e.progress || 0) === 100).length;\n    \n    let totalHours = 0;\n    for (const enrollment of enrollments) {\n      const course = await this.getCourse(enrollment.courseId);\n      if (course) {\n        const progress = enrollment.progress || 0;\n        totalHours += Math.floor((course.duration * progress) / 100);\n      }\n    }\n\n    const averageScore = testResults.length > 0 \n      ? Math.round(testResults.reduce((sum, result) => sum + (result.score / result.maxScore * 100), 0) / testResults.length)\n      : 0;\n\n    return {\n      enrolledCourses,\n      completedCourses,\n      hoursLearned: totalHours,\n      averageScore,\n    };\n  }\n\n  async getAdminStats(): Promise<{\n    totalUsers: number;\n    activeCourses: number;\n    testsCompleted: number;\n    averageScore: number;\n  }> {\n    const users = await this.getAllUsers();\n    const courses = await this.getAllCourses();\n    const testResults = Array.from(this.testResults.values());\n    \n    const totalUsers = users.filter(u => u.role === \"student\").length;\n    const activeCourses = courses.length;\n    const testsCompleted = testResults.length;\n    const averageScore = testResults.length > 0\n      ? Math.round(testResults.reduce((sum, result) => sum + (result.score / result.maxScore * 100), 0) / testResults.length * 10) / 10\n      : 0;\n\n    return {\n      totalUsers,\n      activeCourses,\n      testsCompleted,\n      averageScore,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":20096},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"student\"), // student, instructor, admin\n  avatar: text(\"avatar\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const courses = pgTable(\"courses\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  thumbnail: text(\"thumbnail\").notNull(),\n  duration: integer(\"duration\").notNull(), // in hours\n  videoCount: integer(\"video_count\").notNull(),\n  instructorId: integer(\"instructor_id\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const courseModules = pgTable(\"course_modules\", {\n  id: serial(\"id\").primaryKey(),\n  courseId: integer(\"course_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  videoUrl: text(\"video_url\"),\n  duration: integer(\"duration\").notNull(), // in minutes\n  orderIndex: integer(\"order_index\").notNull(),\n  isCompleted: boolean(\"is_completed\").default(false),\n});\n\nexport const courseNotes = pgTable(\"course_notes\", {\n  id: serial(\"id\").primaryKey(),\n  courseId: integer(\"course_id\").notNull(),\n  title: text(\"title\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: text(\"file_size\").notNull(),\n  downloadUrl: text(\"download_url\").notNull(),\n});\n\nexport const enrollments = pgTable(\"enrollments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  courseId: integer(\"course_id\").notNull(),\n  progress: integer(\"progress\").notNull().default(0), // percentage\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n});\n\nexport const tests = pgTable(\"tests\", {\n  id: serial(\"id\").primaryKey(),\n  courseId: integer(\"course_id\").notNull(),\n  title: text(\"title\").notNull(),\n  maxScore: integer(\"max_score\").notNull(),\n  timeLimit: integer(\"time_limit\"), // in minutes\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const testResults = pgTable(\"test_results\", {\n  id: serial(\"id\").primaryKey(),\n  testId: integer(\"test_id\").notNull(),\n  userId: integer(\"user_id\").notNull(),\n  score: integer(\"score\").notNull(),\n  maxScore: integer(\"max_score\").notNull(),\n  grade: text(\"grade\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const recentActivities = pgTable(\"recent_activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  type: text(\"type\").notNull(), // completed_video, scored_test, downloaded_notes\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourseModuleSchema = createInsertSchema(courseModules).omit({\n  id: true,\n});\n\nexport const insertCourseNoteSchema = createInsertSchema(courseNotes).omit({\n  id: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertTestSchema = createInsertSchema(tests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTestResultSchema = createInsertSchema(testResults).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const insertRecentActivitySchema = createInsertSchema(recentActivities).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\n\nexport type CourseModule = typeof courseModules.$inferSelect;\nexport type InsertCourseModule = z.infer<typeof insertCourseModuleSchema>;\n\nexport type CourseNote = typeof courseNotes.$inferSelect;\nexport type InsertCourseNote = z.infer<typeof insertCourseNoteSchema>;\n\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\n\nexport type Test = typeof tests.$inferSelect;\nexport type InsertTest = z.infer<typeof insertTestSchema>;\n\nexport type TestResult = typeof testResults.$inferSelect;\nexport type InsertTestResult = z.infer<typeof insertTestResultSchema>;\n\nexport type RecentActivity = typeof recentActivities.$inferSelect;\nexport type InsertRecentActivity = z.infer<typeof insertRecentActivitySchema>;\n","size_bytes":5073},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Courses from \"@/pages/courses\";\nimport CourseDetail from \"@/pages/course-detail\";\nimport TestResults from \"@/pages/test-results\";\nimport Admin from \"@/pages/admin\";\nimport Profile from \"@/pages/profile\";\nimport VideoPlayer from \"@/pages/video-player\";\nimport Landing from \"@/pages/landing\";\nimport AuthPage from \"@/pages/auth-page\";\nimport EmailVerification from \"@/pages/email-verification\";\nimport AccountSetup from \"@/pages/AccountSetup\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, isAdmin } = useAuth();\n  const { toast } = useToast();\n\n  // Handle Google OAuth token in URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('token');\n    const authSuccess = urlParams.get('auth_success');\n    \n    if (token && authSuccess) {\n      // Store token in localStorage\n      localStorage.setItem('token', token);\n      \n      // Clean up URL\n      const newUrl = window.location.pathname;\n      window.history.replaceState({}, '', newUrl);\n      \n      // Show success message\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome! You have been logged in with Google.\",\n      });\n      \n      // Refresh the page to update authentication state\n      window.location.reload();\n    }\n  }, [toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/verify-email\" component={EmailVerification} />\n      <Route path=\"/account-setup\" component={AccountSetup} />\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/mycourses\">\n            <Courses />\n          </Route>\n          <Route path=\"/courses\">\n            <Courses />\n          </Route>\n          <Route path=\"/courses/:id\">\n            <CourseDetail />\n          </Route>\n          <Route path=\"/video/:courseId/:moduleId\">\n            <VideoPlayer />\n          </Route>\n          <Route path=\"/test-results\">\n            <TestResults />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          {isAdmin && (\n            <Route path=\"/admin\">\n              <Admin />\n            </Route>\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3596},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n/* Custom styles for the educational platform */\n.stats-card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200;\n}\n\n.course-card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200;\n}\n\n.course-progress-bar {\n  @apply w-full bg-gray-200 rounded-full h-2;\n}\n\n.course-progress-fill {\n  @apply h-2 rounded-full transition-all duration-300;\n}\n\n.activity-item {\n  @apply flex items-center space-x-4 p-3 hover:bg-gray-50 rounded-lg transition-colors duration-200;\n}\n\n.admin-tab-btn {\n  @apply border-b-2 py-4 px-1 text-sm font-medium hover:text-gray-700 transition-colors duration-200;\n}\n\n.admin-tab-btn.active {\n  @apply border-primary text-primary;\n}\n\n.video-player-container {\n  @apply bg-black rounded-lg aspect-video flex items-center justify-center relative overflow-hidden;\n}\n\n.pdf-viewer-container {\n  @apply bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 p-8 text-center;\n}\n\n.grade-badge {\n  @apply inline-flex px-2 py-1 text-xs font-semibold rounded-full;\n}\n\n.grade-a {\n  @apply bg-green-100 text-green-800;\n}\n\n.grade-b {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.grade-c {\n  @apply bg-orange-100 text-orange-800;\n}\n\n.status-badge {\n  @apply inline-flex px-2.5 py-0.5 text-xs font-medium rounded;\n}\n\n.status-active {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-inactive {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-in-progress {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.status-completed {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-not-started {\n  @apply bg-gray-100 text-gray-800;\n}\n\n/* Custom animations for landing page */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes gradient-shift {\n  0%, 100% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);\n  }\n  50% {\n    box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);\n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animation-delay-1000 {\n  animation-delay: 1s;\n}\n\n.animation-delay-2000 {\n  animation-delay: 2s;\n}\n\n.animation-delay-3000 {\n  animation-delay: 3s;\n}\n\n.animate-gradient {\n  animation: gradient-shift 8s ease infinite;\n  background-size: 200% 200%;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 3s ease-in-out infinite;\n}\n\n/* Improved hover effects */\n.card-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-10px) scale(1.02);\n}\n","size_bytes":4372},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/database.js":{"content":"import mongoose from 'mongoose';\n\nconst MONGO_URI = 'mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS?retryWrites=true&w=majority&appName=himanshu';\n\nexport const connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(MONGO_URI);\n\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n    \n    // Create default admin user if it doesn't exist\n    await createDefaultAdmin();\n    \n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error.message);\n    process.exit(1);\n  }\n};\n\nconst createDefaultAdmin = async () => {\n  try {\n    const { default: User } = await import('../models/User.js');\n    \n    const adminExists = await User.findOne({ role: 'admin' });\n    \n    if (!adminExists) {\n      const admin = new User({\n        username: 'admin',\n        email: 'admin@eduplatform.com',\n        password: 'admin123',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n      });\n      \n      await admin.save();\n      console.log('Default admin user created');\n    }\n\n    // Create default student user if it doesn't exist\n    const studentExists = await User.findOne({ username: 'john' });\n    \n    if (!studentExists) {\n      const student = new User({\n        username: 'john',\n        email: 'john@example.com',\n        password: 'john123',\n        firstName: 'John',\n        lastName: 'Smith',\n        role: 'student',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n      });\n      \n      await student.save();\n      console.log('Default student user created');\n    }\n    \n  } catch (error) {\n    console.error('Error creating default users:', error.message);\n  }\n};\n\nexport default connectDB;","size_bytes":1932},"server/models/Course.js":{"content":"import mongoose from 'mongoose';\n\nconst courseModuleSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  youtubeUrl: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/.test(v);\n      },\n      message: 'Please provide a valid YouTube URL'\n    }\n  },\n  duration: {\n    type: Number,\n    required: true,\n    min: 1\n  },\n  orderIndex: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  completedBy: [{\n    userId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: true\n    },\n    completedAt: {\n      type: Date,\n      default: Date.now\n    }\n  }]\n}, {\n  timestamps: true\n});\n\nconst courseNoteSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  pdfUrl: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^https?:\\/\\/.+\\.(pdf)$/i.test(v) || /^https?:\\/\\/.+/.test(v);\n      },\n      message: 'Please provide a valid PDF URL'\n    }\n  },\n  fileSize: {\n    type: String,\n    default: 'Unknown'\n  }\n}, {\n  timestamps: true\n});\n\nconst courseSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  category: {\n    type: String,\n    required: true,\n    enum: ['Programming', 'Data Science', 'Mathematics', 'Business', 'Design', 'Other'],\n    default: 'Other'\n  },\n  thumbnail: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i.test(v) || /^https?:\\/\\/.+/.test(v);\n      },\n      message: 'Please provide a valid image URL'\n    }\n  },\n  instructor: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  modules: [courseModuleSchema],\n  notes: [courseNoteSchema],\n  duration: {\n    type: Number,\n    default: 0\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  price: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  level: {\n    type: String,\n    enum: ['Beginner', 'Intermediate', 'Advanced'],\n    default: 'Beginner'\n  }\n}, {\n  timestamps: true\n});\n\n// Calculate total duration from modules\ncourseSchema.pre('save', function(next) {\n  if (this.modules && this.modules.length > 0) {\n    this.duration = this.modules.reduce((total, module) => total + module.duration, 0);\n  }\n  next();\n});\n\n// Virtual for video count\ncourseSchema.virtual('videoCount').get(function() {\n  return this.modules ? this.modules.length : 0;\n});\n\ncourseSchema.set('toJSON', { virtuals: true });\ncourseSchema.set('toObject', { virtuals: true });\n\nexport default mongoose.model('Course', courseSchema);","size_bytes":2880},"server/models/Enrollment.js":{"content":"import mongoose from 'mongoose';\n\nconst enrollmentSchema = new mongoose.Schema({\n  student: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  course: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Course',\n    required: true\n  },\n  progress: {\n    type: Number,\n    default: 0,\n    min: 0,\n    max: 100\n  },\n  completedModules: [{\n    type: mongoose.Schema.Types.ObjectId\n  }],\n  enrollmentDate: {\n    type: Date,\n    default: Date.now\n  },\n  completionDate: {\n    type: Date,\n    default: null\n  },\n  isCompleted: {\n    type: Boolean,\n    default: false\n  }\n}, {\n  timestamps: true\n});\n\n// Compound index to ensure one enrollment per user per course\nenrollmentSchema.index({ student: 1, course: 1 }, { unique: true });\n\n// Update completion status based on progress\nenrollmentSchema.pre('save', function(next) {\n  if (this.progress >= 100 && !this.isCompleted) {\n    this.isCompleted = true;\n    this.completionDate = new Date();\n  } else if (this.progress < 100) {\n    this.isCompleted = false;\n    this.completionDate = null;\n  }\n  next();\n});\n\nexport default mongoose.model('Enrollment', enrollmentSchema);","size_bytes":1154},"server/models/Test.js":{"content":"import mongoose from 'mongoose';\n\nconst testResultSchema = new mongoose.Schema({\n  student: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  score: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  maxScore: {\n    type: Number,\n    required: true,\n    min: 1\n  },\n  grade: {\n    type: String,\n    required: true,\n    enum: ['A+', 'A', 'B+', 'B', 'C+', 'C', 'D', 'F']\n  },\n  answers: [{\n    questionIndex: Number,\n    selectedAnswer: String,\n    isCorrect: Boolean\n  }],\n\n  completedAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n});\n\nconst questionSchema = new mongoose.Schema({\n  question: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  options: [{\n    type: String,\n    required: true,\n    trim: true\n  }],\n  correctAnswer: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  explanation: {\n    type: String,\n    trim: true\n  },\n  points: {\n    type: Number,\n    default: 1,\n    min: 0\n  }\n}, {\n  timestamps: true\n});\n\nconst testSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  course: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Course',\n    required: true\n  },\n  questions: [questionSchema],\n  timeLimit: {\n    type: Number, // in minutes\n    default: 60,\n    min: 1\n  },\n  maxScore: {\n    type: Number,\n    default: 100\n  },\n  passingScore: {\n    type: Number,\n    default: 60,\n    min: 0,\n    max: 100\n  },\n  attempts: {\n    type: Number,\n    default: 3,\n    min: 1\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  results: [testResultSchema]\n}, {\n  timestamps: true\n});\n\n// Calculate max score from questions\ntestSchema.pre('save', function(next) {\n  if (this.questions && this.questions.length > 0) {\n    this.maxScore = this.questions.reduce((total, question) => total + question.points, 0);\n  }\n  next();\n});\n\nexport default mongoose.model('Test', testSchema);","size_bytes":1994},"server/models/User.js":{"content":"import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: function() {\n      return !this.googleId; // Password not required for Google OAuth users\n    },\n    minlength: 6\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  role: {\n    type: String,\n    enum: ['student', 'instructor', 'admin'],\n    default: 'student'\n  },\n  avatar: {\n    type: String,\n    default: null\n  },\n  googleId: {\n    type: String,\n    unique: true,\n    sparse: true\n  },\n  emailVerified: {\n    type: Boolean,\n    default: false\n  },\n  emailVerificationOTP: {\n    type: String,\n    default: null\n  },\n  otpExpiresAt: {\n    type: Date,\n    default: null\n  },\n  replitId: {\n    type: String,\n    unique: true,\n    sparse: true // Allow null values but enforce uniqueness when present\n  },\n  profileImageUrl: {\n    type: String,\n    default: null\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  isApproved: {\n    type: Boolean,\n    default: false\n  },\n  approvedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  approvedAt: {\n    type: Date,\n    default: null\n  },\n  enrolledCourses: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Course'\n  }],\n  approvedCourses: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Course'\n  }]\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return await bcrypt.compare(candidatePassword, this.password);\n};\n\nexport default mongoose.model('User', userSchema);","size_bytes":2209},"server/routes/authRoutes.js":{"content":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js';\nimport { generateOTP, sendOTPEmail, sendWelcomeEmail } from '../utils/emailService.js';\n\nconst router = express.Router();\n\n// Register with email verification\nrouter.post('/register', async (req, res) => {\n  try {\n    const { username, email, password, firstName, lastName } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({ \n      $or: [{ email }, { username }] \n    });\n\n    if (existingUser) {\n      if (existingUser.email === email) {\n        return res.status(400).json({ message: 'Email already registered' });\n      }\n      if (existingUser.username === username) {\n        return res.status(400).json({ message: 'Username already taken' });\n      }\n    }\n\n    // Generate OTP\n    const otp = generateOTP();\n    const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n    // Hash password\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    // Create user with OTP\n    const user = new User({\n      username,\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      role: 'student',\n      isApproved: false,\n      emailVerified: false,\n      emailVerificationOTP: otp,\n      otpExpiresAt\n    });\n\n    await user.save();\n\n    // Send OTP email\n    const emailSent = await sendOTPEmail(email, otp, firstName);\n    \n    if (!emailSent) {\n      console.warn(`Failed to send OTP email to ${email}, but user was created`);\n    }\n\n    res.status(201).json({\n      message: 'Registration successful! Please check your email for the verification code.',\n      userId: user._id,\n      requiresEmailVerification: true\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ message: 'Registration failed. Please try again.' });\n  }\n});\n\n// Verify email with OTP\nrouter.post('/verify-email', async (req, res) => {\n  try {\n    const { userId, otp } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    if (user.emailVerified) {\n      return res.status(400).json({ message: 'Email already verified' });\n    }\n\n    if (!user.emailVerificationOTP || user.emailVerificationOTP !== otp) {\n      return res.status(400).json({ message: 'Invalid verification code' });\n    }\n\n    if (user.otpExpiresAt && user.otpExpiresAt < new Date()) {\n      return res.status(400).json({ message: 'Verification code has expired' });\n    }\n\n    // Mark email as verified\n    user.emailVerified = true;\n    user.emailVerificationOTP = null;\n    user.otpExpiresAt = null;\n    await user.save();\n\n    // Send welcome email\n    await sendWelcomeEmail(user.email, user.firstName);\n\n    res.json({\n      message: 'Email verified successfully! Your account is pending admin approval.',\n      emailVerified: true\n    });\n\n  } catch (error) {\n    console.error('Email verification error:', error);\n    res.status(500).json({ message: 'Verification failed. Please try again.' });\n  }\n});\n\n// Resend OTP\nrouter.post('/resend-otp', async (req, res) => {\n  try {\n    const { userId } = req.body;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    if (user.emailVerified) {\n      return res.status(400).json({ message: 'Email already verified' });\n    }\n\n    // Generate new OTP\n    const otp = generateOTP();\n    const otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n    user.emailVerificationOTP = otp;\n    user.otpExpiresAt = otpExpiresAt;\n    await user.save();\n\n    // Send OTP email\n    const emailSent = await sendOTPEmail(user.email, otp, user.firstName);\n    \n    if (!emailSent) {\n      return res.status(500).json({ message: 'Failed to send verification email' });\n    }\n\n    res.json({ message: 'Verification code sent successfully!' });\n\n  } catch (error) {\n    console.error('Resend OTP error:', error);\n    res.status(500).json({ message: 'Failed to resend verification code' });\n  }\n});\n\n// Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    // Find user\n    const user = await User.findOne({ username }).populate('enrolledCourses');\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Check if user registered with Google (no password)\n    if (user.googleId && !user.password) {\n      return res.status(401).json({ \n        message: 'This account was created with Google. Please use Google Sign-In.' \n      });\n    }\n\n    // Check password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Check if email is verified\n    if (!user.emailVerified) {\n      return res.status(401).json({ \n        message: 'Please verify your email before logging in.',\n        requiresEmailVerification: true,\n        userId: user._id\n      });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { \n        userId: user._id, \n        username: user.username, \n        role: user.role \n      },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '24h' }\n    );\n\n    res.json({\n      message: 'Login successful',\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        avatar: user.avatar,\n        profileImageUrl: user.profileImageUrl,\n        isApproved: user.isApproved,\n        approvedCourses: user.approvedCourses || [],\n        enrolledCourses: user.enrolledCourses || []\n      }\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ message: 'Login failed. Please try again.' });\n  }\n});\n\n// Update user profile\nrouter.put('/profile', async (req, res) => {\n  try {\n    // Extract token from Authorization header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n    \n    const token = authHeader.split(' ')[1];\n    let decoded;\n    \n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');\n    } catch (error) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    \n    const { firstName, lastName, username, email } = req.body;\n    \n    // Find the user\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Check if username or email are being changed and if they're already taken\n    if (username !== user.username) {\n      const existingUser = await User.findOne({ username, _id: { $ne: decoded.userId } });\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username already taken' });\n      }\n    }\n    \n    if (email !== user.email) {\n      const existingUser = await User.findOne({ email, _id: { $ne: decoded.userId } });\n      if (existingUser) {\n        return res.status(400).json({ message: 'Email already registered' });\n      }\n    }\n    \n    // Update user fields\n    user.firstName = firstName || user.firstName;\n    user.lastName = lastName || user.lastName;\n    user.username = username || user.username;\n    user.email = email || user.email;\n    \n    await user.save();\n    \n    res.json({\n      message: 'Profile updated successfully',\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        avatar: user.avatar,\n        profileImageUrl: user.profileImageUrl,\n        isApproved: user.isApproved,\n        emailVerified: user.emailVerified,\n        isActive: user.isActive,\n        createdAt: user.createdAt\n      }\n    });\n    \n  } catch (error) {\n    console.error('Profile update error:', error);\n    res.status(500).json({ message: 'Failed to update profile. Please try again.' });\n  }\n});\n\nexport default router;","size_bytes":8347},"server/routes/mongoRoutes.js":{"content":"import express from 'express';\nimport User from '../models/User.js';\nimport Course from '../models/Course.js';\nimport Enrollment from '../models/Enrollment.js';\nimport Test from '../models/Test.js';\nimport jwt from 'jsonwebtoken';\nimport authRoutes from './authRoutes.js';\n\nconst router = express.Router();\n\n// JWT Secret from environment variable\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\n// Admin middleware - works with JWT auth\nconst requireAdmin = (req, res, next) => {\n  if (!req.user || req.user.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\n// Student data filter middleware\nconst filterStudentData = (req, res, next) => {\n  if (req.user?.dbUser?.role === 'student') {\n    req.studentId = req.user.dbUser._id;\n  }\n  next();\n};\n\n// JWT token verification middleware\nconst verifyToken = async (req, res, next) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ message: 'Access denied. No token provided.' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const userId = decoded.userId || decoded.id; // Support both formats\n    const user = await User.findById(userId).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token. User not found.' });\n    }\n    \n    // Set both formats for compatibility\n    req.user = { \n      id: userId, \n      username: decoded.username, \n      role: decoded.role,\n      dbUser: user \n    };\n    next();\n  } catch (error) {\n    console.error('JWT verification error:', error);\n    res.status(401).json({ message: 'Invalid token' });\n  }\n};\n\n// Check if user has completed setup (for Replit auth flow)\nrouter.post('/auth/check-setup', async (req, res) => {\n  try {\n    const { email } = req.body;\n    \n    const user = await User.findOne({ email });\n    const hasSetup = !!user;\n    \n    res.json({ hasSetup });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to check setup status', error: error.message });\n  }\n});\n\n// Complete account setup after Replit email verification\nrouter.post('/auth/complete-setup', async (req, res) => {\n  try {\n    const { email, firstName, lastName, username, password, replitId, profileImageUrl } = req.body;\n    \n    // Check if user already exists with this email or username\n    const existingUser = await User.findOne({ \n      $or: [{ email }, { username }] \n    });\n    \n    if (existingUser) {\n      return res.status(400).json({ \n        message: 'Account already exists with this email or username' \n      });\n    }\n    \n    // Create new user (not approved by default)\n    const user = new User({\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      role: 'student',\n      isApproved: false, // Requires admin approval\n      replitId,\n      profileImageUrl\n    });\n    \n    await user.save();\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { id: user._id, username: user.username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n    \n    res.status(201).json({ \n      message: 'Account setup complete! Your account is pending approval.',\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isApproved: user.isApproved,\n        approvedCourses: user.approvedCourses || []\n      }\n    });\n  } catch (error) {\n    res.status(400).json({ message: 'Account setup failed', error: error.message });\n  }\n});\n\n// Email/Password registration (direct registration)\nrouter.post('/auth/register', async (req, res) => {\n  try {\n    const { username, email, password, firstName, lastName } = req.body;\n    \n    // Check if user already exists\n    const existingUser = await User.findOne({ \n      $or: [{ email }, { username }] \n    });\n    \n    if (existingUser) {\n      return res.status(400).json({ \n        message: 'User already exists with this email or username' \n      });\n    }\n    \n    // Create new user (not approved by default)\n    const user = new User({\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n      role: 'student',\n      isApproved: false // Requires admin approval\n    });\n    \n    await user.save();\n    \n    res.status(201).json({ \n      message: 'Registration successful! Your account is pending approval.',\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        isApproved: user.isApproved\n      }\n    });\n  } catch (error) {\n    res.status(400).json({ message: 'Registration failed', error: error.message });\n  }\n});\n\n// Email/Password login\nrouter.post('/auth/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    \n    const user = await User.findOne({ username });\n    if (!user || !(await user.comparePassword(password))) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    const token = jwt.sign(\n      { id: user._id, username: user.username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    res.json({\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        avatar: user.avatar,\n        isApproved: user.isApproved,\n        approvedCourses: user.approvedCourses || []\n      },\n      token\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n});\n\n// Get current user (JWT authentication)\nrouter.get('/auth/user', async (req, res) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n    \n    const decoded = jwt.verify(token, JWT_SECRET);\n    const user = await User.findById(decoded.id).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token. User not found.' });\n    }\n    \n    res.json({\n      id: user._id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      avatar: user.avatar,\n      isApproved: user.isApproved,\n      approvedCourses: user.approvedCourses || []\n    });\n  } catch (error) {\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n    res.status(500).json({ message: 'Failed to fetch user', error: error.message });\n  }\n});\n\n// User routes\nrouter.get('/users', async (req, res) => {\n  try {\n    const users = await User.find({}, '-password');\n    res.json(users);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch users', error: error.message });\n  }\n});\n\nrouter.get('/users/:id', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id, '-password');\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    res.json(user);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch user', error: error.message });\n  }\n});\n\n// Course routes - with approval check\nrouter.get('/courses', verifyToken, async (req, res) => {\n  try {\n    const user = req.user.dbUser;\n    \n    // Check if user is approved\n    if (!user.isApproved && user.role !== 'admin') {\n      return res.status(403).json({ \n        message: 'Access denied. Your account is pending approval.',\n        requiresApproval: true \n      });\n    }\n    \n    const { category } = req.query;\n    let query = { isActive: true };\n    \n    if (category && category !== 'all') {\n      query.category = category;\n    }\n    \n    // For students, only show enrolled courses\n    if (user.role === 'student') {\n      const enrolledCourseIds = user.enrolledCourses || [];\n      query._id = { $in: enrolledCourseIds };\n    }\n    \n    const courses = await Course.find(query)\n      .populate('instructor', 'firstName lastName')\n      .select('-modules.correctAnswer');\n    \n    res.json(courses);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch courses', error: error.message });\n  }\n});\n\nrouter.get('/courses/:id', verifyToken, async (req, res) => {\n  try {\n    const user = req.user.dbUser;\n    \n    // Check if user is approved\n    if (!user.isApproved && user.role !== 'admin') {\n      return res.status(403).json({ \n        message: 'Access denied. Your account is pending approval.',\n        requiresApproval: true \n      });\n    }\n    \n    const course = await Course.findById(req.params.id)\n      .populate('instructor', 'firstName lastName');\n    \n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    // For students, check if they're enrolled in this course\n    if (user.role === 'student') {\n      const enrolledCourseIds = user.enrolledCourses?.map(id => id.toString()) || [];\n      if (!enrolledCourseIds.includes(req.params.id)) {\n        return res.status(403).json({ \n          message: 'Access denied. You are not enrolled in this course.' \n        });\n      }\n    }\n    \n    res.json(course);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch course', error: error.message });\n  }\n});\n\n// Admin: Create course with modules and notes\nrouter.post('/courses', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const {\n      title,\n      description,\n      category,\n      thumbnail,\n      level,\n      price,\n      modules,\n      notes\n    } = req.body;\n\n    // Use admin user ID for instructor\n    const adminUser = await User.findOne({ role: 'admin' });\n    \n    const course = new Course({\n      title,\n      description,\n      category,\n      thumbnail,\n      level: level || 'Beginner',\n      price: price || 0,\n      instructor: adminUser._id,\n      modules: modules || [],\n      notes: notes || []\n    });\n\n    await course.save();\n    await course.populate('instructor', 'firstName lastName');\n    \n    res.status(201).json(course);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to create course', error: error.message });\n  }\n});\n\n// Admin: Update course\nrouter.put('/courses/:id', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const course = await Course.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true, runValidators: true }\n    ).populate('instructor', 'firstName lastName');\n    \n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    res.json(course);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to update course', error: error.message });\n  }\n});\n\n// Admin: Delete course\nrouter.delete('/courses/:id', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const course = await Course.findByIdAndUpdate(\n      req.params.id,\n      { isActive: false },\n      { new: true }\n    );\n    \n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    res.json({ message: 'Course deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to delete course', error: error.message });\n  }\n});\n\n// Admin: Add module to course\nrouter.post('/courses/:id/modules', async (req, res) => {\n  try {\n    const { title, description, youtubeUrl, duration, orderIndex } = req.body;\n    \n    const course = await Course.findById(req.params.id);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    course.modules.push({\n      title,\n      description,\n      youtubeUrl,\n      duration,\n      orderIndex: orderIndex || course.modules.length\n    });\n    \n    await course.save();\n    res.json(course);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to add module', error: error.message });\n  }\n});\n\n// Admin: Add note to course\nrouter.post('/courses/:id/notes', async (req, res) => {\n  try {\n    const { title, pdfUrl, fileSize } = req.body;\n    \n    const course = await Course.findById(req.params.id);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    course.notes.push({\n      title,\n      pdfUrl,\n      fileSize: fileSize || 'Unknown'\n    });\n    \n    await course.save();\n    res.json(course);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to add note', error: error.message });\n  }\n});\n\n// Get course modules\nrouter.get('/courses/:id/modules', async (req, res) => {\n  try {\n    const course = await Course.findById(req.params.id);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    res.json(course.modules.sort((a, b) => a.orderIndex - b.orderIndex));\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch modules', error: error.message });\n  }\n});\n\n// Get course notes\nrouter.get('/courses/:id/notes', async (req, res) => {\n  try {\n    const course = await Course.findById(req.params.id);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    res.json(course.notes);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch notes', error: error.message });\n  }\n});\n\n// Enrollment routes\nrouter.get('/users/:id/enrollments', async (req, res) => {\n  try {\n    const enrollments = await Enrollment.find({ student: req.params.id })\n      .populate('course', 'title description category thumbnail duration videoCount');\n    \n    res.json(enrollments);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch enrollments', error: error.message });\n  }\n});\n\nrouter.post('/enrollments', async (req, res) => {\n  try {\n    const { userId, courseId } = req.body;\n    \n    // Check if already enrolled\n    const existingEnrollment = await Enrollment.findOne({\n      student: userId,\n      course: courseId\n    });\n    \n    if (existingEnrollment) {\n      return res.status(400).json({ message: 'Already enrolled in this course' });\n    }\n    \n    const enrollment = new Enrollment({\n      student: userId,\n      course: courseId\n    });\n    \n    await enrollment.save();\n    await enrollment.populate('course', 'title description category thumbnail duration videoCount');\n    \n    res.status(201).json(enrollment);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to create enrollment', error: error.message });\n  }\n});\n\n// Update enrollment progress\nrouter.put('/enrollments/:studentId/:courseId/progress', async (req, res) => {\n  try {\n    const { progress } = req.body;\n    \n    const enrollment = await Enrollment.findOneAndUpdate(\n      { student: req.params.studentId, course: req.params.courseId },\n      { progress },\n      { new: true }\n    );\n    \n    if (!enrollment) {\n      return res.status(404).json({ message: 'Enrollment not found' });\n    }\n    \n    res.json(enrollment);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to update progress', error: error.message });\n  }\n});\n\n// Public platform stats endpoint (no authentication required)\nrouter.get('/platform/stats', async (req, res) => {\n  try {\n    // Get total active courses available\n    const totalCourses = await Course.countDocuments({ isActive: true });\n    \n    // Get total available tests\n    const availableTests = await Test.countDocuments({ isActive: true });\n    \n    // Calculate overall average score from all test results\n    const testResults = await Test.aggregate([\n      { $match: { isActive: true } },\n      { $unwind: '$results' },\n      { $group: { _id: null, averageScore: { $avg: '$results.score' } } }\n    ]);\n    \n    const overallAverageScore = testResults.length > 0 ? Math.round(testResults[0].averageScore) : 0;\n    \n    res.json({\n      totalCourses,\n      availableTests,\n      overallAverageScore\n    });\n  } catch (error) {\n    console.error('Error fetching platform stats:', error);\n    res.status(500).json({ message: 'Failed to fetch platform stats', error: error.message });\n  }\n});\n\n// User-specific stats endpoint (requires authentication)\nrouter.get('/user/stats', verifyToken, async (req, res) => {\n  try {\n    const userId = req.user.id;\n    const userRole = req.user.role;\n    \n    // Get total active courses available\n    const totalCourses = await Course.countDocuments({ isActive: true });\n    \n    // Get total available tests\n    const availableTests = await Test.countDocuments({ isActive: true });\n    \n    let averageScore = 0;\n    \n    if (userRole === 'admin') {\n      // For admin: provide comprehensive platform statistics\n      const totalStudents = await User.countDocuments({ role: 'student', isActive: true });\n      \n      // Calculate overall student progress average\n      const allEnrollments = await Enrollment.find({});\n      const totalProgress = allEnrollments.reduce((sum, enrollment) => sum + (enrollment.progress || 0), 0);\n      const overallProgressAverage = allEnrollments.length > 0 \n        ? Math.round(totalProgress / allEnrollments.length) \n        : 0;\n      \n      // Calculate average test score of all students\n      const tests = await Test.find({ isActive: true });\n      const allScores = [];\n      \n      tests.forEach(test => {\n        test.results.forEach(result => {\n          if (result.score && test.maxScore) {\n            const percentage = (result.score / test.maxScore) * 100;\n            allScores.push(percentage);\n          }\n        });\n      });\n      \n      averageScore = allScores.length > 0 ? Math.round(allScores.reduce((sum, score) => sum + score, 0) / allScores.length) : 0;\n      \n      // Get all students with test results for progress tracking\n      const studentsWithTests = await User.find({ role: 'student', isActive: true });\n      const studentProgressData = [];\n      \n      for (const student of studentsWithTests) {\n        const studentEnrollments = await Enrollment.find({ student: student._id });\n        const avgProgress = studentEnrollments.length > 0 \n          ? Math.round(studentEnrollments.reduce((sum, e) => sum + (e.progress || 0), 0) / studentEnrollments.length)\n          : 0;\n        \n        const studentTests = [];\n        tests.forEach(test => {\n          const result = test.results.find(r => r.student.toString() === student._id.toString());\n          if (result) {\n            studentTests.push((result.score / test.maxScore) * 100);\n          }\n        });\n        \n        const studentAvgScore = studentTests.length > 0 \n          ? Math.round(studentTests.reduce((sum, score) => sum + score, 0) / studentTests.length)\n          : 0;\n        \n        if (studentTests.length > 0 || studentEnrollments.length > 0) {\n          studentProgressData.push({\n            name: `${student.firstName} ${student.lastName}`,\n            progress: avgProgress,\n            averageScore: studentAvgScore,\n            testsCompleted: studentTests.length\n          });\n        }\n      }\n      \n      res.json({\n        totalCourses,\n        totalStudents,\n        availableTests,\n        averageScore,\n        overallProgressAverage,\n        studentProgressData,\n        userRole\n      });\n    } else {\n      // For students: show their personal average score using same calculation as test results page\n      const tests = await Test.find({ isActive: true });\n      const userScores = [];\n      \n      tests.forEach(test => {\n        const userResult = test.results.find(result => result.student.toString() === userId);\n        if (userResult && userResult.score && test.maxScore) {\n          const percentage = (userResult.score / test.maxScore) * 100;\n          userScores.push(percentage);\n        }\n      });\n      \n      averageScore = userScores.length > 0 ? Math.round(userScores.reduce((sum, score) => sum + score, 0) / userScores.length) : 0;\n      \n      res.json({\n        totalCourses,\n        availableTests,\n        averageScore,\n        userRole\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching user stats:', error);\n    res.status(500).json({ message: 'Failed to fetch user stats', error: error.message });\n  }\n});\n\n// Create sample enrollment for demonstration (temporary endpoint)\nrouter.get('/create-sample-enrollment', async (req, res) => {\n  try {\n    console.log('Creating sample enrollment...');\n    \n    // Find an existing student user\n    const user = await User.findOne({ role: 'student' });\n    console.log('Found user:', user ? `${user.firstName} ${user.lastName}` : 'None');\n    \n    if (!user) {\n      return res.status(404).json({ message: 'No student user found' });\n    }\n    \n    // Find an existing course\n    const course = await Course.findOne();\n    console.log('Found course:', course ? course.title : 'None');\n    \n    if (!course) {\n      return res.status(404).json({ message: 'No course found' });\n    }\n    \n    // Check if enrollment already exists\n    const existingEnrollment = await Enrollment.findOne({\n      student: user._id,\n      course: course._id\n    });\n    \n    if (existingEnrollment) {\n      console.log('Enrollment already exists');\n      return res.json({ message: 'Enrollment already exists', alreadyExists: true });\n    }\n    \n    // Create enrollment\n    const enrollment = new Enrollment({\n      student: user._id,\n      course: course._id,\n      progress: 25\n    });\n    \n    await enrollment.save();\n    console.log('Enrollment created successfully');\n    \n    res.json({\n      message: 'Sample enrollment created successfully',\n      enrollment: {\n        student: user.firstName + ' ' + user.lastName,\n        course: course.title,\n        progress: enrollment.progress\n      }\n    });\n  } catch (error) {\n    console.error('Error creating sample enrollment:', error);\n    res.status(500).json({ message: 'Failed to create sample enrollment', error: error.message });\n  }\n});\n\n// User stats - students can only see their own stats\nrouter.get('/users/:id/stats', filterStudentData, async (req, res) => {\n  try {\n    const userId = req.params.id;\n    \n    // If student, only allow access to their own stats\n    if (req.user?.dbUser?.role === 'student' && req.user.dbUser._id.toString() !== userId) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    \n    const enrollments = await Enrollment.find({ student: userId }).populate('course');\n    const enrolledCourses = enrollments.length;\n    const completedCourses = enrollments.filter(e => e.isCompleted).length;\n    \n    let hoursLearned = 0;\n    enrollments.forEach(enrollment => {\n      if (enrollment.course) {\n        hoursLearned += Math.floor((enrollment.course.duration * enrollment.progress) / 100);\n      }\n    });\n    \n    // Calculate average test scores (implement when tests are added)\n    const averageScore = 85; // Placeholder\n    \n    res.json({\n      enrolledCourses,\n      completedCourses,\n      hoursLearned,\n      averageScore\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch user stats', error: error.message });\n  }\n});\n\n// Test management routes\nrouter.get('/tests', async (req, res) => {\n  try {\n    const { courseId } = req.query;\n    let query = { isActive: true };\n    \n    if (courseId) {\n      query.course = courseId;\n    }\n    \n    const tests = await Test.find(query)\n      .populate('course', 'title category')\n      .select('-questions.correctAnswer -results.answers');\n    \n    res.json(tests);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch tests', error: error.message });\n  }\n});\n\nrouter.get('/tests/:id', async (req, res) => {\n  try {\n    const test = await Test.findById(req.params.id)\n      .populate('course', 'title category')\n      .populate('results.student', 'firstName lastName email');\n    \n    if (!test) {\n      return res.status(404).json({ message: 'Test not found' });\n    }\n    \n    res.json(test);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch test', error: error.message });\n  }\n});\n\n// Admin: Create test\nrouter.post('/tests', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const {\n      title,\n      description,\n      courseId,\n      questions,\n      timeLimit,\n      passingScore,\n      attempts,\n      maxScore\n    } = req.body;\n\n    const test = new Test({\n      title,\n      description,\n      course: courseId,\n      questions: questions || [],\n      timeLimit: timeLimit || 60,\n      passingScore: passingScore || 60,\n      attempts: attempts || 3,\n      maxScore: maxScore || 100\n    });\n\n    await test.save();\n    await test.populate('course', 'title category');\n    \n    res.status(201).json(test);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to create test', error: error.message });\n  }\n});\n\n// Admin: Update test\nrouter.put('/tests/:id', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const {\n      title,\n      description,\n      courseId,\n      questions,\n      timeLimit,\n      passingScore,\n      attempts,\n      maxScore\n    } = req.body;\n\n    const test = await Test.findByIdAndUpdate(id, {\n      title,\n      description,\n      course: courseId,\n      questions: questions || [],\n      timeLimit: timeLimit || 60,\n      passingScore: passingScore || 60,\n      attempts: attempts || 3,\n      maxScore: maxScore || 100\n    }, { new: true }).populate('course', 'title category');\n\n    if (!test) {\n      return res.status(404).json({ message: 'Test not found' });\n    }\n\n    res.json(test);\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to update test', error: error.message });\n  }\n});\n\n// Admin: Delete test\nrouter.delete('/tests/:id', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const test = await Test.findByIdAndDelete(id);\n    \n    if (!test) {\n      return res.status(404).json({ message: 'Test not found' });\n    }\n    \n    res.json({ message: 'Test deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to delete test', error: error.message });\n  }\n});\n\n// Admin: Add/Update test result for a student\nrouter.post('/tests/:testId/results', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { testId } = req.params;\n    const { studentId, score, grade, answers, maxScore } = req.body;\n\n    // Validate required fields\n    if (!studentId || score === undefined || !grade) {\n      return res.status(400).json({ message: 'Missing required fields: studentId, score, and grade are required' });\n    }\n\n    const test = await Test.findById(testId);\n    if (!test) {\n      return res.status(404).json({ message: 'Test not found' });\n    }\n\n    // Verify student exists\n    const student = await User.findById(studentId);\n    if (!student) {\n      return res.status(404).json({ message: 'Student not found' });\n    }\n\n    // Check if student already has a result for this test\n    const existingResultIndex = test.results.findIndex(\n      result => result.student.toString() === studentId\n    );\n\n    const resultData = {\n      student: studentId,\n      score: Number(score),\n      maxScore: Number(maxScore) || test.maxScore || 100,\n      grade,\n      answers: answers || [],\n      completedAt: new Date()\n    };\n\n    if (existingResultIndex !== -1) {\n      // Update existing result\n      test.results[existingResultIndex] = { ...test.results[existingResultIndex].toObject(), ...resultData };\n    } else {\n      // Add new result\n      test.results.push(resultData);\n    }\n\n    await test.save();\n    await test.populate('results.student', 'firstName lastName email');\n    \n    res.json({ message: 'Grade saved successfully', test });\n  } catch (error) {\n    console.error('Error saving test result:', error);\n    res.status(400).json({ message: 'Failed to add test result', error: error.message });\n  }\n});\n\n\n\n// Get student ID by username (for finding current user)\nrouter.get('/students/by-username/:username', async (req, res) => {\n  try {\n    const { username } = req.params;\n    const student = await User.findOne({ username, role: 'student' }, '_id firstName lastName email username');\n    \n    if (!student) {\n      return res.status(404).json({ message: 'Student not found' });\n    }\n    \n    res.json(student);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch student', error: error.message });\n  }\n});\n\n// Get student's own test results (only for enrolled courses)\nrouter.get('/student/my-results', verifyToken, async (req, res) => {\n  try {\n    const currentUser = req.user?.dbUser;\n    if (!currentUser || currentUser.role !== 'student') {\n      return res.status(403).json({ message: 'Student access required' });\n    }\n    \n    // Get student's enrolled courses from both enrollment collections and user's enrolledCourses array\n    const enrollments = await Enrollment.find({ student: currentUser._id }).select('course');\n    const enrollmentCourseIds = enrollments.map(e => e.course.toString());\n    const userEnrolledCourses = currentUser.enrolledCourses || [];\n    const allEnrolledCourseIds = [...enrollmentCourseIds, ...userEnrolledCourses.map(id => id.toString())];\n    \n    // Remove duplicates\n    const uniqueEnrolledCourseIds = [...new Set(allEnrolledCourseIds)];\n    \n    // Only get tests for courses the student is enrolled in\n    const tests = await Test.find({ \n      isActive: true,\n      course: { $in: uniqueEnrolledCourseIds }\n    })\n      .populate('course', 'title category')\n      .select('title course results maxScore');\n    \n    const myResults = [];\n    \n    tests.forEach(test => {\n      const result = test.results.find(\n        r => r.student.toString() === currentUser._id.toString()\n      );\n      \n      if (result) {\n        myResults.push({\n          testId: test._id,\n          testTitle: test.title,\n          course: test.course,\n          maxScore: test.maxScore,\n          score: result.score,\n          grade: result.grade,\n          completedAt: result.completedAt\n        });\n      }\n    });\n    \n    res.json(myResults);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch test results', error: error.message });\n  }\n});\n\n// Get student's own enrollments\nrouter.get('/student/enrollments', verifyToken, async (req, res) => {\n  // Disable caching to ensure fresh requests\n  res.set('Cache-Control', 'no-cache');\n  try {\n    const currentUser = req.user?.dbUser;\n    \n    if (!currentUser || currentUser.role !== 'student') {\n      return res.status(403).json({ message: 'Student access required' });\n    }\n    \n    const enrollments = await Enrollment.find({ student: currentUser._id })\n      .populate('course', 'title category description thumbnail')\n      .select('course progress enrollmentDate completionDate isCompleted');\n    \n    res.json(enrollments);\n  } catch (error) {\n    console.error('Error fetching enrollments:', error);\n    res.status(500).json({ message: 'Failed to fetch enrollments', error: error.message });\n  }\n});\n\n// Create enrollment for current user\nrouter.post('/student/enroll/:courseId', verifyToken, async (req, res) => {\n  try {\n    const currentUser = req.user?.dbUser;\n    if (!currentUser || currentUser.role !== 'student') {\n      return res.status(403).json({ message: 'Student access required' });\n    }\n    \n    const courseId = req.params.courseId;\n    \n    // Check if enrollment already exists\n    const existingEnrollment = await Enrollment.findOne({\n      student: currentUser._id,\n      course: courseId\n    });\n    \n    if (existingEnrollment) {\n      return res.json({ message: 'Already enrolled', enrollment: existingEnrollment });\n    }\n    \n    // Create enrollment\n    const enrollment = new Enrollment({\n      student: currentUser._id,\n      course: courseId,\n      progress: 0,\n      enrollmentDate: new Date(),\n      isCompleted: false\n    });\n    \n    await enrollment.save();\n    console.log('New enrollment created for user:', currentUser.firstName, currentUser.lastName);\n    \n    res.json({ message: 'Enrollment created successfully', enrollment });\n  } catch (error) {\n    console.error('Error creating enrollment:', error);\n    res.status(500).json({ message: 'Failed to create enrollment', error: error.message });\n  }\n});\n\n// Sync user enrolledCourses with Enrollment documents\nrouter.post('/student/sync-enrollments', verifyToken, async (req, res) => {\n  try {\n    const currentUser = req.user?.dbUser;\n    if (!currentUser || currentUser.role !== 'student') {\n      return res.status(403).json({ message: 'Student access required' });\n    }\n    \n    console.log('Syncing enrollments for user:', currentUser.firstName, currentUser.lastName);\n    console.log('User enrolledCourses array:', currentUser.enrolledCourses);\n    \n    const syncedEnrollments = [];\n    \n    for (const courseId of currentUser.enrolledCourses) {\n      // Check if enrollment document exists\n      const existingEnrollment = await Enrollment.findOne({\n        student: currentUser._id,\n        course: courseId\n      });\n      \n      if (!existingEnrollment) {\n        // Create missing enrollment document\n        const enrollment = new Enrollment({\n          student: currentUser._id,\n          course: courseId,\n          progress: 25,\n          enrollmentDate: new Date(),\n          isCompleted: false,\n          completedModules: []\n        });\n        \n        await enrollment.save();\n        console.log('Created enrollment for course:', courseId);\n        syncedEnrollments.push(enrollment);\n      }\n    }\n    \n    res.json({ \n      message: 'Enrollments synced successfully',\n      created: syncedEnrollments.length,\n      enrollments: syncedEnrollments\n    });\n  } catch (error) {\n    console.error('Error syncing enrollments:', error);\n    res.status(500).json({ message: 'Failed to sync enrollments', error: error.message });\n  }\n});\n\n// Get all students with their test results for admin (shows all students who have given tests)\nrouter.get('/admin/student-results', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const students = await User.find({ role: 'student', isActive: true })\n      .select('firstName lastName email enrolledCourses');\n    \n    const tests = await Test.find({ isActive: true })\n      .populate('course', 'title category')\n      .select('title course results maxScore');\n    \n    const studentResults = [];\n    \n    for (const student of students) {\n      // Get all test results for this student (not filtered by enrollment)\n      const testResults = tests.map(test => {\n        const result = test.results.find(\n          r => r.student.toString() === student._id.toString()\n        );\n        \n        return {\n          testId: test._id,\n          testTitle: test.title,\n          course: test.course,\n          maxScore: test.maxScore,\n          result: result || null\n        };\n      });\n      \n      // Only include students who have taken at least one test (have actual results)\n      const completedTests = testResults.filter(test => test.result !== null);\n      if (completedTests.length > 0) {\n        studentResults.push({\n          student,\n          testResults\n        });\n      }\n    }\n    \n    res.json(studentResults);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch student results', error: error.message });\n  }\n});\n\n// Admin: Get students enrolled in a specific course\nrouter.get('/admin/course/:courseId/students', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { courseId } = req.params;\n    \n    // Find students enrolled through both methods:\n    // 1. Traditional enrollment records\n    const enrollments = await Enrollment.find({ course: courseId })\n      .populate('student', 'firstName lastName email _id role')\n      .select('student');\n    \n    // 2. Users with this course in their enrolledCourses array (from approval system)\n    const usersWithCourse = await User.find({ \n      enrolledCourses: courseId,\n      role: 'student',\n      isApproved: true\n    }).select('firstName lastName email _id role');\n    \n    // Combine and deduplicate students\n    const enrollmentStudents = enrollments.map(enrollment => enrollment.student)\n      .filter(student => student && student.role === 'student');\n    \n    const allStudents = [...enrollmentStudents, ...usersWithCourse];\n    \n    // Remove duplicates based on _id\n    const uniqueStudents = allStudents.filter((student, index, self) => \n      index === self.findIndex(s => s._id.toString() === student._id.toString())\n    );\n    \n    res.json(uniqueStudents);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch course students', error: error.message });\n  }\n});\n\n// Admin: Get pending user approvals\nrouter.get('/admin/pending-approvals', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const pendingUsers = await User.find({ \n      isApproved: false,\n      role: 'student'\n    }).select('-password');\n    \n    res.json(pendingUsers);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch pending approvals', error: error.message });\n  }\n});\n\n// Admin: Approve user and assign courses\nrouter.post('/admin/approve-user/:userId', requireAdmin, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const { courseIds } = req.body;\n    const adminId = req.user?.dbUser?._id;\n    \n    const user = await User.findByIdAndUpdate(\n      userId,\n      {\n        isApproved: true,\n        approvedBy: adminId,\n        approvedAt: new Date(),\n        approvedCourses: courseIds || []\n      },\n      { new: true }\n    ).select('-password');\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    res.json({ \n      message: 'User approved successfully',\n      user \n    });\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to approve user', error: error.message });\n  }\n});\n\n// Admin: Reject user\nrouter.post('/admin/reject-user/:userId', requireAdmin, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    \n    await User.findByIdAndDelete(userId);\n    \n    res.json({ message: 'User rejected and removed' });\n  } catch (error) {\n    res.status(400).json({ message: 'Failed to reject user', error: error.message });\n  }\n});\n\n// Comprehensive Admin stats with real-time data\nrouter.get('/admin/stats', async (req, res) => {\n  try {\n    // Basic counts - only count active courses\n    const totalCourses = await Course.countDocuments({ isActive: true });\n    const activeCourses = await Course.countDocuments({ isActive: true });\n    const totalStudents = await User.countDocuments({ role: 'student' });\n    const approvedStudents = await User.countDocuments({ role: 'student', isApproved: true });\n    \n    // Debug logging for production troubleshooting\n    console.log('=== ADMIN STATS DEBUG ===');\n    console.log('Total Courses (active):', totalCourses);\n    console.log('Total Students:', totalStudents);\n    console.log('Approved Students:', approvedStudents);\n    \n    // Get all enrollments for student analytics\n    const enrollments = await Enrollment.find({})\n      .populate('student', 'firstName lastName')\n      .populate('course', 'title');\n    \n    const totalEnrollments = enrollments.length;\n    \n    // Calculate unique students enrolled (distinct student IDs in enrollments)\n    // Filter out enrollments with null students\n    const validEnrollments = enrollments.filter(e => e.student && e.student._id);\n    const uniqueStudentIds = new Set(validEnrollments.map(e => e.student._id.toString()));\n    const uniqueStudentsEnrolled = uniqueStudentIds.size;\n    \n    // Calculate approved students who are enrolled in at least one course\n    const approvedEnrolledStudents = await User.countDocuments({\n      role: 'student',\n      isApproved: true,\n      _id: { $in: Array.from(uniqueStudentIds) }\n    });\n    \n    // Calculate average completion rate\n    let totalProgress = 0;\n    let enrollmentCount = 0;\n    enrollments.forEach(enrollment => {\n      if (enrollment.progress !== undefined) {\n        totalProgress += enrollment.progress;\n        enrollmentCount++;\n      }\n    });\n    const averageCompletion = enrollmentCount > 0 ? Math.round(totalProgress / enrollmentCount) : 0;\n    \n    // Get test results for score calculation\n    const tests = await Test.find({}).populate('course', 'title');\n    let totalTestResults = 0;\n    let totalScore = 0;\n    \n    tests.forEach(test => {\n      if (test.results && test.results.length > 0) {\n        test.results.forEach(result => {\n          totalTestResults++;\n          // Calculate percentage score\n          const percentage = (result.score / result.maxScore) * 100;\n          totalScore += percentage;\n        });\n      }\n    });\n    \n    const averageScore = totalTestResults > 0 ? Math.round(totalScore / totalTestResults) : 0;\n    \n    // Calculate course completion stats\n    const completedEnrollments = enrollments.filter(e => e.progress >= 100).length;\n    const courseCompletionRate = totalEnrollments > 0 ? Math.round((completedEnrollments / totalEnrollments) * 100) : 0;\n    \n    const statsResponse = {\n      totalCourses,\n      totalStudents: totalStudents,\n      studentsEnrolled: totalEnrollments,\n      uniqueStudentsEnrolled: uniqueStudentsEnrolled,\n      approvedEnrolledStudents: approvedEnrolledStudents,\n      averageScore,\n      averageCompletion,\n      courseCompletionRate,\n      completedCourses: completedEnrollments,\n      testsCompleted: totalTestResults,\n      approvedStudents,\n      activeCourses\n    };\n    \n    console.log('Final stats response:', statsResponse);\n    console.log('=== END ADMIN STATS DEBUG ===');\n    \n    res.json(statsResponse);\n  } catch (error) {\n    console.error('Admin stats error:', error);\n    res.status(500).json({ message: 'Failed to fetch admin stats', error: error.message });\n  }\n});\n\n// Student: Get test results for a specific student\nrouter.get('/students/:studentId/test-results', async (req, res) => {\n  try {\n    const { studentId } = req.params;\n    \n    const tests = await Test.find({ isActive: true })\n      .populate('course', 'title category')\n      .populate('results.student', 'firstName lastName email');\n    \n    const studentResults = tests.map(test => {\n      const studentResult = test.results?.find(result => \n        result.student._id.toString() === studentId\n      );\n      \n      return {\n        testId: test._id,\n        testTitle: test.title,\n        course: test.course,\n        maxScore: test.maxScore || 100,\n        result: studentResult || null\n      };\n    });\n    \n    res.json(studentResults);\n  } catch (error) {\n    console.error('Error fetching student test results:', error);\n    res.status(500).json({ message: 'Failed to fetch student test results', error: error.message });\n  }\n});\n\n// Get all users (admin only)\nrouter.get('/admin/users', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const users = await User.find().select('-password').populate('enrolledCourses');\n    res.json(users);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch users', error: error.message });\n  }\n});\n\n// Approve user with course enrollment (admin only)\nrouter.put('/admin/users/:id/approval', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isApproved, enrolledCourses = [] } = req.body;\n    \n    const updateData = { isApproved };\n    if (isApproved && enrolledCourses.length > 0) {\n      updateData.enrolledCourses = enrolledCourses;\n    }\n    \n    const user = await User.findByIdAndUpdate(\n      id, \n      updateData,\n      { new: true }\n    ).select('-password').populate('enrolledCourses');\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    res.json({ \n      message: `User ${isApproved ? 'approved and enrolled in courses' : 'rejected'} successfully`,\n      user \n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to update user approval', error: error.message });\n  }\n});\n\n// Suspend user from courses (admin only)\nrouter.put('/admin/users/:id/suspend', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { coursesToRemove } = req.body;\n    \n    const user = await User.findById(id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    // Remove specified courses from user's enrolled courses\n    user.enrolledCourses = user.enrolledCourses.filter(\n      courseId => !coursesToRemove.includes(courseId.toString())\n    );\n    \n    await user.save();\n    \n    const updatedUser = await User.findById(id).select('-password').populate('enrolledCourses');\n    \n    res.json({ \n      message: 'User suspended from selected courses successfully',\n      user: updatedUser \n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to suspend user', error: error.message });\n  }\n});\n\n// Edit user courses (admin only)\nrouter.put('/admin/users/:id/courses', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { enrolledCourses } = req.body;\n    \n    const user = await User.findByIdAndUpdate(\n      id, \n      { enrolledCourses },\n      { new: true }\n    ).select('-password').populate('enrolledCourses');\n    \n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    \n    res.json({ \n      message: 'User courses updated successfully',\n      user \n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to update user courses', error: error.message });\n  }\n});\n\n// Module completion routes\nrouter.post('/courses/:courseId/modules/:moduleId/complete', verifyToken, async (req, res) => {\n  try {\n    const { courseId, moduleId } = req.params;\n    const userId = req.user.id;\n\n    // Find the course and module\n    const course = await Course.findById(courseId);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n\n    const module = course.modules.id(moduleId);\n    if (!module) {\n      return res.status(404).json({ message: 'Module not found' });\n    }\n\n    // Check if user is enrolled in the course (allow admins to bypass this check)\n    let enrollment = null;\n    const userRole = req.user.role;\n    \n    if (userRole !== 'admin') {\n      enrollment = await Enrollment.findOne({\n        student: userId,\n        course: courseId\n      });\n      \n      if (!enrollment) {\n        return res.status(403).json({ message: 'Not enrolled in this course' });\n      }\n    }\n\n    // Check if module is already completed by this user\n    const isCompleted = module.completedBy.some(completion => \n      completion.userId.toString() === userId\n    );\n\n    if (isCompleted) {\n      return res.status(400).json({ message: 'Module already completed' });\n    }\n\n    // Mark module as completed\n    module.completedBy.push({\n      userId: userId,\n      completedAt: new Date()\n    });\n\n    // Add module to enrollment's completed modules if not already there (only for students)\n    if (enrollment) {\n      if (!enrollment.completedModules.includes(moduleId)) {\n        enrollment.completedModules.push(moduleId);\n      }\n\n      // Update enrollment progress\n      const totalModules = course.modules.length;\n      const completedModules = enrollment.completedModules.length;\n      enrollment.progress = Math.round((completedModules / totalModules) * 100);\n      await enrollment.save();\n    }\n\n    await course.save();\n\n    res.json({ \n      message: 'Module marked as completed',\n      progress: enrollment ? enrollment.progress : 0,\n      isCompleted: true\n    });\n\n  } catch (error) {\n    console.error('Error completing module:', error);\n    res.status(500).json({ message: 'Failed to complete module', error: error.message });\n  }\n});\n\nrouter.delete('/courses/:courseId/modules/:moduleId/complete', verifyToken, async (req, res) => {\n  try {\n    const { courseId, moduleId } = req.params;\n    const userId = req.user.id;\n\n    // Find the course and module\n    const course = await Course.findById(courseId);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n\n    const module = course.modules.id(moduleId);\n    if (!module) {\n      return res.status(404).json({ message: 'Module not found' });\n    }\n\n    // Check if user is enrolled in the course (allow admins to bypass this check)\n    let enrollment = null;\n    const userRole = req.user.role;\n    \n    if (userRole !== 'admin') {\n      enrollment = await Enrollment.findOne({\n        student: userId,\n        course: courseId\n      });\n      \n      if (!enrollment) {\n        return res.status(403).json({ message: 'Not enrolled in this course' });\n      }\n    }\n\n    // Remove completion record\n    module.completedBy = module.completedBy.filter(completion => \n      completion.userId.toString() !== userId\n    );\n\n    // Remove module from enrollment's completed modules (only for students)\n    if (enrollment) {\n      enrollment.completedModules = enrollment.completedModules.filter(\n        id => id.toString() !== moduleId\n      );\n\n      // Update enrollment progress\n      const totalModules = course.modules.length;\n      const completedModules = enrollment.completedModules.length;\n      enrollment.progress = Math.round((completedModules / totalModules) * 100);\n      await enrollment.save();\n    }\n\n    await course.save();\n\n    res.json({ \n      message: 'Module completion removed',\n      progress: enrollment ? enrollment.progress : 0,\n      isCompleted: false\n    });\n\n  } catch (error) {\n    console.error('Error uncompleting module:', error);\n    res.status(500).json({ message: 'Failed to uncomplete module', error: error.message });\n  }\n});\n\n// Get module completion status for a user\nrouter.get('/courses/:courseId/modules/:moduleId/completion', verifyToken, async (req, res) => {\n  try {\n    const { courseId, moduleId } = req.params;\n    const userId = req.user.id;\n\n    // Find the course and module\n    const course = await Course.findById(courseId);\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n\n    const module = course.modules.id(moduleId);\n    if (!module) {\n      return res.status(404).json({ message: 'Module not found' });\n    }\n\n    // Check if module is completed by this user\n    const completion = module.completedBy.find(completion => \n      completion.userId.toString() === userId\n    );\n\n    res.json({\n      isCompleted: !!completion,\n      completedAt: completion?.completedAt || null\n    });\n\n  } catch (error) {\n    console.error('Error getting module completion:', error);\n    res.status(500).json({ message: 'Failed to get module completion', error: error.message });\n  }\n});\n\n// Use auth routes\nrouter.use('/auth', authRoutes);\n\nexport default router;","size_bytes":50950},"server/routes/pgRoutes.ts":{"content":"import express from 'express';\nimport { db } from '../db.js';\nimport { users, courses, enrollments, tests, testResults, courseModules, courseNotes } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\nconst router = express.Router();\n\n// JWT Secret (in production, use environment variable)\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\n// Admin middleware\nconst requireAdmin = (req: any, res: any, next: any) => {\n  if (req.user?.dbUser?.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\n// Student data filter middleware\nconst filterStudentData = (req: any, res: any, next: any) => {\n  if (req.user?.dbUser?.role === 'student') {\n    req.studentId = req.user.dbUser.id;\n  }\n  next();\n};\n\n// JWT token verification middleware\nconst verifyToken = async (req: any, res: any, next: any) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ message: 'Access denied. No token provided.' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const userResult = await db.select().from(users).where(eq(users.id, decoded.id));\n    \n    if (!userResult.length) {\n      return res.status(401).json({ message: 'Invalid token. User not found.' });\n    }\n    \n    req.user = { ...decoded, dbUser: userResult[0] };\n    next();\n  } catch (error) {\n    res.status(400).json({ message: 'Invalid token.' });\n  }\n};\n\n// Check if user has completed setup\nrouter.post('/auth/check-setup', async (req, res) => {\n  try {\n    const { email } = req.body;\n    \n    const userResult = await db.select().from(users).where(eq(users.email, email));\n    const hasSetup = userResult.length > 0;\n    \n    res.json({ hasSetup });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to check setup status', error: error.message });\n  }\n});\n\n// Complete account setup after Replit email verification\nrouter.post('/auth/complete-setup', async (req, res) => {\n  try {\n    const { email, firstName, lastName, username, password, replitId, profileImageUrl } = req.body;\n    \n    // Check if user already exists with this email or username\n    const existingUserByEmail = await db.select().from(users).where(eq(users.email, email));\n    const existingUserByUsername = await db.select().from(users).where(eq(users.username, username));\n    \n    if (existingUserByEmail.length || existingUserByUsername.length) {\n      return res.status(400).json({ \n        message: 'Account already exists with this email or username' \n      });\n    }\n    \n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n    \n    // Create new user\n    const newUsers = await db.insert(users).values({\n      username,\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      role: 'student',\n      isActive: false, // Requires admin approval\n      avatar: profileImageUrl\n    }).returning();\n    \n    const user = newUsers[0];\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { id: user.id, username: user.username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n    \n    res.json({\n      message: 'Account setup completed successfully. Waiting for admin approval.',\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isApproved: user.isActive\n      }\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to complete setup', error: error.message });\n  }\n});\n\n// Register user (email/password authentication)\nrouter.post('/auth/register', async (req, res) => {\n  try {\n    const { username, email, password, firstName, lastName } = req.body;\n    \n    // Check if user already exists\n    const existingUserByEmail = await db.select().from(users).where(eq(users.email, email));\n    const existingUserByUsername = await db.select().from(users).where(eq(users.username, username));\n    \n    if (existingUserByEmail.length || existingUserByUsername.length) {\n      return res.status(400).json({ message: 'User already exists with this email or username' });\n    }\n    \n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n    \n    // Create new user\n    const newUsers = await db.insert(users).values({\n      username,\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      role: 'student',\n      isActive: false // Requires admin approval\n    }).returning();\n    \n    const user = newUsers[0];\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { id: user.id, username: user.username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n    \n    res.json({\n      message: 'Registration successful. Waiting for admin approval.',\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isApproved: user.isActive\n      }\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Registration failed', error: error.message });\n  }\n});\n\n// Login user (email/password authentication)\nrouter.post('/auth/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    \n    // Find user by username or email\n    const userByUsername = await db.select().from(users).where(eq(users.username, username));\n    const userByEmail = await db.select().from(users).where(eq(users.email, username));\n    \n    const user = userByUsername.length ? userByUsername[0] : userByEmail[0];\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    \n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { id: user.id, username: user.username, role: user.role },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n    \n    res.json({\n      message: 'Login successful',\n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isApproved: user.isActive\n      }\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Login failed', error: error.message });\n  }\n});\n\n// Get all users (admin only)\nrouter.get('/users', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const allUsers = await db.select({\n      id: users.id,\n      username: users.username,\n      email: users.email,\n      firstName: users.firstName,\n      lastName: users.lastName,\n      role: users.role,\n      isActive: users.isActive,\n      createdAt: users.createdAt\n    }).from(users);\n    \n    res.json(allUsers);\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch users', error: error.message });\n  }\n});\n\n// Approve/reject user (admin only)\nrouter.put('/users/:id/approval', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isApproved } = req.body;\n    \n    await db.update(users)\n      .set({ isActive: isApproved })\n      .where(eq(users.id, parseInt(id)));\n    \n    res.json({ message: `User ${isApproved ? 'approved' : 'rejected'} successfully` });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to update user approval', error: error.message });\n  }\n});\n\n// Get all courses\nrouter.get('/courses', verifyToken, async (req, res) => {\n  try {\n    const allCourses = await db.select().from(courses);\n    res.json(allCourses);\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch courses', error: error.message });\n  }\n});\n\n// Create course (admin only)\nrouter.post('/courses', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { title, description, category, thumbnail, duration, videoCount, instructorId, modules, notes } = req.body;\n    \n    // Create course\n    const newCourses = await db.insert(courses).values({\n      title,\n      description,\n      category,\n      thumbnail,\n      duration,\n      videoCount,\n      instructorId\n    }).returning();\n    \n    const course = newCourses[0];\n    \n    // Create modules if provided\n    if (modules && modules.length > 0) {\n      for (let i = 0; i < modules.length; i++) {\n        const module = modules[i];\n        await db.insert(courseModules).values({\n          courseId: course.id,\n          title: module.title,\n          description: module.description,\n          videoUrl: module.videoUrl,\n          duration: module.duration,\n          orderIndex: i\n        });\n      }\n    }\n    \n    // Create notes if provided\n    if (notes && notes.length > 0) {\n      for (const note of notes) {\n        await db.insert(courseNotes).values({\n          courseId: course.id,\n          title: note.title,\n          fileName: note.fileName,\n          fileSize: note.fileSize,\n          downloadUrl: note.downloadUrl\n        });\n      }\n    }\n    \n    res.json({ message: 'Course created successfully', course });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to create course', error: error.message });\n  }\n});\n\n// Get course details with modules and notes\nrouter.get('/courses/:id', verifyToken, async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const course = await db.select().from(courses).where(eq(courses.id, parseInt(id)));\n    if (!course.length) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    \n    const modules = await db.select().from(courseModules).where(eq(courseModules.courseId, parseInt(id)));\n    const notes = await db.select().from(courseNotes).where(eq(courseNotes.courseId, parseInt(id)));\n    \n    res.json({\n      ...course[0],\n      modules,\n      notes\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch course details', error: error.message });\n  }\n});\n\n// Create test (admin only)\nrouter.post('/tests', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { courseId, title, maxScore, timeLimit } = req.body;\n    \n    const newTests = await db.insert(tests).values({\n      courseId,\n      title,\n      maxScore,\n      timeLimit\n    }).returning();\n    \n    res.json({ message: 'Test created successfully', test: newTests[0] });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to create test', error: error.message });\n  }\n});\n\n// Get all tests\nrouter.get('/tests', verifyToken, async (req, res) => {\n  try {\n    const allTests = await db.select().from(tests);\n    res.json(allTests);\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch tests', error: error.message });\n  }\n});\n\n// Submit test result (admin grades student)\nrouter.post('/test-results', verifyToken, requireAdmin, async (req, res) => {\n  try {\n    const { testId, userId, score, maxScore, grade } = req.body;\n    \n    const newResults = await db.insert(testResults).values({\n      testId,\n      userId,\n      score,\n      maxScore,\n      grade\n    }).returning();\n    \n    res.json({ message: 'Test result submitted successfully', result: newResults[0] });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to submit test result', error: error.message });\n  }\n});\n\n// Get test results for a user\nrouter.get('/test-results/:userId', verifyToken, async (req, res) => {\n  try {\n    const { userId } = req.params;\n    \n    // Students can only see their own results\n    if (req.user.dbUser.role === 'student' && req.user.dbUser.id !== parseInt(userId)) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    \n    const results = await db.select().from(testResults).where(eq(testResults.userId, parseInt(userId)));\n    res.json(results);\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch test results', error: error.message });\n  }\n});\n\nexport default router;","size_bytes":12302},"server/utils/emailService.js":{"content":"import nodemailer from 'nodemailer';\n\n// Create email transporter\nconst createTransporter = () => {\n  // For development, you can use a service like Gmail\n  // For production, use a proper email service like SendGrid, AWS SES, etc.\n  return nodemailer.createTransporter({\n    service: 'gmail',\n    auth: {\n      user: process.env.EMAIL_USER, // Your email\n      pass: process.env.EMAIL_APP_PASSWORD // App password for Gmail\n    }\n  });\n};\n\n// Generate OTP\nexport const generateOTP = () => {\n  return Math.floor(100000 + Math.random() * 900000).toString(); // 6-digit OTP\n};\n\n// Send OTP email\nexport const sendOTPEmail = async (email, otp, firstName = '') => {\n  try {\n    const transporter = createTransporter();\n    \n    const mailOptions = {\n      from: process.env.EMAIL_USER || 'noreply@eduplatform.com',\n      to: email,\n      subject: 'Email Verification - OTP Code',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 20px;\">\n            <h1 style=\"color: white; margin: 0; font-size: 28px;\">EduPlatform</h1>\n            <p style=\"color: white; margin: 10px 0 0 0; opacity: 0.9;\">Email Verification</p>\n          </div>\n          \n          <div style=\"background: #f8f9fa; padding: 30px; border-radius: 10px; text-align: center;\">\n            <h2 style=\"color: #333; margin-bottom: 20px;\">Hello ${firstName}!</h2>\n            <p style=\"color: #666; font-size: 16px; margin-bottom: 30px;\">\n              Thank you for registering with EduPlatform. Please use the following OTP to verify your email address:\n            </p>\n            \n            <div style=\"background: white; border: 2px solid #667eea; border-radius: 10px; padding: 20px; margin: 20px 0; display: inline-block;\">\n              <span style=\"font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 5px;\">${otp}</span>\n            </div>\n            \n            <p style=\"color: #666; font-size: 14px; margin-top: 20px;\">\n              This OTP will expire in 10 minutes. If you didn't request this verification, please ignore this email.\n            </p>\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 20px; color: #999; font-size: 12px;\">\n            <p>© 2025 EduPlatform. All rights reserved.</p>\n          </div>\n        </div>\n      `\n    };\n\n    await transporter.sendMail(mailOptions);\n    console.log(`OTP email sent to ${email}`);\n    return true;\n  } catch (error) {\n    console.error('Error sending OTP email:', error);\n    return false;\n  }\n};\n\n// Send welcome email\nexport const sendWelcomeEmail = async (email, firstName = '') => {\n  try {\n    const transporter = createTransporter();\n    \n    const mailOptions = {\n      from: process.env.EMAIL_USER || 'noreply@eduplatform.com',\n      to: email,\n      subject: 'Welcome to EduPlatform!',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 20px;\">\n            <h1 style=\"color: white; margin: 0; font-size: 28px;\">Welcome to EduPlatform!</h1>\n          </div>\n          \n          <div style=\"background: #f8f9fa; padding: 30px; border-radius: 10px;\">\n            <h2 style=\"color: #333; margin-bottom: 20px;\">Hello ${firstName}!</h2>\n            <p style=\"color: #666; font-size: 16px; margin-bottom: 20px;\">\n              Congratulations! Your email has been successfully verified. Your account is now pending admin approval.\n            </p>\n            <p style=\"color: #666; font-size: 16px; margin-bottom: 20px;\">\n              Once approved, you'll have access to our comprehensive learning platform with:\n            </p>\n            <ul style=\"color: #666; font-size: 16px; text-align: left; margin-bottom: 20px;\">\n              <li>Interactive video courses</li>\n              <li>Downloadable learning materials</li>\n              <li>Progress tracking</li>\n              <li>Assessments and certifications</li>\n            </ul>\n            <p style=\"color: #666; font-size: 16px;\">\n              We'll notify you as soon as your account is approved. Thank you for joining EduPlatform!\n            </p>\n          </div>\n        </div>\n      `\n    };\n\n    await transporter.sendMail(mailOptions);\n    console.log(`Welcome email sent to ${email}`);\n    return true;\n  } catch (error) {\n    console.error('Error sending welcome email:', error);\n    return false;\n  }\n};","size_bytes":4714},"client/src/components/approval-status-banner.tsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function ApprovalStatusBanner() {\n  const { user } = useAuth();\n\n  if (!user || user.role !== 'student') {\n    return null;\n  }\n\n  if (!user.isApproved) {\n    return (\n      <Alert className=\"mb-6 border-amber-200 bg-amber-50\">\n        <Clock className=\"h-4 w-4 text-amber-600\" />\n        <AlertDescription className=\"text-amber-800\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <strong>Account Pending Approval</strong>\n              <p className=\"text-sm mt-1\">\n                Your account is awaiting admin approval. You'll be notified once you can access courses.\n              </p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-amber-600 border-amber-600\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Pending\n            </Badge>\n          </div>\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (user.approvedCourses && user.approvedCourses.length > 0) {\n    return (\n      <Alert className=\"mb-6 border-green-200 bg-green-50\">\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <strong>Account Approved</strong>\n              <p className=\"text-sm mt-1\">\n                You have access to {user.approvedCourses.length} course(s). Start learning!\n              </p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\n              Approved\n            </Badge>\n          </div>\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert className=\"mb-6 border-blue-200 bg-blue-50\">\n      <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n      <AlertDescription className=\"text-blue-800\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <strong>Account Approved</strong>\n            <p className=\"text-sm mt-1\">\n              Your account is approved. Contact admin to get access to specific courses.\n            </p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Approved\n          </Badge>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":2630},"client/src/components/course-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Video, Play, ArrowRight } from \"lucide-react\";\nimport { getProgressColor, getStatusColor } from \"@/lib/utils\";\nimport type { Course, Enrollment } from \"@shared/schema\";\n\ninterface CourseCardProps {\n  course: any; // MongoDB course structure\n  enrollment?: Enrollment;\n}\n\nexport default function CourseCard({ course, enrollment }: CourseCardProps) {\n  const progress = enrollment?.progress || 0;\n  const status = progress === 100 ? \"Completed\" : progress > 0 ? \"In Progress\" : \"Not Started\";\n  \n  const getButtonText = () => {\n    if (progress === 100) return \"Review Course\";\n    if (progress > 0) return \"Continue Learning\";\n    return \"Start Course\";\n  };\n\n  const getButtonVariant = () => {\n    return progress === 100 ? \"secondary\" : \"default\";\n  };\n\n  return (\n    <div className=\"course-card\">\n      <div className=\"relative overflow-hidden group\">\n        {/* Main Image with Enhanced Styling */}\n        <div className=\"relative h-56 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800\">\n          <img \n            src={course.thumbnail} \n            alt={course.title}\n            className=\"w-full h-full object-cover transition-all duration-500 group-hover:scale-110 group-hover:brightness-110\"\n          />\n          \n          {/* Gradient Overlay */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-black/20 opacity-60 group-hover:opacity-40 transition-opacity duration-300\" />\n          \n          {/* Decorative Corner Gradients */}\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-white/20 to-transparent\" />\n          <div className=\"absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-purple-500/30 to-transparent\" />\n        </div>\n\n        {/* Status Badge */}\n        <div className=\"absolute top-4 left-4 z-10\">\n          <Badge className={`${getStatusColor(status)} backdrop-blur-sm border border-white/20 shadow-lg font-semibold px-3 py-1.5 text-xs uppercase tracking-wider`}>\n            {status}\n          </Badge>\n        </div>\n\n        {/* Course Level Indicator */}\n        <div className=\"absolute top-4 right-4 z-10\">\n          <div className=\"bg-white/10 backdrop-blur-md rounded-full px-3 py-1.5 border border-white/20\">\n            <span className=\"text-white text-xs font-medium\">\n              {course.category || 'General'}\n            </span>\n          </div>\n        </div>\n\n        {/* Play Button with Enhanced Styling */}\n        <div className=\"absolute bottom-4 right-4 z-10\">\n          <Link href={`/courses/${course._id || course.id}`}>\n            <Button \n              size=\"icon\" \n              className=\"rounded-full bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white shadow-2xl hover:shadow-purple-500/40 transition-all duration-300 hover:scale-110 border-2 border-white/20 backdrop-blur-sm w-12 h-12\"\n            >\n              <Play className=\"h-5 w-5 ml-0.5\" />\n            </Button>\n          </Link>\n        </div>\n\n        {/* Floating Elements */}\n        <div className=\"absolute top-6 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n          <div className=\"w-2 h-2 bg-white/60 rounded-full animate-bounce\" />\n        </div>\n        \n        {/* PDF Notes Display */}\n        <div className=\"absolute bottom-4 left-4 z-10\">\n          <div className=\"bg-black/50 backdrop-blur-md rounded-lg px-3 py-1.5 border border-white/10\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-3 w-3 text-white\" />\n              <span className=\"text-white text-xs font-medium\">\n                {course.notes?.length || 0} PDFs\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Hover Overlay with Course Info */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end justify-start p-6\">\n          <div className=\"text-white transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300\">\n            <h4 className=\"font-bold text-lg mb-2 line-clamp-2\">{course.title}</h4>\n            <p className=\"text-sm text-gray-300 line-clamp-2\">{course.description}</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"p-8 bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"space-y-6\">\n          {/* Course Header */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-xl font-bold text-gray-900 dark:text-white leading-tight line-clamp-2\">\n              {course.title}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm leading-relaxed line-clamp-3\">\n              {course.description}\n            </p>\n          </div>\n          \n          {/* Course Statistics */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-blue-100 dark:border-blue-800\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-500 rounded-lg\">\n                  <FileText className=\"h-4 w-4 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-blue-600 dark:text-blue-400 font-medium uppercase tracking-wider\">PDF Notes</p>\n                  <p className=\"text-sm font-bold text-blue-900 dark:text-blue-100\">\n                    {course.notes?.length || 0} files\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-purple-100 dark:border-purple-800\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-purple-500 rounded-lg\">\n                  <Video className=\"h-4 w-4 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-xs text-purple-600 dark:text-purple-400 font-medium uppercase tracking-wider\">Lessons</p>\n                  <p className=\"text-sm font-bold text-purple-900 dark:text-purple-100\">\n                    {course.modules?.length || 0} videos\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Progress Section */}\n          {enrollment && (\n            <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-5 border border-green-100 dark:border-green-800\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"text-sm font-semibold text-green-800 dark:text-green-200\">Learning Progress</span>\n                <span className=\"text-sm font-bold text-green-900 dark:text-green-100 bg-green-100 dark:bg-green-800 px-2 py-1 rounded-full\">\n                  {progress}%\n                </span>\n              </div>\n              <div className=\"relative h-3 bg-green-100 dark:bg-green-800 rounded-full overflow-hidden\">\n                <div \n                  className={`absolute top-0 left-0 h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full transition-all duration-500 ease-out ${getProgressColor(progress)}`}\n                  style={{ width: `${progress}%` }}\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent rounded-full animate-pulse\" />\n              </div>\n            </div>\n          )}\n          \n          {/* Action Button */}\n          <Link href={`/courses/${course._id || course.id}`}>\n            <Button \n              variant={getButtonVariant()} \n              className=\"w-full py-4 text-base font-semibold rounded-xl transition-all duration-200 hover:shadow-lg hover:scale-[1.02] active:scale-[0.98] bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white border-none shadow-lg\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span>{getButtonText()}</span>\n                <ArrowRight className=\"h-4 w-4 transition-transform group-hover:translate-x-1\" />\n              </div>\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8748},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-white border-t border-gray-200 mt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1\">\n            <h3 className=\"text-lg font-bold text-primary mb-4\">EduPlatform</h3>\n            <p className=\"text-gray-600 text-sm\">\n              Empowering learners with quality education and comprehensive learning management tools.\n            </p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Platform</h4>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li>\n                <Link href=\"/courses\" className=\"hover:text-primary\">\n                  Courses\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/test-results\" className=\"hover:text-primary\">\n                  Test Results\n                </Link>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Progress Tracking</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Certificates</a>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Support</h4>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Help Center</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Contact Us</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">System Status</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Documentation</a>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Legal</h4>\n            <ul className=\"space-y-2 text-sm text-gray-600\">\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Privacy Policy</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Terms of Service</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">Cookie Policy</a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-primary\">GDPR</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-200 mt-8 pt-8 text-center\">\n          <p className=\"text-sm text-gray-500\">\n            &copy; 2024 EduPlatform. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2878},"client/src/components/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Bell, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { user, isAdmin } = useAuth();\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\" },\n    { name: \"My Courses\", href: \"/courses\" },\n    { name: \"Test Results\", href: \"/test-results\" },\n    ...(isAdmin ? [{ name: \"Admin Panel\", href: \"/admin\" }] : []),\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\" && location === \"/\") return true;\n    if (href !== \"/\" && location.startsWith(href)) return true;\n    return false;\n  };\n\n  const handleLogout = () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      // Email/password logout\n      localStorage.removeItem(\"token\");\n      window.location.href = '/';\n    } else {\n      // Replit logout\n      window.location.href = '/api/logout';\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <h1 className=\"text-2xl font-bold text-primary cursor-pointer\">\n                  EduPlatform\n                </h1>\n              </Link>\n            </div>\n            <nav className=\"hidden md:flex space-x-8\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <span\n                    className={`px-1 pb-4 pt-5 text-sm font-medium border-b-2 transition-colors duration-200 cursor-pointer ${\n                      isActive(item.href)\n                        ? \"text-primary border-primary\"\n                        : \"text-gray-500 hover:text-gray-700 border-transparent\"\n                    }`}\n                  >\n                    {item.name}\n                  </span>\n                </Link>\n              ))}\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <Bell className=\"h-5 w-5 text-gray-400\" />\n            </Button>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <div className=\"flex items-center space-x-3 cursor-pointer\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl} />\n                    <AvatarFallback>\n                      {user?.firstName?.[0]}{user?.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    {user?.firstName} {user?.lastName}\n                  </span>\n                </div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={handleLogout}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign Out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3581},"client/src/components/pdf-viewer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Eye, Download, FileText, ExternalLink } from \"lucide-react\";\n\ninterface PdfViewerProps {\n  notes: any[]; // MongoDB note structure\n}\n\nexport default function PdfViewer({ notes }: PdfViewerProps) {\n  const handleView = (note: any) => {\n    // Open PDF in new tab for viewing\n    window.open(note.pdfUrl, '_blank');\n  };\n\n  const handleDownload = async (note: any) => {\n    try {\n      // Fetch the PDF file\n      const response = await fetch(note.pdfUrl);\n      if (!response.ok) throw new Error('Failed to download file');\n      \n      // Get the blob data\n      const blob = await response.blob();\n      \n      // Create a temporary link to download the PDF\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${note.title}.pdf`;\n      link.style.display = 'none';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      // Clean up the blob URL\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n      // Fallback to opening in new tab if download fails\n      window.open(note.pdfUrl, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded-lg p-6\">\n      <div className=\"space-y-3\">\n        {notes.map((note, index) => (\n          <div key={note._id || index} className=\"flex items-center justify-between p-4 bg-white rounded-lg border shadow-sm\">\n            <div className=\"flex items-center space-x-3\">\n              <FileText className=\"h-6 w-6 text-red-500\" />\n              <div>\n                <p className=\"font-medium text-gray-900\">{note.title}</p>\n                <p className=\"text-sm text-gray-500\">\n                  PDF Document • {note.fileSize || 'Unknown size'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleView(note)}>\n                <Eye className=\"h-4 w-4 mr-1\" />\n                View\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleDownload(note)}>\n                <Download className=\"h-4 w-4 mr-1\" />\n                Download\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => window.open(note.pdfUrl, '_blank')}\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        ))}\n        {notes.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500 bg-white rounded-lg border\">\n            <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No PDF notes available for this course</p>\n            <p className=\"text-xs mt-1\">PDF resources will appear here when added by the instructor</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3051},"client/src/components/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  LayoutDashboard, \n  BookOpen, \n  GraduationCap, \n  Settings, \n  Award,\n  LogOut,\n  Menu,\n  User\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst getSidebarItems = (userRole: string) => {\n  const baseItems = [\n    { icon: LayoutDashboard, label: \"Dashboard\", route: \"/dashboard\" },\n    { icon: BookOpen, label: \"My Courses\", route: \"/courses\" },\n    { icon: Award, label: \"Test Results\", route: \"/test-results\" },\n    { icon: User, label: \"Profile\", route: \"/profile\" },\n  ];\n\n  if (userRole === 'admin') {\n    baseItems.push({ icon: Settings, label: \"Admin Panel\", route: \"/admin\" });\n  }\n\n  return baseItems;\n};\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const sidebarItems = getSidebarItems(user?.role || 'student');\n\n  const isActive = (route: string) => {\n    if (route === \"/dashboard\" && (location === \"/\" || location === \"/dashboard\")) return true;\n    if (route !== \"/dashboard\" && location.startsWith(route)) return true;\n    return false;\n  };\n\n  const handleLogout = () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      localStorage.removeItem(\"token\");\n      window.location.href = '/';\n    } else {\n      window.location.href = '/api/logout';\n    }\n  };\n\n  const handleNavigation = (route: string) => {\n    setLocation(route);\n    setIsOpen(false); // Close mobile sidebar after navigation\n  };\n\n  const SidebarContent = () => (\n    <div className=\"bg-blue-900 text-white h-full flex flex-col\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-blue-800/50 flex-shrink-0\">\n        <div className=\"flex items-center space-x-3 cursor-pointer group\" onClick={() => handleNavigation('/dashboard')}>\n          <div className=\"relative\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-white to-blue-50 rounded-xl flex items-center justify-center shadow-lg transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n              <GraduationCap className=\"w-7 h-7 text-blue-900\" />\n            </div>\n            <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full opacity-90\"></div>\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"font-extrabold text-2xl bg-gradient-to-r from-white via-blue-100 to-blue-200 bg-clip-text text-transparent tracking-wide\">\n              EduPlatform\n            </span>\n            <span className=\"text-xs text-blue-300 font-medium tracking-widest opacity-80\">\n              LEARN • GROW • ACHIEVE\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"px-4 py-6 flex-shrink-0\">\n        <ul className=\"space-y-2\">\n          {sidebarItems.map((item, index) => (\n            <li key={index}>\n              <button \n                onClick={() => handleNavigation(item.route)}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  isActive(item.route)\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.label}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </nav>\n\n      {/* Spacer */}\n      <div className=\"flex-1\"></div>\n\n      {/* Logout Section */}\n      <div className=\"p-4 flex-shrink-0\">\n        <Button\n          variant=\"outline\"\n          className=\"w-full flex items-center justify-center space-x-2 bg-red-600 hover:bg-red-700 text-white border-red-600 hover:border-red-700\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"w-4 h-4\" />\n          <span>Logout</span>\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <aside className=\"hidden lg:block fixed left-0 top-0 w-64 h-screen z-50\">\n        <SidebarContent />\n      </aside>\n\n      {/* Mobile Menu Button */}\n      <div className=\"lg:hidden fixed top-4 left-4 z-50\">\n        <Sheet open={isOpen} onOpenChange={setIsOpen}>\n          <SheetTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-white/90 backdrop-blur-sm\">\n              <Menu className=\"h-4 w-4\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"w-64 p-0\">\n            <SidebarContent />\n          </SheetContent>\n        </Sheet>\n      </div>\n    </>\n  );\n}","size_bytes":4843},"client/src/components/stats-card.tsx":{"content":"interface StatsCardProps {\n  icon: string;\n  iconColor: string;\n  title: string;\n  value: string | number;\n}\n\nexport default function StatsCard({ icon, iconColor, title, value }: StatsCardProps) {\n  return (\n    <div className=\"stats-card\">\n      <div className=\"flex items-center\">\n        <div className=\"flex-shrink-0\">\n          <i className={`${icon} text-2xl ${iconColor}`}></i>\n        </div>\n        <div className=\"ml-4\">\n          <p className=\"text-sm font-medium text-gray-500\">{title}</p>\n          <p className=\"text-2xl font-semibold text-gray-900\">{value}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":622},"client/src/components/video-player.tsx":{"content":"import { Play, Clock, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface VideoPlayerProps {\n  title: string;\n  videoUrl?: string;\n}\n\n// Extract YouTube video ID from various YouTube URL formats\nconst getYouTubeVideoId = (url: string): string | null => {\n  const patterns = [\n    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/watch\\?v=([^&\\n?#]+)/,\n    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n    /(?:https?:\\/\\/)?(?:www\\.)?youtu\\.be\\/([^&\\n?#]+)/,\n    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/v\\/([^&\\n?#]+)/\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match) return match[1];\n  }\n  return null;\n};\n\nexport default function VideoPlayer({ title, videoUrl }: VideoPlayerProps) {\n  const videoId = videoUrl ? getYouTubeVideoId(videoUrl) : null;\n  \n  if (!videoUrl || !videoId) {\n    return (\n      <div className=\"bg-gray-100 rounded-lg p-8 text-center\">\n        <div className=\"text-gray-400 mb-4\">\n          <Play className=\"h-16 w-16 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{title}</h3>\n          <p className=\"text-sm text-gray-500 flex items-center justify-center gap-1\">\n            <Play className=\"h-4 w-4\" />\n            Video Content\n          </p>\n        </div>\n        <p className=\"text-gray-500\">No video available</p>\n      </div>\n    );\n  }\n\n  const embedUrl = `https://www.youtube.com/embed/${videoId}`;\n  \n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n        <div className=\"aspect-video\">\n          <iframe\n            src={embedUrl}\n            title={title}\n            className=\"w-full h-full\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n        <div className=\"p-4\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-1\">{title}</h3>\n              <p className=\"text-sm text-gray-500 flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                Video Content\n              </p>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => window.open(videoUrl, '_blank')}\n            >\n              <ExternalLink className=\"h-4 w-4 mr-1\" />\n              Watch on YouTube\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2656},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  avatar?: string;\n  profileImageUrl?: string;\n  isApproved?: boolean;\n  approvedCourses?: string[];\n}\n\nexport function useAuth() {\n  // Try email/password auth first\n  const token = localStorage.getItem(\"token\");\n  \n  const { data: mongoUser, isLoading: isMongoLoading } = useQuery({\n    queryKey: [\"/api/mongo/auth/user\"],\n    queryFn: async () => {\n      if (!token) return null;\n      \n      const response = await fetch(\"/api/mongo/auth/user\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem(\"token\");\n        }\n        return null;\n      }\n      \n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Fallback to Replit auth if no token\n  const { data: replitUser, isLoading: isReplitLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      if (token) return null; // Skip if we have a token\n      \n      const response = await fetch(\"/api/mongo/auth/user\", {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) return null;\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const user = mongoUser || replitUser;\n  const isLoading = isMongoLoading || isReplitLoading;\n\n  return {\n    user: user as User | null,\n    isLoading,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === 'admin',\n    isStudent: user?.role === 'student',\n  };\n}","size_bytes":1705},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nconst API_BASE_URL = import.meta.env.PROD \n  ? \"https://onlinelearningplatform-ppes.onrender.com\" \n  : \"\";\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n  const res = await fetch(fullUrl, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const url = queryKey[0] as string;\n    const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n    const res = await fetch(fullUrl, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2041},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: string | Date): string {\n  const d = new Date(date);\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n}\n\nexport function formatTimeAgo(date: string | Date): string {\n  const now = new Date();\n  const past = new Date(date);\n  const diffInHours = Math.floor((now.getTime() - past.getTime()) / (1000 * 60 * 60));\n  \n  if (diffInHours < 1) {\n    return \"Just now\";\n  } else if (diffInHours < 24) {\n    return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n  } else {\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n  }\n}\n\nexport function getProgressColor(progress: number): string {\n  if (progress === 100) return \"bg-green-600\";\n  if (progress >= 50) return \"bg-primary-600\";\n  return \"bg-yellow-500\";\n}\n\nexport function getGradeColor(grade: string): string {\n  switch (grade.toUpperCase()) {\n    case 'A+':\n    case 'A':\n      return 'grade-a';\n    case 'B+':\n    case 'B':\n      return 'grade-b';\n    case 'C+':\n    case 'C':\n      return 'grade-c';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n}\n\nexport function getStatusColor(status: string): string {\n  switch (status.toLowerCase()) {\n    case 'active':\n      return 'status-active';\n    case 'completed':\n      return 'status-completed';\n    case 'in progress':\n      return 'status-in-progress';\n    case 'not started':\n      return 'status-not-started';\n    default:\n      return 'status-inactive';\n  }\n}\n\nexport function getActivityIcon(type: string): string {\n  switch (type) {\n    case 'completed_video':\n      return 'fas fa-play';\n    case 'scored_test':\n      return 'fas fa-check';\n    case 'downloaded_notes':\n      return 'fas fa-download';\n    default:\n      return 'fas fa-circle';\n  }\n}\n\nexport function getActivityIconColor(type: string): string {\n  switch (type) {\n    case 'completed_video':\n      return 'text-blue-600 bg-blue-100';\n    case 'scored_test':\n      return 'text-green-600 bg-green-100';\n    case 'downloaded_notes':\n      return 'text-purple-600 bg-purple-100';\n    default:\n      return 'text-gray-600 bg-gray-100';\n  }\n}\n","size_bytes":2363},"client/src/pages/AccountSetup.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, User, Mail, Lock, Eye, EyeOff } from 'lucide-react';\n\nexport default function AccountSetup() {\n  const [, setLocation] = useLocation();\n  \n  const [formData, setFormData] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n    profileImageUrl: ''\n  });\n  \n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  useEffect(() => {\n    // Extract URL parameters for pre-filling form\n    const params = new URLSearchParams(window.location.search);\n    setFormData(prev => ({\n      ...prev,\n      email: params.get('email') || '',\n      firstName: params.get('firstName') || '',\n      lastName: params.get('lastName') || '',\n      profileImageUrl: params.get('profileImageUrl') || ''\n    }));\n  }, []);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError('');\n  };\n\n  const validateForm = () => {\n    if (!formData.username || !formData.password || !formData.firstName || !formData.lastName) {\n      setError('Please fill in all required fields');\n      return false;\n    }\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return false;\n    }\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      const response = await fetch('/api/mongo/auth/complete-setup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          username: formData.username,\n          password: formData.password,\n          profileImageUrl: formData.profileImageUrl\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Store JWT token\n        localStorage.setItem('authToken', data.token);\n        setSuccess('Account setup completed successfully! Redirecting to dashboard...');\n        \n        // Force page reload to ensure authentication state is updated\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 1500);\n      } else {\n        setError(data.message || 'Setup failed. Please try again.');\n      }\n    } catch (error) {\n      setError('Network error. Please check your connection and try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Complete Your Account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Set up your username and password to get started\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {success && (\n            <Alert className=\"mb-4 border-green-200 bg-green-50\">\n              <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email (verified)</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  disabled\n                  className=\"pl-9 bg-gray-50\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username *</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"username\"\n                  value={formData.username}\n                  onChange={(e) => handleInputChange('username', e.target.value)}\n                  className=\"pl-9\"\n                  placeholder=\"Choose a unique username\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password *</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={formData.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  className=\"pl-9 pr-9\"\n                  placeholder=\"Minimum 6 characters\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password *</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  value={formData.confirmPassword}\n                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                  className=\"pl-9 pr-9\"\n                  placeholder=\"Confirm your password\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-3 h-4 w-4 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                </button>\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Setting up account...\n                </>\n              ) : (\n                'Complete Setup'\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center text-sm text-gray-600\">\n            <p>Your account will require admin approval before accessing courses.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8794},"client/src/pages/account-setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, User, Mail, Lock, Eye, EyeOff } from \"lucide-react\";\n\nconst setupSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SetupFormData = z.infer<typeof setupSchema>;\n\nexport default function AccountSetup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [userInfo, setUserInfo] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const form = useForm<SetupFormData>({\n    resolver: zodResolver(setupSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Check if user is authenticated via Replit and get their info\n  useEffect(() => {\n    const checkReplitAuth = async () => {\n      try {\n        const response = await fetch(\"/api/auth/user\");\n        if (response.ok) {\n          const user = await response.json();\n          setUserInfo(user);\n          \n          // Check if user already has username/password setup\n          const mongoCheckResponse = await fetch(\"/api/mongo/auth/check-setup\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ email: user.email }),\n          });\n          \n          if (mongoCheckResponse.ok) {\n            const { hasSetup } = await mongoCheckResponse.json();\n            if (hasSetup) {\n              // User already has setup, redirect to dashboard\n              setLocation(\"/\");\n              return;\n            }\n          }\n        } else {\n          // Not authenticated via Replit, redirect to login\n          window.location.href = \"/api/login\";\n          return;\n        }\n      } catch (error) {\n        console.error(\"Error checking auth:\", error);\n        window.location.href = \"/api/login\";\n        return;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkReplitAuth();\n  }, [setLocation]);\n\n  const onSubmit = async (data: SetupFormData) => {\n    if (!userInfo) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/mongo/auth/complete-setup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: userInfo.email,\n          firstName: userInfo.firstName || \"\",\n          lastName: userInfo.lastName || \"\",\n          username: data.username,\n          password: data.password,\n          replitId: userInfo.id,\n          profileImageUrl: userInfo.profileImageUrl,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem(\"token\", result.token);\n        toast({\n          title: \"Account setup complete\",\n          description: \"Welcome to EduPlatform! Your account is pending approval.\",\n        });\n        setLocation(\"/\");\n      } else {\n        toast({\n          title: \"Setup failed\",\n          description: result.message || \"Failed to complete account setup\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Setup failed\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Verifying your email...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!userInfo) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"shadow-xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <CheckCircle className=\"h-12 w-12 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-2xl\">Email Verified!</CardTitle>\n              <CardDescription>\n                Complete your account setup to continue\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert className=\"border-green-200 bg-green-50\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertDescription className=\"text-green-800\">\n                  <div className=\"space-y-1\">\n                    <p><strong>Email:</strong> {userInfo.email}</p>\n                    {userInfo.firstName && (\n                      <p><strong>Name:</strong> {userInfo.firstName} {userInfo.lastName}</p>\n                    )}\n                  </div>\n                </AlertDescription>\n              </Alert>\n\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Choose a Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username\"\n                    {...form.register(\"username\")}\n                  />\n                  {form.formState.errors.username && (\n                    <p className=\"text-sm text-red-600\">\n                      {form.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Create a Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    {...form.register(\"password\")}\n                  />\n                  {form.formState.errors.password && (\n                    <p className=\"text-sm text-red-600\">\n                      {form.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    {...form.register(\"confirmPassword\")}\n                  />\n                  {form.formState.errors.confirmPassword && (\n                    <p className=\"text-sm text-red-600\">\n                      {form.formState.errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Complete Account Setup\n                </Button>\n              </form>\n\n              <p className=\"text-sm text-center text-gray-600 dark:text-gray-400\">\n                Your account will require admin approval before you can access courses.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8292},"client/src/pages/admin-broken.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport StatsCard from \"@/components/stats-card\";\nimport CourseForm from \"@/components/admin/course-form\";\nimport TestForm from \"@/components/admin/test-form\";\nimport StudentGrades from \"@/components/admin/student-grades\";\nimport UserApprovals from \"@/components/admin/user-approvals\";\nimport UserManagement from \"@/components/admin/user-management\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { formatDate, getGradeColor } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Youtube, FileText, Edit, Trash2, Award, Users, BookOpen, BarChart3, Target, TrendingUp, GraduationCap } from \"lucide-react\";\nimport type { User, Course, TestResult } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminTestResult extends TestResult {\n  test?: {\n    id: number;\n    title: string;\n    courseId: number;\n  };\n  course?: {\n    id: number;\n    title: string;\n  };\n}\n\nexport default function Admin() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [showCourseForm, setShowCourseForm] = useState(false);\n  const [showTestForm, setShowTestForm] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(\"analytics\");\n\n  const { data: adminStats, isLoading: statsLoading } = useQuery<{\n    totalUsers: number;\n    activeCourses: number;\n    testsCompleted: number;\n    averageScore: number;\n  }>({\n    queryKey: [\"/api/mongo/admin/stats\"],\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/admin/users\"],\n  });\n\n  const { data: courses, isLoading: coursesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/courses\"],\n  });\n\n  const { data: tests, isLoading: testsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/tests\"],\n  });\n\n  // Delete course mutation\n  const deleteCourse = useMutation({\n    mutationFn: async (courseId: string) => {\n      const response = await fetch(`/api/mongo/courses/${courseId}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete course');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/courses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Course deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete course\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditCourse = (course: any) => {\n    setEditingCourse(course);\n    setShowCourseForm(true);\n  };\n\n  const handleDeleteCourse = (courseId: string) => {\n    deleteCourse.mutate(courseId);\n  };\n\n  if (statsLoading && activeTab === \"analytics\") {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <Skeleton className=\"h-8 w-48 mb-2\" />\n          <Skeleton className=\"h-6 w-64\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-24\" />\n          ))}\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Sidebar */}\n      <aside className=\"w-64 bg-blue-900 text-white flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6 border-b border-blue-800\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-white rounded-lg flex items-center justify-center\">\n              <GraduationCap className=\"w-5 h-5 text-blue-900\" />\n            </div>\n            <span className=\"font-bold text-lg\">EduPlatform</span>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-6\">\n          <ul className=\"space-y-2 mb-8\">\n            <li>\n              <button \n                onClick={() => setActiveTab(\"analytics\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"analytics\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <BarChart3 className=\"w-5 h-5 mr-3\" />\n                Analytics\n              </button>\n            </li>\n            <li>\n              <button \n                onClick={() => setActiveTab(\"approvals\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"approvals\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <Users className=\"w-5 h-5 mr-3\" />\n                User Approvals\n              </button>\n            </li>\n            <li>\n              <button \n                onClick={() => setActiveTab(\"users\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"users\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <Users className=\"w-5 h-5 mr-3\" />\n                User Management\n              </button>\n            </li>\n            <li>\n              <button \n                onClick={() => setActiveTab(\"courses\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"courses\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <BookOpen className=\"w-5 h-5 mr-3\" />\n                Courses\n              </button>\n            </li>\n            <li>\n              <button \n                onClick={() => setActiveTab(\"tests\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"tests\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <Target className=\"w-5 h-5 mr-3\" />\n                Tests\n              </button>\n            </li>\n            <li>\n              <button \n                onClick={() => setActiveTab(\"grades\")}\n                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeTab === \"grades\"\n                    ? 'bg-blue-800 text-white' \n                    : 'text-blue-100 hover:bg-blue-800 hover:text-white'\n                }`}\n              >\n                <Award className=\"w-5 h-5 mr-3\" />\n                Grades\n              </button>\n            </li>\n          </ul>\n        </nav>\n\n        {/* Stats Section */}\n        <div className=\"p-4\">\n          <Card className=\"bg-blue-800 border-blue-700 text-white\">\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold\">{adminStats?.totalUsers || 0}</div>\n                  <p className=\"text-xs text-blue-200\">Users</p>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">{adminStats?.activeCourses || 0}</div>\n                  <p className=\"text-xs text-blue-200\">Courses</p>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">{adminStats?.testsCompleted || 0}</div>\n                  <p className=\"text-xs text-blue-200\">Tests</p>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">{adminStats?.averageScore || 0}%</div>\n                  <p className=\"text-xs text-blue-200\">Avg Score</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          {/* Page Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Admin Control Center</h1>\n            <p className=\"text-gray-600\">Manage your learning platform with comprehensive tools</p>\n          </div>\n\n          {/* Tab Content Based on Active Tab */}\n          {activeTab === \"analytics\" && (\n            <div className=\"space-y-8\">\n              <div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Platform Analytics</h3>\n                <p className=\"text-gray-600 mb-8\">Comprehensive insights into your learning platform performance</p>\n              </div>\n\n              {/* Charts Placeholder */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>User Enrollment Trends</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64 flex items-center justify-center border-2 border-dashed border-gray-300 rounded\">\n                      <div className=\"text-center text-gray-500\">\n                        <BarChart3 className=\"w-12 h-12 mx-auto mb-2\" />\n                        <p>Chart: Monthly user enrollments</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Course Completion Rates</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64 flex items-center justify-center border-2 border-dashed border-gray-300 rounded\">\n                      <div className=\"text-center text-gray-500\">\n                        <Target className=\"w-12 h-12 mx-auto mb-2\" />\n                        <p>Chart: Completion rates by course</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* User Approvals Tab */}\n          {activeTab === \"approvals\" && (\n            <div className=\"space-y-6\">\n              <UserApprovals />\n            </div>\n          )}\n\n          {/* User Management Tab */}\n          {activeTab === \"users\" && (\n            <div className=\"space-y-6\">\n              <UserManagement />\n            </div>\n          )}\n\n          {/* Courses Tab */}\n          {activeTab === \"courses\" && (\n            <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">User Management</h3>\n            <Button>\n              <i className=\"fas fa-plus mr-2\"></i>\n              Add User\n            </Button>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n            {usersLoading ? (\n              <div className=\"p-6\">\n                {[...Array(5)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 mb-4\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        User\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Role\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {users?.map((user) => (\n                      <tr key={user._id || user.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={user.avatar || \"\"} />\n                              <AvatarFallback>\n                                {user.firstName[0]}{user.lastName[0]}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"ml-4\">\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {user.firstName} {user.lastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\">{user.email}</div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                            {user.role}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                            {user.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"mr-3\">\n                            Edit\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600\">\n                            {user.isActive ? \"Suspend\" : \"Activate\"}\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n          )}\n\n          {/* Course Management Tab */}\n          {activeTab === \"courses\" && (\n            <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Course Management</h3>\n            <Dialog open={showCourseForm} onOpenChange={setShowCourseForm}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Course\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n                <DialogTitle>{editingCourse ? 'Edit Course' : 'Create New Course'}</DialogTitle>\n                <DialogDescription>\n                  {editingCourse ? 'Update course information and content' : 'Fill in the details to create a new course'}\n                </DialogDescription>\n                <CourseForm \n                  course={editingCourse}\n                  onSuccess={() => {\n                    setShowCourseForm(false);\n                    setEditingCourse(null);\n                  }}\n                  onCancel={() => {\n                    setShowCourseForm(false);\n                    setEditingCourse(null);\n                  }}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {coursesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Skeleton key={i} className=\"h-64\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {courses?.map((course: any) => (\n                <div key={course._id || course.id} className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <h4 className=\"text-lg font-semibold text-gray-900\">{course.title}</h4>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"icon\"\n                        onClick={() => handleEditCourse(course)}\n                        title=\"Edit Course\"\n                      >\n                        <Edit className=\"h-4 w-4 text-gray-400\" />\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\"\n                            title=\"Delete Course\"\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-400\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Course</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete \"{course.title}\"? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDeleteCourse(course._id || course.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Delete\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2 text-sm text-gray-600\">\n                    <p><span className=\"font-medium\">Category:</span> {course.category}</p>\n                    <p><span className=\"font-medium\">Level:</span> {course.level}</p>\n                    <p className=\"flex items-center gap-1\">\n                      <Youtube className=\"h-3 w-3\" />\n                      <span className=\"font-medium\">Videos:</span> {course.modules?.length || 0} lectures\n                    </p>\n                    <p className=\"flex items-center gap-1\">\n                      <FileText className=\"h-3 w-3\" />\n                      <span className=\"font-medium\">Notes:</span> {course.notes?.length || 0} PDFs\n                    </p>\n                    <p><span className=\"font-medium\">Duration:</span> {Math.floor((course.duration || 0) / 60)} hours</p>\n                    <p>\n                      <span className=\"font-medium\">Status:</span>{\" \"}\n                      <span className=\"text-green-600\">\n                        {course.isActive ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </p>\n                    {course.price > 0 && (\n                      <p><span className=\"font-medium\">Price:</span> ${course.price}</p>\n                    )}\n                  </div>\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Edit className=\"h-3 w-3 mr-1\" />\n                      Manage Content\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n            </div>\n          )}\n\n\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Test Management</h3>\n            <Dialog open={showTestForm} onOpenChange={setShowTestForm}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Test\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                <TestForm \n                  onSuccess={() => setShowTestForm(false)}\n                  onCancel={() => setShowTestForm(false)}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Existing Tests */}\n          {testsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-24\" />\n              ))}\n            </div>\n          ) : tests && tests.length > 0 ? (\n            <div className=\"space-y-4\">\n              {tests.map((test: any) => (\n                <div key={test._id || test.id} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">{test.title}</h4>\n                      <p className=\"text-gray-600 mb-4\">{test.description}</p>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Course:</span>\n                          <p className=\"text-gray-600\">{test.course?.title || 'N/A'}</p>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Questions:</span>\n                          <p className=\"text-gray-600\">{test.questions?.length || 0}</p>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Time Limit:</span>\n                          <p className=\"text-gray-600\">{test.timeLimit || 60} minutes</p>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Passing Score:</span>\n                          <p className=\"text-gray-600\">{test.passingScore || 60}%</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"icon\" title=\"Edit Test\">\n                        <Edit className=\"h-4 w-4 text-gray-400\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" title=\"Delete Test\">\n                        <Trash2 className=\"h-4 w-4 text-red-400\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Tests Found</h3>\n                <p className=\"text-gray-500 mb-4\">Create tests for your courses to assess student learning</p>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setShowTestForm(true)}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Test\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Tests Tab */}\n          {activeTab === \"tests\" && (\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Test Management</h3>\n                <Dialog open={showTestForm} onOpenChange={setShowTestForm}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create Test\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                    <TestForm \n                      onSuccess={() => setShowTestForm(false)}\n                      onCancel={() => setShowTestForm(false)}\n                    />\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  {testsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Skeleton key={i} className=\"h-24\" />\n                      ))}\n                    </div>\n                  ) : tests && tests.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {tests.map((test) => (\n                        <div key={test._id} className=\"border border-gray-200 rounded-lg p-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-gray-900 mb-2\">{test.title}</h4>\n                              <p className=\"text-gray-600 text-sm mb-3\">{test.description}</p>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"font-medium text-gray-700\">Course:</span>\n                                  <p className=\"text-gray-600\">{test.courseName || \"N/A\"}</p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium text-gray-700\">Questions:</span>\n                                  <p className=\"text-gray-600\">{test.questions?.length || 0}</p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium text-gray-700\">Time Limit:</span>\n                                  <p className=\"text-gray-600\">{test.timeLimit || 60} minutes</p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium text-gray-700\">Passing Score:</span>\n                                  <p className=\"text-gray-600\">{test.passingScore || 60}%</p>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"ghost\" size=\"icon\" title=\"Edit Test\">\n                                <Edit className=\"h-4 w-4 text-gray-400\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"icon\" title=\"Delete Test\">\n                                <Trash2 className=\"h-4 w-4 text-red-400\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Tests Found</h3>\n                      <p className=\"text-gray-500 mb-4\">Create tests for your courses to assess student learning</p>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => setShowTestForm(true)}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create Your First Test\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Grades Tab */}\n          {activeTab === \"grades\" && (\n            <div className=\"space-y-6\">\n              <StudentGrades />\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":29739},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport StatsCard from \"@/components/stats-card\";\nimport CourseForm from \"@/components/admin/course-form\";\nimport TestForm from \"@/components/admin/test-form\";\nimport StudentGrades from \"@/components/admin/student-grades\";\nimport UserApprovals from \"@/components/admin/user-approvals\";\nimport UserManagement from \"@/components/admin/user-management\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Pagination from \"@/components/pagination\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { formatDate, getGradeColor } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Plus, Youtube, FileText, Edit, Trash2, Award, Users, BookOpen, BarChart3, Target, TrendingUp, GraduationCap, Shield, UserCheck, Activity, Clock, Calendar, PieChart, LineChart, Zap } from \"lucide-react\";\nimport type { User, Course, TestResult } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminTestResult extends TestResult {\n  test?: {\n    id: number;\n    title: string;\n    courseId: number;\n  };\n  course?: {\n    id: number;\n    title: string;\n  };\n}\n\ninterface TestResultData {\n  result?: {\n    score: number;\n    maxScore?: number;\n  };\n  maxScore?: number;\n}\n\ninterface StudentResult {\n  student: {\n    _id: string;\n    firstName: string;\n    lastName: string;\n  };\n  testResults?: TestResultData[];\n}\n\nexport default function Admin() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [showCourseForm, setShowCourseForm] = useState(false);\n  \n  // Pagination state\n  const [coursePage, setCoursePage] = useState(1);\n  const [courseItemsPerPage, setCourseItemsPerPage] = useState(10);\n  const [studentPage, setStudentPage] = useState(1);\n  const [studentItemsPerPage, setStudentItemsPerPage] = useState(10);\n  const [testResultPage, setTestResultPage] = useState(1);\n  const [testResultItemsPerPage, setTestResultItemsPerPage] = useState(15);\n  const [showTestForm, setShowTestForm] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<any>(null);\n  const [editingTest, setEditingTest] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(\"analytics\");\n\n  const { data: adminStats, isLoading: statsLoading, refetch: refetchStats } = useQuery<{\n    totalCourses: number;\n    totalStudents: number;\n    studentsEnrolled: number;\n    uniqueStudentsEnrolled?: number;\n    approvedEnrolledStudents: number;\n    averageScore: number;\n    averageCompletion: number;\n    courseCompletionRate: number;\n    completedCourses: number;\n    testsCompleted: number;\n    approvedStudents: number;\n    activeCourses: number;\n  }>({\n    queryKey: [\"/api/mongo/admin/stats\"],\n  });\n\n  const { data: courses, isLoading: coursesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/courses\"],\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/mongo/admin/users\"],\n  });\n\n  const { data: tests, isLoading: testsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/tests\"],\n  });\n\n  const { data: studentResults, isLoading: resultsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/admin/student-results\"],\n  });\n\n  const { data: pendingApprovals, isLoading: approvalsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/admin/pending-approvals\"],\n  });\n\n  // Delete test mutation\n  const deleteTestMutation = useMutation({\n    mutationFn: async (testId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/mongo/tests/${testId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/tests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Test deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle test edit\n  const handleEditTest = (test: any) => {\n    console.log('Edit test clicked:', test);\n    setEditingTest(test);\n    setShowTestForm(true);\n  };\n\n  // Handle test delete\n  const handleDeleteTest = async (testId: string) => {\n    console.log('Delete test clicked:', testId);\n    if (window.confirm(\"Are you sure you want to delete this test? This action cannot be undone.\")) {\n      deleteTestMutation.mutate(testId);\n    }\n  };\n\n  // Manual refresh functionality - no automatic intervals\n\n  // Calculate additional analytics metrics\n  const analyticsData = {\n    // User engagement metrics\n    totalActiveUsers: users?.filter(user => user.isActive !== false)?.length || 0,\n    pendingApprovals: pendingApprovals?.length || 0,\n    approvalRate: users && pendingApprovals \n      ? Math.round(((users.length - pendingApprovals.length) / users.length) * 100) \n      : 0,\n    \n    // Course metrics\n    activeCourses: courses?.filter(course => course.isActive !== false)?.length || 0,\n    courseCategories: courses ? courses.map(course => course.category).filter((category, index, arr) => arr.indexOf(category) === index).length : 0,\n    \n    // Test performance metrics\n    totalTestResults: studentResults?.reduce((acc, student) => acc + (student.testResults?.length || 0), 0) || 0,\n    averageTestScore: studentResults?.length ? \n      Math.round(\n        studentResults.reduce((acc, student) => {\n          const studentAvg = student.testResults?.length ? \n            student.testResults.reduce((sum: number, test: any) => sum + (test.score || 0), 0) / student.testResults.length : 0;\n          return acc + studentAvg;\n        }, 0) / studentResults.length\n      ) : 0,\n    \n    // Activity metrics\n    recentActivity: {\n      newUsers: users?.filter(user => {\n        const createdDate = new Date(user.createdAt);\n        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        return createdDate >= weekAgo;\n      })?.length || 0,\n      newCourses: courses?.filter(course => {\n        const createdDate = new Date(course.createdAt);\n        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        return createdDate >= weekAgo;\n      })?.length || 0,\n      newTests: tests?.filter(test => {\n        const createdDate = new Date(test.createdAt);\n        const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n        return createdDate >= weekAgo;\n      })?.length || 0,\n    }\n  };\n\n  // Delete course mutation\n  const deleteCourse = useMutation({\n    mutationFn: async (courseId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/mongo/courses/${courseId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/courses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Course deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete course\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditCourse = (course: any) => {\n    setEditingCourse(course);\n    setShowCourseForm(true);\n  };\n\n  const handleDeleteCourse = (courseId: string) => {\n    deleteCourse.mutate(courseId);\n  };\n\n  if (statsLoading && activeTab === \"analytics\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n          <div className=\"mb-6\">\n            <Skeleton className=\"h-8 w-48 mb-2\" />\n            <Skeleton className=\"h-6 w-64\" />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-24\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-slate-900\">\n      <Sidebar />\n      <main className=\"lg:ml-64 min-h-screen flex flex-col px-4 lg:px-0\">\n        {/* Enhanced Admin Header */}\n        <div className=\"relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 overflow-hidden\">\n          {/* Background decorations */}\n          <div className=\"absolute inset-0\">\n            <div className=\"absolute top-0 left-0 w-96 h-96 bg-white/10 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/2\"></div>\n            <div className=\"absolute bottom-0 right-0 w-96 h-96 bg-white/10 rounded-full blur-3xl translate-x-1/2 translate-y-1/2\"></div>\n          </div>\n          \n          <div className=\"relative px-8 py-8 backdrop-blur-sm bg-black/10\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center shadow-lg\">\n                  <Shield className=\"w-8 h-8 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-4xl font-bold text-white mb-2\">Admin Panel</h1>\n                  <p className=\"text-blue-100 text-lg font-medium\">\n                    Comprehensive system management and analytics dashboard\n                  </p>\n                </div>\n              </div>\n              \n              {/* Admin stats mini cards */}\n              <div className=\"hidden lg:flex space-x-4\">\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-xl p-4 text-center min-w-[120px] border border-white/30 relative\">\n                  <div className=\"absolute top-2 right-2\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white\">{adminStats?.activeCourses || 0}</div>\n                  <div className=\"text-blue-100 text-sm font-medium\">Active Courses</div>\n                </div>\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-xl p-4 text-center min-w-[120px] border border-white/30 relative\">\n                  <div className=\"absolute top-2 right-2\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white\">{adminStats?.studentsEnrolled || 0}</div>\n                  <div className=\"text-blue-100 text-sm font-medium\">Students Enrolled</div>\n                </div>\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-xl p-4 text-center min-w-[120px] border border-white/30 relative\">\n                  <div className=\"absolute top-2 right-2\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                  </div>\n                  <div className=\"text-2xl font-bold text-white\">{adminStats?.averageScore || 0}%</div>\n                  <div className=\"text-blue-100 text-sm font-medium\">Avg Score</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Enhanced Tab Navigation */}\n        <div className=\"bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"px-8\">\n            <nav className=\"flex space-x-2 overflow-x-auto scrollbar-hide\">\n              <button\n                onClick={() => setActiveTab(\"analytics\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"analytics\"\n                    ? \"bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"h-4 w-4\" />\n                  <span>Analytics</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab(\"approvals\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"approvals\"\n                    ? \"bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-green-600 dark:hover:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <UserCheck className=\"h-4 w-4\" />\n                  <span>User Approvals</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab(\"users\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"users\"\n                    ? \"bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>User Management</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab(\"courses\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"courses\"\n                    ? \"bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 hover:bg-orange-50 dark:hover:bg-orange-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-4 w-4\" />\n                  <span>Courses</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab(\"tests\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"tests\"\n                    ? \"bg-gradient-to-r from-teal-500 to-cyan-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-teal-600 dark:hover:text-teal-400 hover:bg-teal-50 dark:hover:bg-teal-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <FileText className=\"h-4 w-4\" />\n                  <span>Tests</span>\n                </div>\n              </button>\n              <button\n                onClick={() => setActiveTab(\"grading\")}\n                className={`px-6 py-4 rounded-t-2xl font-semibold text-sm transition-all duration-300 whitespace-nowrap ${\n                  activeTab === \"grading\"\n                    ? \"bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg transform -translate-y-1\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-pink-600 dark:hover:text-pink-400 hover:bg-pink-50 dark:hover:bg-pink-900/20\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  <span>Grading</span>\n                </div>\n              </button>\n            </nav>\n          </div>\n        </div>\n        \n        {/* Ultra-Enhanced Content Area with Advanced Styling */}\n        <div className=\"flex-1 overflow-auto relative\">\n          {/* Animated Background Pattern */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/20 dark:from-slate-900 dark:via-blue-900/20 dark:to-indigo-900/10\">\n            <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(120,119,198,0.1),transparent_50%)]\"></div>\n            <div className=\"absolute inset-0 bg-[linear-gradient(45deg,transparent_49%,rgba(255,255,255,0.03)_50%,transparent_51%)] bg-[length:20px_20px]\"></div>\n          </div>\n          \n          {/* Floating Decorative Elements */}\n          <div className=\"absolute top-20 right-20 w-32 h-32 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-pulse\"></div>\n          <div className=\"absolute bottom-20 left-20 w-24 h-24 bg-gradient-to-br from-pink-400/20 to-rose-400/20 rounded-full blur-xl animate-pulse delay-1000\"></div>\n          <div className=\"absolute top-1/2 right-1/3 w-16 h-16 bg-gradient-to-br from-cyan-400/20 to-teal-400/20 rounded-full blur-lg animate-pulse delay-500\"></div>\n          \n          {/* Main Content Container */}\n          <div className=\"relative z-10 p-8 space-y-8\">\n          {/* Tab Content Based on Active Tab */}\n          {activeTab === \"analytics\" && (\n            <div className=\"space-y-8\">\n              {/* Ultra-Enhanced Analytics Header with Advanced Styling */}\n              <div className=\"relative group\">\n                {/* Animated Background Glow */}\n                <div className=\"absolute -inset-1 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 rounded-3xl blur-xl opacity-25 group-hover:opacity-40 transition-opacity duration-500 animate-pulse\"></div>\n                \n                {/* Main Header Container */}\n                <div className=\"relative rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-br from-white/90 via-blue-50/80 to-purple-50/60 dark:from-gray-900/90 dark:via-blue-900/30 dark:to-purple-900/20 backdrop-blur-xl\">\n                  {/* Animated Top Border */}\n                  <div className=\"h-2 bg-gradient-to-r from-blue-500 via-indigo-500 via-purple-500 to-pink-500 relative\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\n                  </div>\n                  \n                  {/* Content Section */}\n                  <div className=\"relative bg-gradient-to-r from-white/20 via-white/10 to-white/5 backdrop-blur-sm\">\n                    {/* Floating Decorative Elements */}\n                    <div className=\"absolute top-4 right-8 w-12 h-12 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-lg animate-pulse\"></div>\n                    <div className=\"absolute bottom-4 left-8 w-8 h-8 bg-gradient-to-br from-pink-400/20 to-rose-400/20 rounded-full blur-md animate-pulse delay-700\"></div>\n                    \n                    <div className=\"p-10\">\n                      <div className=\"flex flex-col lg:flex-row gap-8 justify-between items-start lg:items-center\">\n                        <div className=\"flex items-center space-x-8\">\n                          {/* Enhanced Icon Container */}\n                          <div className=\"relative group/icon\">\n                            <div className=\"absolute -inset-2 bg-gradient-to-br from-blue-600 to-purple-600 rounded-3xl blur-lg opacity-20 group-hover/icon:opacity-40 transition-opacity duration-300\"></div>\n                            <div className=\"relative w-24 h-24 rounded-3xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 flex items-center justify-center shadow-2xl transform group-hover/icon:scale-105 transition-transform duration-300\">\n                              <BarChart3 className=\"w-12 h-12 text-white drop-shadow-lg\" />\n                              <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-3xl\"></div>\n                            </div>\n                          </div>\n                          \n                          {/* Enhanced Title Section */}\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-4\">\n                              <h2 className=\"text-4xl font-black bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 dark:from-white dark:via-blue-200 dark:to-purple-200 bg-clip-text text-transparent\">\n                                Platform Analytics\n                              </h2>\n                              <div className=\"px-3 py-1 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/50 dark:to-purple-900/50 rounded-full border border-blue-200 dark:border-blue-700\">\n                                <span className=\"text-blue-700 dark:text-blue-300 text-sm font-bold flex items-center space-x-1\">\n                                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                                  <span>Live Dashboard</span>\n                                </span>\n                              </div>\n                            </div>\n                            <p className=\"text-gray-600 dark:text-gray-300 text-xl font-medium max-w-md\">\n                              Advanced insights and real-time analytics for your educational platform\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-sm\">\n                              <div className=\"flex items-center space-x-1 text-green-600 dark:text-green-400\">\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                                <span className=\"font-medium\">Real-time Data</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1 text-blue-600 dark:text-blue-400\">\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse delay-300\"></div>\n                                <span className=\"font-medium\">Interactive Charts</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1 text-purple-600 dark:text-purple-400\">\n                                <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-pulse delay-500\"></div>\n                                <span className=\"font-medium\">Advanced Metrics</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Platform Metrics Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {/* Total Users */}\n                <Card className=\"border-l-4 border-l-blue-500 hover:shadow-lg transition-shadow duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">Active Courses</p>\n                        <p className=\"text-3xl font-bold text-blue-900 dark:text-blue-100\">\n                          {adminStats?.activeCourses || 0}\n                        </p>\n                        \n                      </div>\n                      <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center\">\n                        <BookOpen className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Active Courses */}\n                <Card className=\"border-l-4 border-l-green-500 hover:shadow-lg transition-shadow duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-green-600 dark:text-green-400\">Total Students Enrolled</p>\n                        <p className=\"text-3xl font-bold text-green-900 dark:text-green-100\">\n                          {adminStats?.studentsEnrolled || 0}\n                        </p>\n                        \n                      </div>\n                      <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-xl flex items-center justify-center\">\n                        <Users className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Test Results */}\n                <Card className=\"border-l-4 border-l-purple-500 hover:shadow-lg transition-shadow duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-purple-600 dark:text-purple-400\">Average Score</p>\n                        <p className=\"text-3xl font-bold text-purple-900 dark:text-purple-100\">\n                          {adminStats?.averageScore || 0}%\n                        </p>\n                        <p className=\"text-xs text-purple-600 dark:text-purple-400 mt-1\">\n                          {adminStats?.testsCompleted || 0} tests completed\n                        </p>\n                      </div>\n                      <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center\">\n                        <Award className=\"w-6 h-6 text-purple-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Pending Approvals */}\n                <Card className=\"border-l-4 border-l-orange-500 hover:shadow-lg transition-shadow duration-300\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-orange-600 dark:text-orange-400\">Avg Completion</p>\n                        <p className=\"text-3xl font-bold text-orange-900 dark:text-orange-100\">\n                          {adminStats?.averageCompletion || 0}%\n                        </p>\n                        \n                      </div>\n                      <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-xl flex items-center justify-center\">\n                        <Target className=\"w-6 h-6 text-orange-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Enhanced Analytics Charts */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* User Activity Chart */}\n                <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                          <LineChart className=\"w-5 h-5 text-blue-600\" />\n                          <span>User Engagement Overview</span>\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Weekly activity metrics</p>\n                      </div>\n                      <Badge className=\"bg-blue-100 text-blue-800 border-blue-300\">\n                        <Zap className=\"w-3 h-3 mr-1\" />\n                        Live\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {/* User Statistics */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-xl relative\">\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                              <Users className=\"w-5 h-5 text-white\" />\n                            </div>\n                            <div>\n                              <div className=\"flex items-center space-x-1\">\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Active Users</p>\n                                <div className=\"w-1 h-1 bg-blue-500 rounded-full \" />\n                              </div>\n                              <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{adminStats?.totalStudents || analyticsData.totalActiveUsers}</p>\n                              <p className=\"text-xs text-blue-600 dark:text-blue-400\">Live count</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-4 rounded-xl relative\">\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                              <TrendingUp className=\"w-5 h-5 text-white\" />\n                            </div>\n                            <div>\n                              <div className=\"flex items-center space-x-1\">\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">New This Week</p>\n                                <div className=\"w-1 h-1 bg-green-500 rounded-full \" />\n                              </div>\n                              <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{analyticsData.recentActivity.newUsers}</p>\n                              <p className=\"text-xs text-green-600 dark:text-green-400\">Weekly growth</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Course Categories */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\n                          <PieChart className=\"w-4 h-4\" />\n                          <span>Course Distribution</span>\n                          <div className=\"w-1 h-1 bg-blue-500 rounded-full \" />\n                        </h4>\n                        <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-xl relative\">\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Categories</span>\n                            <span className=\"font-bold text-gray-900 dark:text-white\">{analyticsData.courseCategories}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between mt-2\">\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Active Courses</span>\n                            <span className=\"font-bold text-gray-900 dark:text-white\">{adminStats?.activeCourses || 0}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between mt-2\">\n                            <span className=\"text-xs text-gray-500 dark:text-gray-500\">Live Updates</span>\n                            <div className=\"flex items-center space-x-1\">\n                              <div className=\"w-1 h-1 bg-green-500 rounded-full \" />\n                              <span className=\"text-xs text-green-600 dark:text-green-400\">Active</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Performance Analytics */}\n                <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                          <Target className=\"w-5 h-5 text-purple-600\" />\n                          <span>Performance Analytics</span>\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Test results and achievements</p>\n                      </div>\n                      <Badge className=\"bg-purple-100 text-purple-800 border-purple-300\">\n                        <Activity className=\"w-3 h-3 mr-1\" />\n                        Updated\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {/* Test Performance */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-4 rounded-xl relative\">\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full \" />\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                              <Award className=\"w-5 h-5 text-white\" />\n                            </div>\n                            <div>\n                              <div className=\"flex items-center space-x-1\">\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Tests</p>\n                                <div className=\"w-1 h-1 bg-purple-500 rounded-full\" />\n                              </div>\n                              <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{adminStats?.testsCompleted || analyticsData.totalTestResults}</p>\n                              <p className=\"text-xs text-purple-600 dark:text-purple-400\">Manual refresh</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 p-4 rounded-xl relative\">\n                          <div className=\"absolute top-2 right-2\">\n                            <div className=\"w-2 h-2 bg-blue-400 rounded-full\" />\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                              <BarChart3 className=\"w-5 h-5 text-white\" />\n                            </div>\n                            <div>\n                              <div className=\"flex items-center space-x-1\">\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Score</p>\n                                <div className=\"w-1 h-1 bg-orange-500 rounded-full \" />\n                              </div>\n                              <p className=\"text-xl font-bold text-gray-900 dark:text-white\">{adminStats?.averageScore || analyticsData.averageTestScore}%</p>\n                              <p className=\"text-xs text-orange-600 dark:text-orange-400\">Real-time avg</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Student Performance Breakdown */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\n                          <GraduationCap className=\"w-4 h-4\" />\n                          <span>Student Overview</span>\n                        </h4>\n                        <div className=\"space-y-2\">\n                          {studentResults?.map((student, index) => (\n                            <div key={student.student._id} className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold ${\n                                    index === 0 ? 'bg-yellow-500' : index === 1 ? 'bg-gray-400' : 'bg-orange-600'\n                                  }`}>\n                                    {index + 1}\n                                  </div>\n                                  <div>\n                                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                                      {student.student.firstName} {student.student.lastName}\n                                    </p>\n                                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                      {student.testResults?.filter((test: TestResultData) => test.result)?.length || 0} tests completed\n                                    </p>\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"font-bold text-gray-900 dark:text-white\">\n                                    {student.testResults?.filter((test: TestResultData) => test.result)?.length ? \n                                      Math.round(student.testResults.filter((test: TestResultData) => test.result).reduce((sum: number, test: TestResultData) => sum + ((test.result?.score || 0) / (test.maxScore || 100) * 100), 0) / student.testResults.filter((test: TestResultData) => test.result).length) \n                                      : 0}%\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          {(!studentResults || studentResults.length === 0) && (\n                            <div className=\"text-center py-8 text-gray-500\">\n                              <Award className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                              <p>No test results available yet</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Recent Activity Section */}\n              <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                    <Activity className=\"w-5 h-5 text-green-600\" />\n                    <span>Recent Platform Activity</span>\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Latest updates and changes across the platform</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-xl\">\n                      <div className=\"flex items-center space-x-3 mb-4\">\n                        <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center\">\n                          <Users className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-bold text-gray-900 dark:text-white\">New Users</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">This week</p>\n                        </div>\n                      </div>\n                      <p className=\"text-3xl font-bold text-blue-600 mb-2\">{analyticsData.recentActivity.newUsers}</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {analyticsData.recentActivity.newUsers > 0 ? 'Great growth!' : 'Steady state'}\n                      </p>\n                    </div>\n\n                    <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-6 rounded-xl\">\n                      <div className=\"flex items-center space-x-3 mb-4\">\n                        <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                          <BookOpen className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-bold text-gray-900 dark:text-white\">New Courses</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">This week</p>\n                        </div>\n                      </div>\n                      <p className=\"text-3xl font-bold text-green-600 mb-2\">{analyticsData.recentActivity.newCourses}</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {analyticsData.recentActivity.newCourses > 0 ? 'Content expanding!' : 'Stable catalog'}\n                      </p>\n                    </div>\n\n                    <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-6 rounded-xl\">\n                      <div className=\"flex items-center space-x-3 mb-4\">\n                        <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center\">\n                          <FileText className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-bold text-gray-900 dark:text-white\">New Tests</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">This week</p>\n                        </div>\n                      </div>\n                      <p className=\"text-3xl font-bold text-purple-600 mb-2\">{analyticsData.recentActivity.newTests}</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {analyticsData.recentActivity.newTests > 0 ? 'Assessment growth!' : 'Stable testing'}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* User Approvals Tab */}\n          {activeTab === \"approvals\" && (\n            <div className=\"space-y-6\">\n              <UserApprovals />\n            </div>\n          )}\n\n          {/* User Management Tab */}\n          {activeTab === \"users\" && (\n            <div className=\"space-y-6\">\n              <UserManagement />\n            </div>\n          )}\n\n          {/* Course Management Tab */}\n          {activeTab === \"courses\" && (\n            <div className=\"space-y-8\">\n              {/* Header Section */}\n              <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-orange-50/50 to-red-50/50 dark:from-orange-900/20 dark:to-red-900/20\">\n                <div className=\"bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-sm\">\n                  <div className=\"p-8\">\n                    <div className=\"flex flex-col lg:flex-row gap-6 justify-between items-start lg:items-center\">\n                      <div className=\"flex items-center space-x-6\">\n                        <div className=\"w-20 h-20 rounded-2xl bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center shadow-lg\">\n                          <BookOpen className=\"w-10 h-10 text-white\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                            Course Management\n                          </h2>\n                          <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                            Create, edit, and manage educational content\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {/* Statistics & Actions */}\n                      <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-4\">\n                        <div className=\"bg-orange-50 dark:bg-orange-900/20 px-4 py-2 rounded-xl border border-orange-200 dark:border-orange-800 shadow-lg\">\n                          <div className=\"flex items-center space-x-2\">\n                            <BookOpen className=\"h-4 w-4 text-orange-600\" />\n                            <span className=\"text-sm font-bold text-orange-800 dark:text-orange-200\">\n                              {(courses as any[])?.length || 0} Active Courses\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <Dialog open={showCourseForm} onOpenChange={setShowCourseForm}>\n                          <DialogTrigger asChild>\n                            <Button \n                              size=\"lg\" \n                              className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                            >\n                              <Plus className=\"h-5 w-5 mr-3\" />\n                              Create New Course\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-7xl max-h-[95vh] overflow-hidden bg-gradient-to-br from-white via-gray-50 to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900/20 border-0 shadow-2xl\">\n                            {/* Gradient Header */}\n                            <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500\"></div>\n                            \n                            {/* Header Section */}\n                            <div className=\"relative bg-gradient-to-r from-orange-500/10 via-red-500/10 to-pink-500/10 dark:from-orange-500/20 dark:via-red-500/20 dark:to-pink-500/20 -m-6 mb-6 p-8 rounded-t-xl\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-4\">\n                                  <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-2xl flex items-center justify-center shadow-lg\">\n                                    <BookOpen className=\"h-8 w-8 text-white\" />\n                                  </div>\n                                  <div>\n                                    <DialogTitle className=\"text-3xl font-bold text-gray-900 dark:text-white flex items-center space-x-3\">\n                                      <span>{editingCourse ? 'Edit Course' : 'Create New Course'}</span>\n                                      <div className=\"px-3 py-1 bg-gradient-to-r from-orange-100 to-red-100 dark:from-orange-900/50 dark:to-red-900/50 rounded-full border border-orange-200 dark:border-orange-700\">\n                                        <span className=\"text-orange-700 dark:text-orange-300 text-sm font-semibold\">\n                                          {editingCourse ? 'Update Mode' : 'Creation Mode'}\n                                        </span>\n                                      </div>\n                                    </DialogTitle>\n                                    <DialogDescription className=\"text-lg text-gray-600 dark:text-gray-300 mt-2\">\n                                      {editingCourse ? 'Update course information and content to improve your educational offering' : 'Fill in the details to create an engaging new course for your students'}\n                                    </DialogDescription>\n                                  </div>\n                                </div>\n                                \n                                {/* Status Indicator */}\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-3 h-3 bg-green-500 rounded-full \"></div>\n                                  <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">Ready</span>\n                                </div>\n                              </div>\n                              \n                              {/* Progress Steps */}\n                              <div className=\"mt-6 flex items-center space-x-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                                    <span className=\"text-white font-bold text-sm\">1</span>\n                                  </div>\n                                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Course Info</span>\n                                </div>\n                                <div className=\"w-8 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\"></div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                                    <span className=\"text-white font-bold text-sm\">2</span>\n                                  </div>\n                                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Content</span>\n                                </div>\n                                <div className=\"w-8 h-0.5 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full\"></div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"w-8 h-8 bg-gradient-to-br from-pink-500 to-red-500 rounded-full flex items-center justify-center\">\n                                    <span className=\"text-white font-bold text-sm\">3</span>\n                                  </div>\n                                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Review</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            {/* Content Area with Custom Scrollbar */}\n                            <div className=\"overflow-y-auto max-h-[calc(95vh-200px)] pr-2\" style={{\n                              scrollbarWidth: 'thin',\n                              scrollbarColor: '#f97316 #f3f4f6'\n                            }}>\n                              <div className=\"space-y-6\">\n                                {/* Features Banner */}\n                                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                                  <div className=\"bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-900/30 dark:to-cyan-900/30 p-4 rounded-xl border border-blue-200 dark:border-blue-700\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                                        <span className=\"text-white font-bold text-sm\">📚</span>\n                                      </div>\n                                      <div>\n                                        <p className=\"text-sm font-semibold text-blue-700 dark:text-blue-300\">Rich Content</p>\n                                        <p className=\"text-xs text-blue-600 dark:text-blue-400\">Videos & Notes</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/30 dark:to-pink-900/30 p-4 rounded-xl border border-purple-200 dark:border-purple-700\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                                        <span className=\"text-white font-bold text-sm\">🎯</span>\n                                      </div>\n                                      <div>\n                                        <p className=\"text-sm font-semibold text-purple-700 dark:text-purple-300\">Structured</p>\n                                        <p className=\"text-xs text-purple-600 dark:text-purple-400\">Organized Learning</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/30 dark:to-emerald-900/30 p-4 rounded-xl border border-green-200 dark:border-green-700\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                                        <span className=\"text-white font-bold text-sm\">📊</span>\n                                      </div>\n                                      <div>\n                                        <p className=\"text-sm font-semibold text-green-700 dark:text-green-300\">Trackable</p>\n                                        <p className=\"text-xs text-green-600 dark:text-green-400\">Progress Monitoring</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/30 dark:to-orange-900/30 p-4 rounded-xl border border-amber-200 dark:border-amber-700\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <div className=\"w-8 h-8 bg-amber-500 rounded-full flex items-center justify-center\">\n                                        <span className=\"text-white font-bold text-sm\">🚀</span>\n                                      </div>\n                                      <div>\n                                        <p className=\"text-sm font-semibold text-amber-700 dark:text-amber-300\">Engaging</p>\n                                        <p className=\"text-xs text-amber-600 dark:text-amber-400\">Interactive Content</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                {/* Course Form */}\n                                <CourseForm \n                                  course={editingCourse}\n                                  onSuccess={() => {\n                                    setShowCourseForm(false);\n                                    setEditingCourse(null);\n                                  }}\n                                  onCancel={() => {\n                                    setShowCourseForm(false);\n                                    setEditingCourse(null);\n                                  }}\n                                />\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Content Section */}\n              <div className=\"space-y-6\">\n                {coursesLoading ? (\n                  <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-gray-50/50 to-slate-50/50 dark:from-gray-800/50 dark:to-slate-800/50\">\n                    <div className=\"p-8\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                        {[...Array(6)].map((_, i) => (\n                          <div key={i} className=\"rounded-2xl bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 p-6 \">\n                            <div className=\"aspect-video bg-gray-300 dark:bg-gray-600 rounded-xl mb-4\"></div>\n                            <div className=\"h-6 bg-gray-300 dark:bg-gray-600 rounded mb-3\"></div>\n                            <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2\"></div>\n                            <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4\"></div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ) : courses && (courses as any[]).length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                    {(courses as any[]).map((course, index) => (\n                      <div key={course._id} className={`rounded-3xl border border-white/20 shadow-2xl overflow-hidden transition-all duration-300 hover:shadow-3xl hover:-translate-y-2 ${\n                        index % 3 === 0 \n                          ? 'bg-gradient-to-br from-blue-500/10 to-cyan-500/10' \n                          : index % 3 === 1\n                          ? 'bg-gradient-to-br from-purple-500/10 to-pink-500/10'\n                          : 'bg-gradient-to-br from-emerald-500/10 to-teal-500/10'\n                      }`}>\n                        <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n                          {/* Course Thumbnail */}\n                          <div className=\"relative aspect-video overflow-hidden\">\n                            {course.thumbnail ? (\n                              <img \n                                src={course.thumbnail} \n                                alt={course.title}\n                                className=\"w-full h-full object-cover transition-transform duration-300 hover:scale-110\"\n                              />\n                            ) : (\n                              <div className={`flex items-center justify-center h-full ${\n                                index % 3 === 0 \n                                  ? 'bg-gradient-to-br from-blue-400 to-cyan-500' \n                                  : index % 3 === 1\n                                  ? 'bg-gradient-to-br from-purple-400 to-pink-500'\n                                  : 'bg-gradient-to-br from-emerald-400 to-teal-500'\n                              }`}>\n                                <BookOpen className=\"w-16 h-16 text-white opacity-80\" />\n                              </div>\n                            )}\n                            <div className=\"absolute top-4 right-4\">\n                              <Badge className={`px-3 py-1 text-xs font-bold shadow-lg ${\n                                index % 3 === 0 \n                                  ? 'bg-blue-100 text-blue-800 border-blue-300' \n                                  : index % 3 === 1\n                                  ? 'bg-purple-100 text-purple-800 border-purple-300'\n                                  : 'bg-emerald-100 text-emerald-800 border-emerald-300'\n                              }`}>\n                                {course.category || 'General'}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Course Content */}\n                          <div className=\"p-6 space-y-4\">\n                            <div>\n                              <h4 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2 line-clamp-2\">\n                                {course.title}\n                              </h4>\n                              <p className=\"text-gray-600 dark:text-gray-300 text-sm line-clamp-3\">\n                                {course.description}\n                              </p>\n                            </div>\n\n                            {/* Course Stats */}\n                            <div className=\"flex items-center justify-between\">\n                              <div className={`px-3 py-1 rounded-lg border ${\n                                index % 3 === 0 \n                                  ? 'bg-blue-50 border-blue-200 text-blue-700' \n                                  : index % 3 === 1\n                                  ? 'bg-purple-50 border-purple-200 text-purple-700'\n                                  : 'bg-emerald-50 border-emerald-200 text-emerald-700'\n                              }`}>\n                                <div className=\"flex items-center space-x-1\">\n                                  <Youtube className=\"w-3 h-3\" />\n                                  <span className=\"text-xs font-medium\">{course.modules?.length || 0} modules</span>\n                                </div>\n                              </div>\n                              <div className={`px-3 py-1 rounded-lg border ${\n                                index % 3 === 0 \n                                  ? 'bg-blue-50 border-blue-200 text-blue-700' \n                                  : index % 3 === 1\n                                  ? 'bg-purple-50 border-purple-200 text-purple-700'\n                                  : 'bg-emerald-50 border-emerald-200 text-emerald-700'\n                              }`}>\n                                <div className=\"flex items-center space-x-1\">\n                                  <FileText className=\"w-3 h-3\" />\n                                  <span className=\"text-xs font-medium\">{course.notes?.length || 0} notes</span>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Action Buttons */}\n                            <div className=\"flex space-x-3 pt-2\">\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={() => handleEditCourse(course)}\n                                className={`flex-1 border-2 font-semibold transition-all duration-300 ${\n                                  index % 3 === 0 \n                                    ? 'border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300' \n                                    : index % 3 === 1\n                                    ? 'border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300'\n                                    : 'border-emerald-200 text-emerald-700 hover:bg-emerald-50 hover:border-emerald-300'\n                                }`}\n                              >\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Edit\n                              </Button>\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button variant=\"destructive\" size=\"sm\" className=\"bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 shadow-lg\">\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle className=\"text-xl font-bold flex items-center space-x-2\">\n                                      <Trash2 className=\"h-6 w-6 text-red-600\" />\n                                      <span>Delete Course</span>\n                                    </AlertDialogTitle>\n                                    <AlertDialogDescription className=\"text-base\">\n                                      Are you sure you want to delete <span className=\"font-semibold text-red-600\">\"{course.title}\"</span>? This action cannot be undone and will remove all associated content.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction \n                                      onClick={() => handleDeleteCourse(course._id)}\n                                      className=\"bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700\"\n                                    >\n                                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                                      Delete Course\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-gray-50/50 to-slate-50/50 dark:from-gray-800/50 dark:to-slate-800/50\">\n                    <div className=\"text-center py-16 px-8\">\n                      <div className=\"w-24 h-24 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 flex items-center justify-center\">\n                        <BookOpen className=\"h-12 w-12 text-orange-500\" />\n                      </div>\n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-3\">No Courses Found</h3>\n                      <p className=\"text-gray-600 dark:text-gray-300 text-lg mb-6\">\n                        Create your first course to start building your educational platform\n                      </p>\n                      <Button \n                        onClick={() => setShowCourseForm(true)}\n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <Plus className=\"h-5 w-5 mr-3\" />\n                        Create Your First Course\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Tests Tab */}\n          {activeTab === \"tests\" && (\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Test Management</h3>\n                <Dialog open={showTestForm} onOpenChange={setShowTestForm}>\n                  <DialogTrigger asChild>\n                    <Button className=\"group relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 hover:from-blue-700 hover:via-purple-700 hover:to-indigo-700 text-white font-semibold px-6 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border-0 overflow-hidden\">\n                      {/* Animated background overlay */}\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-out\"></div>\n                      \n                      {/* Icon with enhanced styling */}\n                      <div className=\"relative flex items-center space-x-2\">\n                        <div className=\"w-5 h-5 bg-white/20 rounded-full flex items-center justify-center group-hover:rotate-90 transition-transform duration-300\">\n                          <Plus className=\"h-3 w-3 text-white\" />\n                        </div>\n                        <span className=\"relative z-10 tracking-wide\">Create Test</span>\n                      </div>\n                      \n                      {/* Subtle pulse effect */}\n                      <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-blue-400/0 via-purple-400/0 to-indigo-400/0 group-hover:from-blue-400/20 group-hover:via-purple-400/20 group-hover:to-indigo-400/20 transition-all duration-300\"></div>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-5xl max-h-[95vh] overflow-hidden bg-gradient-to-br from-white via-gray-50 to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900/20 border-0 shadow-2xl\">\n                    {/* Gradient Header */}\n                    <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500\"></div>\n                    \n                    {/* Header Section */}\n                    <div className=\"relative bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-pink-500/10 dark:from-blue-500/20 dark:via-purple-500/20 dark:to-pink-500/20 -m-6 mb-6 p-6 rounded-t-xl\">\n                      <DialogTitle className=\"sr-only\">Create Test</DialogTitle>\n                      <DialogDescription className=\"sr-only\">Create a new test for your course</DialogDescription>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center shadow-lg\">\n                            <span className=\"text-2xl\">📝</span>\n                          </div>\n                          <div>\n                            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Create Assessment</h3>\n                            <p className=\"text-gray-600 dark:text-gray-300 mt-1\">Design engaging tests for your students</p>\n                          </div>\n                        </div>\n                        \n                        {/* Quick Stats */}\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-center\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/50 dark:to-emerald-900/50 rounded-lg flex items-center justify-center mb-1\">\n                              <span className=\"text-green-600 dark:text-green-400 font-bold text-sm\">✓</span>\n                            </div>\n                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">Validated</span>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/50 dark:to-cyan-900/50 rounded-lg flex items-center justify-center mb-1\">\n                              <span className=\"text-blue-600 dark:text-blue-400 font-bold text-sm\">⚡</span>\n                            </div>\n                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">Fast</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Content Area */}\n                    <div className=\"overflow-y-auto max-h-[calc(95vh-140px)]\" style={{\n                      scrollbarWidth: 'thin',\n                      scrollbarColor: '#8b5cf6 #f3f4f6'\n                    }}>\n                      <TestForm \n                        editingTest={editingTest}\n                        onSuccess={() => {\n                          setShowTestForm(false);\n                          setEditingTest(null);\n                        }}\n                        onCancel={() => {\n                          setShowTestForm(false);\n                          setEditingTest(null);\n                        }}\n                      />\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  {testsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Skeleton key={i} className=\"h-24\" />\n                      ))}\n                    </div>\n                  ) : tests && tests.length > 0 ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {tests.map((test) => (\n                        <div key={test._id} className=\"group relative bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 hover:scale-105\">\n                          {/* Header with gradient background */}\n                          <div className=\"absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-t-xl\"></div>\n                          \n                          {/* Test Icon */}\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900 dark:to-purple-900 rounded-lg flex items-center justify-center\">\n                                <BookOpen className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                              </div>\n                              <div>\n                                <h4 className=\"font-bold text-gray-900 dark:text-white text-lg leading-tight\">{test.title}</h4>\n                                <p className=\"text-sm text-gray-500 dark:text-gray-400\">{test.courseName || \"General\"}</p>\n                              </div>\n                            </div>\n                            \n                            {/* Action Buttons */}\n                            <div className=\"flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10 relative\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"h-8 w-8 p-0 hover:bg-blue-50 dark:hover:bg-blue-900\" \n                                title=\"Edit Test\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  e.stopPropagation();\n                                  handleEditTest(test);\n                                }}\n                              >\n                                <Edit className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\" \n                                title=\"Delete Test\"\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  e.stopPropagation();\n                                  handleDeleteTest(test._id);\n                                }}\n                              >\n                                <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Description */}\n                          <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2\">{test.description}</p>\n\n                          {/* Stats Grid */}\n                          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                            <div className=\"bg-gradient-to-r from-emerald-50 to-green-50 dark:from-emerald-900/30 dark:to-green-900/30 rounded-lg p-3 border border-emerald-200 dark:border-emerald-700\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-8 h-8 bg-emerald-100 dark:bg-emerald-800 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-emerald-600 dark:text-emerald-400 font-bold text-sm\">{test.questions?.length || 0}</span>\n                                </div>\n                                <div>\n                                  <p className=\"text-xs text-emerald-600 dark:text-emerald-400 font-medium\">Questions</p>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/30 dark:to-orange-900/30 rounded-lg p-3 border border-amber-200 dark:border-amber-700\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-800 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-amber-600 dark:text-amber-400 font-bold text-xs\">⏱️</span>\n                                </div>\n                                <div>\n                                  <p className=\"text-xs text-amber-600 dark:text-amber-400 font-medium\">{test.timeLimit || 60}m</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Passing Score Badge */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/50 dark:to-pink-900/50 px-3 py-1 rounded-full border border-purple-200 dark:border-purple-700\">\n                                <span className=\"text-purple-700 dark:text-purple-300 text-xs font-semibold\">\n                                  Pass: {test.passingScore || 60}%\n                                </span>\n                              </div>\n                            </div>\n                            \n                            {/* Status Indicator */}\n                            <div className=\"flex items-center space-x-1\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full \"></div>\n                              <span className=\"text-xs text-green-600 dark:text-green-400 font-medium\">Active</span>\n                            </div>\n                          </div>\n\n                          {/* Hover Overlay */}\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/0 to-purple-500/0 group-hover:from-blue-500/5 group-hover:to-purple-500/5 rounded-xl transition-all duration-300 pointer-events-none\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-16 px-6\">\n                      <div className=\"relative\">\n                        <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900/50 dark:to-purple-900/50 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                          <BookOpen className=\"h-12 w-12 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full flex items-center justify-center\">\n                          <Plus className=\"h-3 w-3 text-white\" />\n                        </div>\n                      </div>\n                      \n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">No Tests Yet</h3>\n                      <p className=\"text-gray-500 dark:text-gray-400 mb-6 max-w-md mx-auto\">\n                        Create engaging tests to assess your students' knowledge and track their progress\n                      </p>\n                      \n                      <div className=\"space-y-4\">\n                        <Button \n                          onClick={() => setShowTestForm(true)}\n                          className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold px-8 py-3 rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105\"\n                        >\n                          <Plus className=\"h-5 w-5 mr-2\" />\n                          Create Your First Test\n                        </Button>\n                        \n                        <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-400 dark:text-gray-500\">\n                          <div className=\"flex items-center space-x-1\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            <span>Multiple Choice</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                            <span>Timed Tests</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                            <span>Auto Grading</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Grading Tab */}\n          {activeTab === \"grading\" && (\n            <div className=\"space-y-6\">\n              <StudentGrades />\n            </div>\n          )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":85263},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Loader2, BookOpen, Users, Trophy, Zap, GraduationCap } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [registrationMessage, setRegistrationMessage] = useState(\"\");\n\n  // Redirect if already logged in\n  if (!isLoading && user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const onLogin = async (data: LoginFormData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/mongo/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem(\"token\", result.token);\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome back!\",\n        });\n        // Force page reload to ensure authentication state is updated\n        window.location.href = \"/dashboard\";\n      } else {\n        if (result.requiresEmailVerification) {\n          // Redirect to email verification if email not verified\n          setLocation(`/verify-email?userId=${result.userId}&email=${encodeURIComponent(data.username)}`);\n        } else {\n          toast({\n            title: \"Login failed\",\n            description: result.message || \"Invalid credentials\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const onRegister = async (data: RegisterFormData) => {\n    setIsSubmitting(true);\n    setRegistrationMessage(\"\");\n    try {\n      const response = await fetch(\"/api/mongo/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        if (result.requiresEmailVerification) {\n          // Redirect to email verification page with user info\n          setLocation(`/verify-email?userId=${result.userId}&email=${encodeURIComponent(data.email)}`);\n        } else {\n          setRegistrationMessage(result.message);\n          registerForm.reset();\n          toast({\n            title: \"Registration successful\",\n            description: \"Your account is pending approval.\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Registration failed\",\n          description: result.message || \"Registration failed\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleGoogleLogin = () => {\n    // Redirect to Google OAuth endpoint\n    window.location.href = \"/api/auth/google\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n      {/* Header with Logo */}\n      <header className=\"absolute top-0 left-0 right-0 z-10 p-8\">\n        <div className=\"flex items-center space-x-3 cursor-pointer\" onClick={() => setLocation('/')}>\n          <div className=\"w-12 h-12 bg-gradient-to-br from-violet-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <GraduationCap className=\"w-7 h-7 text-white\" />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"text-white font-bold text-xl\">EduPlatform</span>\n            <span className=\"text-purple-300 text-xs\">Learn. Grow. Succeed.</span>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 items-center min-h-screen\">\n          {/* Hero Section */}\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl lg:text-5xl font-bold text-white leading-tight\">\n                Transform Your Learning Journey\n              </h1>\n              <p className=\"text-xl text-slate-300\">\n                Join thousands of students and unlock your potential with our comprehensive learning platform.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-3 p-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl shadow-sm\">\n                <BookOpen className=\"h-8 w-8 text-violet-400\" />\n                <div>\n                  <h3 className=\"font-semibold text-white\">Expert Courses</h3>\n                  <p className=\"text-sm text-slate-300\">Industry-leading content</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl shadow-sm\">\n                <Users className=\"h-8 w-8 text-cyan-400\" />\n                <div>\n                  <h3 className=\"font-semibold text-white\">Community</h3>\n                  <p className=\"text-sm text-slate-300\">Learn with peers</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl shadow-sm\">\n                <Trophy className=\"h-8 w-8 text-yellow-400\" />\n                <div>\n                  <h3 className=\"font-semibold text-white\">Certificates</h3>\n                  <p className=\"text-sm text-slate-300\">Earn recognition</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl shadow-sm\">\n                <Zap className=\"h-8 w-8 text-purple-400\" />\n                <div>\n                  <h3 className=\"font-semibold text-white\">Fast Track</h3>\n                  <p className=\"text-sm text-slate-300\">Accelerated learning</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Authentication Forms */}\n          <div className=\"w-full max-w-lg mx-auto\">\n            <div className=\"relative\">\n              {/* Background glow effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-violet-500/20 to-purple-500/20 rounded-3xl blur-xl\"></div>\n              \n              {/* Main card */}\n              <Card className=\"relative bg-white/95 backdrop-blur-xl border border-white/20 shadow-2xl rounded-3xl overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-white/40 to-white/20\"></div>\n                \n                <CardHeader className=\"relative text-center py-8 px-8\">\n                  <div className=\"w-20 h-20 bg-gradient-to-br from-violet-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                    <BookOpen className=\"w-10 h-10 text-white\" />\n                  </div>\n                  <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n                    Welcome\n                  </CardTitle>\n                  <CardDescription className=\"text-lg text-gray-600 mt-2\">\n                    Continue your learning journey with us\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"relative px-8 pb-8\">\n                {registrationMessage && (\n                  <Alert className=\"mb-4\">\n                    <AlertDescription>{registrationMessage}</AlertDescription>\n                  </Alert>\n                )}\n\n                <Tabs defaultValue=\"login\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2 bg-gray-100/80 backdrop-blur-sm p-1 rounded-2xl\">\n                    <TabsTrigger value=\"login\" className=\"rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-violet-500 data-[state=active]:to-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 font-medium\">\n                      Sign In\n                    </TabsTrigger>\n                    <TabsTrigger value=\"register\" className=\"rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-violet-500 data-[state=active]:to-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-200 font-medium\">\n                      Register\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"login\" className=\"space-y-4\">\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <div className=\"space-y-3\">\n                        <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">Username</Label>\n                        <Input\n                          id=\"username\"\n                          type=\"text\"\n                          placeholder=\"Enter your username\"\n                          className=\"h-12 rounded-xl border-gray-200 bg-gray-50/50 focus:bg-white focus:border-violet-400 focus:ring-violet-400/20 transition-all duration-200\"\n                          {...loginForm.register(\"username\")}\n                        />\n                        {loginForm.formState.errors.username && (\n                          <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <span className=\"w-4 h-4 rounded-full bg-red-100 flex items-center justify-center text-xs\">!</span>\n                            {loginForm.formState.errors.username.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">Password</Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          className=\"h-12 rounded-xl border-gray-200 bg-gray-50/50 focus:bg-white focus:border-violet-400 focus:ring-violet-400/20 transition-all duration-200\"\n                          {...loginForm.register(\"password\")}\n                        />\n                        {loginForm.formState.errors.password && (\n                          <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                            <span className=\"w-4 h-4 rounded-full bg-red-100 flex items-center justify-center text-xs\">!</span>\n                            {loginForm.formState.errors.password.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full h-12 bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n                        disabled={isSubmitting}\n                      >\n                        {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Sign In\n                      </Button>\n                    </form>\n\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-0 flex items-center\">\n                        <span className=\"w-full border-t border-gray-200\" />\n                      </div>\n                      <div className=\"relative flex justify-center text-sm\">\n                        <span className=\"bg-white px-4 text-gray-500 font-medium\">\n                          OR CONTINUE WITH\n                        </span>\n                      </div>\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full h-12 border-gray-200 hover:bg-gray-50 rounded-xl font-medium transition-all duration-200\"\n                      onClick={handleGoogleLogin}\n                      disabled={isSubmitting}\n                    >\n                      <svg className=\"mr-2 h-5 w-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      Sign in with Google\n                    </Button>\n                  </TabsContent>\n\n                  <TabsContent value=\"register\" className=\"space-y-4\">\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"firstName\">First Name</Label>\n                          <Input\n                            id=\"firstName\"\n                            type=\"text\"\n                            {...registerForm.register(\"firstName\")}\n                          />\n                          {registerForm.formState.errors.firstName && (\n                            <p className=\"text-sm text-red-600\">\n                              {registerForm.formState.errors.firstName.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"lastName\">Last Name</Label>\n                          <Input\n                            id=\"lastName\"\n                            type=\"text\"\n                            {...registerForm.register(\"lastName\")}\n                          />\n                          {registerForm.formState.errors.lastName && (\n                            <p className=\"text-sm text-red-600\">\n                              {registerForm.formState.errors.lastName.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          {...registerForm.register(\"email\")}\n                        />\n                        {registerForm.formState.errors.email && (\n                          <p className=\"text-sm text-red-600\">\n                            {registerForm.formState.errors.email.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"registerUsername\">Username</Label>\n                        <Input\n                          id=\"registerUsername\"\n                          type=\"text\"\n                          {...registerForm.register(\"username\")}\n                        />\n                        {registerForm.formState.errors.username && (\n                          <p className=\"text-sm text-red-600\">\n                            {registerForm.formState.errors.username.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"registerPassword\">Password</Label>\n                        <Input\n                          id=\"registerPassword\"\n                          type=\"password\"\n                          {...registerForm.register(\"password\")}\n                        />\n                        {registerForm.formState.errors.password && (\n                          <p className=\"text-sm text-red-600\">\n                            {registerForm.formState.errors.password.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white\"\n                        disabled={isSubmitting}\n                      >\n                        {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Create Account\n                      </Button>\n                    </form>\n\n                    \n\n                    \n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19208},"client/src/pages/course-detail.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { X, Play, Clock, Youtube, BookOpen, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport PdfViewer from \"@/components/pdf-viewer\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { Course, CourseModule, CourseNote } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CourseDetail() {\n  const { id } = useParams();\n  const courseId = id || \"\";\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: course, isLoading: courseLoading, error } = useQuery<any>({\n    queryKey: [`/api/mongo/courses/${courseId}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/mongo/courses/${courseId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to fetch course\");\n      }\n      return response.json();\n    },\n    enabled: !!courseId,\n  });\n\n  // Module completion mutation\n  const completionMutation = useMutation({\n    mutationFn: async ({ moduleId, isCompleted }: { moduleId: string; isCompleted: boolean }) => {\n      const method = isCompleted ? 'POST' : 'DELETE';\n      return await apiRequest(method, `/api/mongo/courses/${courseId}/modules/${moduleId}/complete`, {});\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/mongo/courses/${courseId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/student/enrollments\"] });\n      \n      toast({\n        title: variables.isCompleted ? \"Module Completed\" : \"Module Uncompleted\",\n        description: variables.isCompleted ? \"Great job! Keep up the progress.\" : \"Module marked as incomplete.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update module completion\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Helper function to check if module is completed\n  const isModuleCompleted = (module: any) => {\n    if (!user?.id || !module?.completedBy) return false;\n    return module.completedBy.some((completion: any) => \n      completion.userId === user.id\n    );\n  };\n\n  // Handle module completion toggle\n  const handleModuleToggle = (moduleId: string, currentlyCompleted: boolean) => {\n    completionMutation.mutate({ \n      moduleId, \n      isCompleted: !currentlyCompleted \n    });\n  };\n\n  // For MongoDB structure, modules and notes are embedded in the course document\n  const modules = course?.modules || [];\n  const notes = course?.notes || [];\n  const modulesLoading = courseLoading;\n  const notesLoading = courseLoading;\n\n  if (courseLoading || modulesLoading || notesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n            <div className=\"p-8\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <Skeleton className=\"h-8 w-96 mb-2\" />\n                  <Skeleton className=\"h-6 w-48\" />\n                </div>\n                <Skeleton className=\"h-6 w-6\" />\n              </div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                <div className=\"lg:col-span-2\">\n                  <Skeleton className=\"aspect-video mb-6\" />\n                  <Skeleton className=\"h-32\" />\n                </div>\n                <div className=\"lg:col-span-1\">\n                  <Skeleton className=\"h-64\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = error.message;\n    if (errorMessage.includes('not enrolled')) {\n      return (\n        <div className=\"min-h-screen bg-gray-50\">\n          <Sidebar />\n          <div className=\"lg:ml-64 min-h-screen flex items-center justify-center px-4\">\n            <div className=\"text-center p-8\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <BookOpen className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h2>\n              <p className=\"text-gray-600 mb-4\">You are not enrolled in this course.</p>\n              <p className=\"text-sm text-gray-500\">Please contact an administrator for course access.</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <div className=\"lg:ml-64 min-h-screen flex items-center justify-center px-4\">\n          <div className=\"text-center p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Error Loading Course</h2>\n            <p className=\"text-gray-600\">{errorMessage}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"ml-64 p-4 md:p-8\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Course not found</h2>\n            <p className=\"text-gray-500\">The course you're looking for doesn't exist.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const currentModule = modules?.length > 0 ? modules[0] : null;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      <Sidebar />\n      <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n      <div className=\"bg-white/80 backdrop-blur-sm rounded-2xl shadow-2xl border border-white/20 overflow-hidden relative\">\n        {/* Decorative gradient overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5 pointer-events-none\"></div>\n        \n        <div className=\"relative p-8\">\n          {/* Header with enhanced gradient styling */}\n          <div className=\"flex items-center justify-between mb-8 p-6 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 rounded-xl text-white shadow-lg\">\n            <div>\n              <h2 className=\"text-3xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent\">{course.title}</h2>\n              <p className=\"text-blue-100 mt-2 flex items-center\">\n                <div className=\"w-2 h-2 bg-yellow-400 rounded-full mr-2 animate-pulse\"></div>\n                {currentModule ? `Module: ${currentModule.title}` : \"Course Overview\"}\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/20 transition-all duration-300\">\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Video Player */}\n            <div className=\"lg:col-span-2\">\n              {/* Video Section */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"p-3 bg-gradient-to-r from-red-500 to-red-600 rounded-xl mr-4 shadow-lg\">\n                    <Youtube className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent\">Video Lectures</h3>\n                </div>\n                {modules?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {modules.map((module: any, index: number) => {\n                      const isCompleted = isModuleCompleted(module);\n                      return (\n                        <div key={module._id || index} className=\"relative\">\n                          <Card className={`hover:shadow-2xl hover:scale-[1.02] transition-all duration-300 bg-gradient-to-r from-white via-blue-50/30 to-purple-50/30 border-l-4 ${isCompleted ? 'border-green-500' : 'border-gradient-to-b from-blue-500 to-purple-500'} group overflow-hidden`}>\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/0 via-purple-500/0 to-pink-500/0 group-hover:from-blue-500/5 group-hover:via-purple-500/5 group-hover:to-pink-500/5 transition-all duration-500\"></div>\n                            <CardContent className=\"p-6 relative\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-6\">\n                                  <div className=\"flex-shrink-0\">\n                                    <div className={`w-16 h-16 ${isCompleted ? 'bg-gradient-to-br from-green-500 via-green-600 to-green-700' : 'bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500'} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                                      {isCompleted ? (\n                                        <Check className=\"h-8 w-8 text-white\" />\n                                      ) : (\n                                        <Play className=\"h-8 w-8 text-white\" />\n                                      )}\n                                    </div>\n                                  </div>\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-3 mb-2\">\n                                      <h4 className=\"text-xl font-bold text-gray-900 truncate group-hover:text-blue-700 transition-colors\">\n                                        {index + 1}. {module.title}\n                                      </h4>\n                                      {isCompleted && (\n                                        <div className=\"flex items-center gap-1 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">\n                                          <Check className=\"h-3 w-3\" />\n                                          Completed\n                                        </div>\n                                      )}\n                                    </div>\n                                    {module.description && (\n                                      <div className=\"text-sm text-gray-600 truncate mb-3\">\n                                        {module.description}\n                                      </div>\n                                    )}\n                                    <div className=\"flex items-center text-sm text-gray-500 space-x-4\">\n                                      <div className=\"flex items-center bg-blue-100 rounded-full px-3 py-1\">\n                                        <Play className=\"h-4 w-4 mr-1 text-blue-600\" />\n                                        <span className=\"font-medium text-blue-700\">Video</span>\n                                      </div>\n                                      <div className=\"flex items-center bg-red-100 rounded-full px-3 py-1\">\n                                        <Youtube className=\"h-4 w-4 mr-1 text-red-600\" />\n                                        <span className=\"font-medium text-red-700\">HD Video</span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"flex-shrink-0 flex items-center gap-3\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      id={`module-${module._id}`}\n                                      checked={isCompleted}\n                                      onCheckedChange={(checked) => handleModuleToggle(module._id, isCompleted)}\n                                      disabled={completionMutation.isPending}\n                                      className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                                    />\n                                    <label \n                                      htmlFor={`module-${module._id}`} \n                                      className=\"text-sm font-medium text-gray-700 cursor-pointer select-none\"\n                                    >\n                                      {isCompleted ? 'Completed' : 'Mark Complete'}\n                                    </label>\n                                  </div>\n                                  <Link href={`/video/${courseId}/${module._id}`}>\n                                    <Button variant=\"outline\" size=\"lg\" className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white border-none hover:from-blue-600 hover:to-purple-600 hover:scale-105 transition-all duration-300 shadow-lg\">\n                                      <Play className=\"h-5 w-5 mr-2\" />\n                                      Watch Now\n                                    </Button>\n                                  </Link>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12 bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 rounded-2xl border-2 border-dashed border-gray-300\">\n                    <div className=\"w-20 h-20 bg-gradient-to-br from-gray-400 to-gray-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                      <Youtube className=\"h-10 w-10 text-white\" />\n                    </div>\n                    <div className=\"text-gray-600 font-medium\">No video lectures available</div>\n                    <div className=\"text-sm text-gray-500 mt-1\">Check back later for new content</div>\n                  </div>\n                )}\n              </div>\n\n              {/* Notes Section */}\n              <div className=\"mt-10\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"p-3 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl mr-4 shadow-lg\">\n                    <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  </div>\n                  <h3 className=\"text-2xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent\">PDF Notes & Resources</h3>\n                </div>\n                <div className=\"bg-gradient-to-br from-white via-green-50/30 to-emerald-50/30 rounded-2xl p-6 shadow-xl border border-white/20\">\n                  <PdfViewer notes={notes || []} />\n                </div>\n              </div>\n            </div>\n\n            {/* Course Sidebar */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-white/20 sticky top-8\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg mr-3 shadow-lg\">\n                    <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n                    </svg>\n                  </div>\n                  <h3 className=\"text-xl font-bold bg-gradient-to-r from-purple-700 to-pink-700 bg-clip-text text-transparent\">Course Content</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  {modules?.map((module: any, index: number) => (\n                    <div\n                      key={module._id || index}\n                      className=\"p-4 rounded-xl bg-gradient-to-r from-white to-purple-50/50 border-l-4 border-gradient-to-b from-purple-500 to-pink-500 shadow-md hover:shadow-lg hover:scale-[1.02] transition-all duration-300 group\"\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-bold text-gray-900 group-hover:text-purple-700 transition-colors\">{module.title}</div>\n                          <div className=\"flex items-center mt-2 space-x-3\">\n                            <div className=\"flex items-center bg-purple-100 rounded-full px-2 py-1\">\n                              <span className=\"text-xs font-medium text-purple-700\">Video {index + 1}</span>\n                            </div>\n                            <div className=\"flex items-center bg-pink-100 rounded-full px-2 py-1\">\n                              <Clock className=\"h-3 w-3 mr-1 text-pink-600\" />\n                              <span className=\"text-xs font-medium text-pink-700\">Video</span>\n                            </div>\n                          </div>\n                          {module.description && (\n                            <div className=\"text-xs text-gray-500 mt-2 line-clamp-2\">{module.description}</div>\n                          )}\n                        </div>\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center ml-3 group-hover:scale-110 transition-transform duration-300\">\n                          <span className=\"text-xs font-bold text-white\">{index + 1}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {notes?.length > 0 && (\n                    <div className=\"mt-6 pt-6 border-t border-gradient-to-r from-purple-200 to-pink-200\">\n                      <div className=\"flex items-center mb-4\">\n                        <div className=\"p-2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg mr-3 shadow-lg\">\n                          <svg className=\"h-4 w-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                          </svg>\n                        </div>\n                        <h4 className=\"font-bold text-gray-900\">PDF Resources</h4>\n                      </div>\n                      {notes.map((note: any, index: number) => (\n                        <div key={note._id || index} className=\"p-4 rounded-xl bg-gradient-to-r from-white to-green-50/50 border-l-4 border-gradient-to-b from-green-500 to-emerald-500 shadow-md hover:shadow-lg hover:scale-[1.02] transition-all duration-300 mb-3\">\n                          <div className=\"font-bold text-gray-900\">{note.title}</div>\n                          <div className=\"flex items-center mt-2 space-x-2\">\n                            <div className=\"flex items-center bg-green-100 rounded-full px-2 py-1\">\n                              <svg className=\"h-3 w-3 mr-1 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                              </svg>\n                              <span className=\"text-xs font-medium text-green-700\">PDF</span>\n                            </div>\n                            <div className=\"flex items-center bg-blue-100 rounded-full px-2 py-1\">\n                              <span className=\"text-xs font-medium text-blue-700\">{note.fileSize || 'Download'}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {modules?.length === 0 && notes?.length === 0 && (\n                    <div className=\"text-center py-12 bg-gradient-to-br from-gray-50 via-purple-50 to-pink-50 rounded-2xl border-2 border-dashed border-gray-300\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-gray-400 to-gray-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                        <span className=\"text-2xl\">📚</span>\n                      </div>\n                      <div className=\"text-gray-600 font-medium\">No content available</div>\n                      <div className=\"text-sm text-gray-500 mt-1\">Content will appear here</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":21954},"client/src/pages/courses.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Users, BookOpen, TrendingUp, Star, Clock, FileText, Trophy } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport CourseCard from \"@/components/course-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Pagination, { usePagination } from \"@/components/pagination\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Course, Enrollment } from \"@shared/schema\";\n\ninterface SearchFilters {\n  query: string;\n  category: string;\n  level: string;\n  priceRange: [number, number];\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n}\n\nexport default function Courses() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: '',\n    category: '',\n    level: '',\n    priceRange: [0, 1000],\n    sortBy: 'createdAt',\n    sortOrder: 'desc'\n  });\n  const { user } = useAuth();\n  \n  const userId = user?.id || 2;\n\n  // Pagination state\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(12); // Show 12 courses per page (4x3 grid)\n\n  const { data: courses, isLoading: coursesLoading, error } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/courses\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/mongo/courses\", {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to fetch courses\");\n      }\n      return response.json();\n    },\n  });\n\n  const { data: enrollments, isLoading: enrollmentsLoading } = useQuery<Enrollment[]>({\n    queryKey: [`/api/users/${userId}/enrollments`],\n  });\n\n  // User-specific statistics\n  const { data: userStats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/mongo/user/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/mongo/user/stats\", {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user stats\");\n      }\n      return response.json();\n    },\n  });\n\n  const categories = useMemo(() => {\n    if (!courses) return [\"Programming\", \"Data Science\", \"Mathematics\"];\n    const categorySet = new Set(courses.map((course: any) => course.category).filter(Boolean));\n    const uniqueCategories = Array.from(categorySet);\n    return uniqueCategories.length > 0 ? uniqueCategories : [\"Programming\", \"Data Science\", \"Mathematics\"];\n  }, [courses]);\n\n  const filteredCourses = useMemo(() => {\n    if (!courses) return [];\n    \n    let filtered = courses.filter((course) => {\n      // Legacy search functionality\n      const matchesSearch = !searchTerm || (\n        course.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        course.description?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      const matchesCategory = selectedCategory === \"all\" || \n                             course.category?.toLowerCase() === selectedCategory.toLowerCase();\n      \n      // Enhanced search functionality\n      const matchesAdvancedQuery = !filters.query || (\n        course.title?.toLowerCase().includes(filters.query.toLowerCase()) ||\n        course.description?.toLowerCase().includes(filters.query.toLowerCase()) ||\n        course.instructor?.firstName?.toLowerCase().includes(filters.query.toLowerCase()) ||\n        course.instructor?.lastName?.toLowerCase().includes(filters.query.toLowerCase())\n      );\n      \n      const matchesAdvancedCategory = !filters.category || course.category === filters.category;\n      const matchesLevel = !filters.level || course.level === filters.level;\n      \n      const coursePrice = course.price || 0;\n      const matchesPrice = coursePrice >= filters.priceRange[0] && coursePrice <= filters.priceRange[1];\n      \n      return matchesSearch && matchesCategory && matchesAdvancedQuery && matchesAdvancedCategory && matchesLevel && matchesPrice;\n    });\n    \n    // Enhanced sorting\n    if (filters.sortBy && filters.sortBy !== 'createdAt') {\n      filtered.sort((a, b) => {\n        let aValue, bValue;\n        \n        switch (filters.sortBy) {\n          case 'title':\n            aValue = a.title || '';\n            bValue = b.title || '';\n            break;\n          case 'price':\n            aValue = a.price || 0;\n            bValue = b.price || 0;\n            break;\n          case 'level':\n            const levelOrder = { 'Beginner': 1, 'Intermediate': 2, 'Advanced': 3 };\n            aValue = levelOrder[a.level as keyof typeof levelOrder] || 0;\n            bValue = levelOrder[b.level as keyof typeof levelOrder] || 0;\n            break;\n          case 'duration':\n            aValue = a.duration || 0;\n            bValue = b.duration || 0;\n            break;\n          default:\n            return 0;\n        }\n        \n        if (typeof aValue === 'string') {\n          return filters.sortOrder === 'asc' \n            ? aValue.localeCompare(bValue as string)\n            : (bValue as string).localeCompare(aValue);\n        }\n        \n        return filters.sortOrder === 'asc' \n          ? (aValue as number) - (bValue as number)\n          : (bValue as number) - (aValue as number);\n      });\n    }\n    \n    return filtered;\n  }, [courses, searchTerm, selectedCategory, filters]);\n\n  // Pagination logic\n  const totalPages = Math.ceil(filteredCourses.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedCourses = filteredCourses.slice(startIndex, endIndex);\n\n  // Reset to first page when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, selectedCategory, filters.query, filters.category, filters.level, filters.sortBy]);\n\n  // Reset to first page when items per page changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [itemsPerPage]);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(Math.max(1, Math.min(page, totalPages)));\n    // Smooth scroll to top when page changes\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleItemsPerPageChange = (newItemsPerPage: number) => {\n    setItemsPerPage(newItemsPerPage);\n  };\n\n  const getEnrollmentForCourse = (courseId: any) => {\n    return enrollments?.find(e => e.courseId === courseId);\n  };\n\n  if (coursesLoading || enrollmentsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n          <div className=\"mb-6\">\n            <Skeleton className=\"h-8 w-48 mb-4\" />\n            <div className=\"flex space-x-3\">\n              <Skeleton className=\"h-10 w-40\" />\n              <Skeleton className=\"h-10 w-64\" />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-96\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = error.message;\n    if (errorMessage.includes('pending approval')) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex\">\n          <Sidebar />\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center p-8\">\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Account Pending Approval</h2>\n              <p className=\"text-gray-600 mb-4\">Your account is waiting for admin approval before you can access courses.</p>\n              <p className=\"text-sm text-gray-500\">Please contact an administrator or wait for approval.</p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"min-h-screen bg-gray-50 flex\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Error Loading Courses</h2>\n            <p className=\"text-gray-600\">{errorMessage}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"lg:ml-64 min-h-screen overflow-auto px-4 lg:px-0 pt-16 lg:pt-0\">\n        {/* Header Section */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              Explore Your <span className=\"underline decoration-yellow-400\">Learning Journey</span>\n            </h1>\n            <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n              Discover amazing courses designed to help you master new skills and advance your career\n            </p>\n            \n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\">\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <BookOpen className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">\n                    {statsLoading ? (\n                      <div className=\"animate-pulse bg-white/20 h-8 w-16 rounded mx-auto\"></div>\n                    ) : (\n                      <span className=\"relative\">\n                        {userStats?.totalCourses || courses?.length || 0}\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-yellow-400 rounded-full animate-pulse\"></div>\n                      </span>\n                    )}\n                  </h3>\n                  <p className=\"text-blue-100\">Available Courses</p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <FileText className=\"w-12 h-12 text-green-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">\n                    {statsLoading ? (\n                      <div className=\"animate-pulse bg-white/20 h-8 w-16 rounded mx-auto\"></div>\n                    ) : (\n                      <span className=\"relative\">\n                        {userStats?.availableTests || 0}\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      </span>\n                    )}\n                  </h3>\n                  <p className=\"text-blue-100\">Available Tests</p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <Trophy className=\"w-12 h-12 text-purple-400 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">\n                    {statsLoading ? (\n                      <div className=\"animate-pulse bg-white/20 h-8 w-12 rounded mx-auto\"></div>\n                    ) : (\n                      <span className=\"relative\">\n                        {userStats?.averageScore || 0}%\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-purple-400 rounded-full animate-pulse\"></div>\n                      </span>\n                    )}\n                  </h3>\n                  <p className=\"text-blue-100\">\n                    {user?.role === 'admin' ? 'Students Avg Score' : 'Your Avg Score'}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"p-8\">\n          {/* Search & Filter Bar */}\n          <div className=\"mb-8 bg-gradient-to-r from-violet-500/10 via-purple-500/10 to-indigo-500/10 backdrop-blur-sm rounded-3xl border border-white/20 shadow-2xl overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex flex-col lg:flex-row gap-6 justify-between items-center\">\n                  {/* Header Section */}\n                  <div className=\"text-center lg:text-left space-y-3\">\n                    <div className=\"flex items-center justify-center lg:justify-start space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-violet-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                        <BookOpen className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 via-purple-900 to-indigo-900 dark:from-white dark:via-purple-100 dark:to-indigo-100 bg-clip-text text-transparent\">\n                          Course Catalog\n                        </h2>\n                        <p className=\"text-gray-600 dark:text-gray-300 font-medium\">\n                          Discover courses that will transform your career\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Search & Filter Controls */}\n                  <div className=\"flex flex-col sm:flex-row gap-4 w-full lg:w-auto\">\n                    {/* Category Filter */}\n                    <div className=\"relative\">\n                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                        <SelectTrigger className=\"w-full sm:w-56 h-12 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-2 border-white/30 dark:border-gray-600/30 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 focus:border-violet-500 dark:focus:border-violet-400\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-gradient-to-r from-violet-500 to-purple-600 rounded-full\"></div>\n                            <SelectValue />\n                          </div>\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-white/95 dark:bg-gray-800/95 backdrop-blur-lg border-white/30 dark:border-gray-600/30 rounded-xl shadow-2xl\">\n                          <SelectItem value=\"all\" className=\"hover:bg-violet-50 dark:hover:bg-violet-900/30\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                              <span>All Categories</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"programming\" className=\"hover:bg-blue-50 dark:hover:bg-blue-900/30\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              <span>Programming</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"data science\" className=\"hover:bg-green-50 dark:hover:bg-green-900/30\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              <span>Data Science</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"mathematics\" className=\"hover:bg-orange-50 dark:hover:bg-orange-900/30\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                              <span>Mathematics</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {/* Search Input */}\n                    <div className=\"relative group\">\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-violet-500/20 to-purple-500/20 rounded-xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-violet-500 dark:text-violet-400 z-10\" />\n                        <Input\n                          placeholder=\"Search your next adventure...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"pl-12 pr-4 h-12 w-full sm:w-80 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-2 border-white/30 dark:border-gray-600/30 rounded-xl shadow-lg hover:shadow-xl focus:shadow-2xl transition-all duration-200 focus:border-violet-500 dark:focus:border-violet-400 text-gray-900 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400\"\n                        />\n                        {/* Search Button Enhancement */}\n                        {searchTerm && (\n                          <button\n                            onClick={() => setSearchTerm(\"\")}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-gray-200 dark:bg-gray-600 rounded-full flex items-center justify-center hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors duration-200\"\n                          >\n                            <span className=\"text-xs\">×</span>\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Active Filters Display */}\n                {(searchTerm || selectedCategory !== \"all\") && (\n                  <div className=\"mt-6 pt-6 border-t border-white/20 dark:border-gray-600/20\">\n                    <div className=\"flex flex-wrap items-center gap-2\">\n                      <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">Active filters:</span>\n                      {selectedCategory !== \"all\" && (\n                        <div className=\"bg-violet-100 dark:bg-violet-900/30 text-violet-800 dark:text-violet-200 px-3 py-1 rounded-full text-sm font-medium flex items-center space-x-1\">\n                          <span>{selectedCategory}</span>\n                          <button\n                            onClick={() => setSelectedCategory(\"all\")}\n                            className=\"ml-1 hover:bg-violet-200 dark:hover:bg-violet-800 rounded-full w-4 h-4 flex items-center justify-center text-xs\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      )}\n                      {searchTerm && (\n                        <div className=\"bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200 px-3 py-1 rounded-full text-sm font-medium flex items-center space-x-1\">\n                          <span>\"{searchTerm}\"</span>\n                          <button\n                            onClick={() => setSearchTerm(\"\")}\n                            className=\"ml-1 hover:bg-purple-200 dark:hover:bg-purple-800 rounded-full w-4 h-4 flex items-center justify-center text-xs\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </div>\n          </div>\n\n          {/* Results Summary */}\n          {filteredCourses.length > 0 && (\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600 dark:text-gray-400\" data-testid=\"results-summary\">\n                Found {filteredCourses.length} course{filteredCourses.length !== 1 ? 's' : ''}\n                {(searchTerm || selectedCategory !== \"all\" || filters.query || filters.category || filters.level) && ' matching your criteria'}\n              </p>\n            </div>\n          )}\n\n          {/* Course Grid */}\n          {filteredCourses.length > 0 ? (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\" data-testid=\"courses-grid\">\n                {paginatedCourses.map((course) => (\n                  <CourseCard \n                    key={course._id || course.id} \n                    course={course} \n                    enrollment={getEnrollmentForCourse(course.id)}\n                    data-testid={`course-card-${course._id || course.id}`}\n                  />\n                ))}\n              </div>\n\n              {/* Pagination */}\n              {filteredCourses.length > itemsPerPage && (\n                <div className=\"mt-12\">\n                  <Pagination\n                    currentPage={currentPage}\n                    totalPages={totalPages}\n                    totalItems={filteredCourses.length}\n                    itemsPerPage={itemsPerPage}\n                    onPageChange={handlePageChange}\n                    onItemsPerPageChange={handleItemsPerPageChange}\n                    className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\"\n                  />\n                </div>\n              )}\n            </>\n          ) : (\n            <Card className=\"text-center py-16\">\n              <CardContent>\n                <BookOpen className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No courses found</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  {searchTerm || selectedCategory !== \"all\" \n                    ? \"Try adjusting your search criteria\" \n                    : \"No courses are currently available\"}\n                </p>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setSelectedCategory(\"all\");\n                  }}\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                >\n                  Clear Filters\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":23385},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatTimeAgo } from \"@/lib/utils\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  Users, \n  Clock,\n  BookOpen,\n  Award,\n  Target,\n  TrendingUp,\n  Activity,\n  GraduationCap,\n  Calendar,\n  FileText,\n  Star,\n  Zap,\n  RefreshCw,\n  PlayCircle,\n  CheckCircle,\n  BarChart3\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport type { RecentActivity } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const userId = user?.id;\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [`/api/users/${userId}/stats`],\n    enabled: !!userId,\n  });\n\n  const { data: activities, isLoading: activitiesLoading } = useQuery<RecentActivity[]>({\n    queryKey: [`/api/users/${userId}/activities`],\n    enabled: !!userId,\n  });\n\n  // Data queries for student dashboard\n  const { data: enrollments, isLoading: enrollmentsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/student/enrollments\"],\n    enabled: !!userId,\n  });\n\n\n\n  const { data: courses, isLoading: coursesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/courses\"],\n    enabled: !!userId,\n  });\n\n  const { data: studentResults, isLoading: resultsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/student/my-results\"],\n    enabled: !!userId && user?.role === 'student',\n  });\n\n  // Get user dashboard stats\n  const { data: dashboardStats, isLoading: dashboardStatsLoading } = useQuery({\n    queryKey: [\"/api/mongo/user/stats\"],\n    enabled: !!userId,\n  });\n\n  // Manual refresh function for dashboard data\n  const handleRefresh = () => {\n    if (!userId) return;\n    \n    queryClient.invalidateQueries({ queryKey: [`/api/users/${userId}/stats`] });\n    queryClient.invalidateQueries({ queryKey: [`/api/users/${userId}/activities`] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/mongo/courses\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/mongo/user/stats\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/mongo/student/enrollments\"] });\n    if (user?.role === 'student') {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/student/my-results\"] });\n    }\n  };\n\n  // Calculate enhanced dashboard metrics with real-time updates\n  const dashboardData = user?.role === 'admin' ? {\n    // Admin-specific metrics\n    totalCourses: dashboardStats?.totalCourses || courses?.length || 0,\n    totalStudents: dashboardStats?.totalStudents || 0,\n    availableTests: dashboardStats?.availableTests || 0,\n    averageScore: dashboardStats?.averageScore || 0,\n    overallProgressAverage: dashboardStats?.overallProgressAverage || 0,\n    studentProgressData: dashboardStats?.studentProgressData || [],\n  } : {\n    // Student-specific metrics\n    totalEnrolled: enrollments?.length || 0,\n    completedCourses: enrollments?.filter(e => (e.progress || 0) >= 100)?.length || 0,\n    inProgressCourses: enrollments?.filter(e => (e.progress || 0) > 0 && (e.progress || 0) < 100)?.length || 0,\n    \n    // Performance metrics with synchronized normalized scoring\n    totalTests: studentResults?.length || 0,\n    averageScore: dashboardStats?.averageScore || (studentResults?.length ? \n      Math.round(\n        studentResults.reduce((sum: number, test: any) => sum + ((test.score || 0) / (test.maxScore || 100) * 100), 0) / studentResults.length\n      ) : 0),\n    \n    // Progress tracking\n    overallProgress: enrollments?.length ? \n      Math.round(enrollments.reduce((sum, e) => sum + (e.progress || 0), 0) / enrollments.length) : 0,\n    \n    // Recent activity metrics\n    recentlyEnrolled: enrollments?.filter(e => {\n      const enrollDate = new Date(e.createdAt || e.enrolledAt || Date.now());\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n      return enrollDate >= weekAgo;\n    })?.length || 0,\n  };\n\n  if (statsLoading || enrollmentsLoading || coursesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8\">\n          <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-blue-50/50 via-indigo-50/50 to-purple-50/50 dark:from-blue-900/20 dark:via-indigo-900/20 dark:to-purple-900/20 mb-8\">\n            <div className=\"h-1 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500\" />\n            <div className=\"p-8\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center shadow-lg\">\n                  <Activity className=\"w-8 h-8 text-white animate-spin\" />\n                </div>\n                <div>\n                  <Skeleton className=\"h-8 w-64 mb-2\" />\n                  <Skeleton className=\"h-6 w-96\" />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n\n      {/* Main Content */}\n      <main className=\"lg:ml-64 min-h-screen overflow-auto px-4 lg:px-0\">\n        <div className=\"p-8 space-y-8\">\n          {/* Enhanced Welcome Section */}\n          <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-blue-50/50 via-indigo-50/50 to-purple-50/50 dark:from-blue-900/20 dark:via-indigo-900/20 dark:to-purple-900/20\">\n            <div className=\"h-1 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500\" />\n            <div className=\"bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-sm\">\n              <div className=\"p-8\">\n                <div className=\"flex flex-col lg:flex-row gap-6 justify-between items-start lg:items-center\">\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"w-20 h-20 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center shadow-lg\">\n                      <GraduationCap className=\"w-10 h-10 text-white\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                        Welcome back, {user?.firstName}! 🎓\n                      </h1>\n                      <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                        Continue your learning journey and track your progress in real-time\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Manual Refresh Indicator & Actions */}\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2 bg-blue-50 dark:bg-blue-900/20 px-4 py-2 rounded-xl border border-blue-200 dark:border-blue-800\">\n                      <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n                      <span className=\"text-blue-800 dark:text-blue-200 text-sm font-medium\">Manual Refresh</span>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={handleRefresh}\n                      className=\"bg-white/80 hover:bg-white border-gray-200 hover:border-gray-300\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                    <Button \n                      className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white\"\n                      onClick={() => setLocation('/courses')}\n                    >\n                      <BookOpen className=\"w-4 h-4 mr-2\" />\n                      Browse Courses\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Manual Dashboard Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {user?.role === 'admin' ? (\n              <>\n                {/* Total Courses */}\n                <Card className=\"border-l-4 border-l-blue-500 hover:shadow-lg transition-shadow duration-300 relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Courses</p>\n                        <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{dashboardData.totalCourses}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <BookOpen className=\"w-4 h-4 text-blue-500\" />\n                          <span className=\"text-sm text-gray-500\">Platform-wide</span>\n                        </div>\n                      </div>\n                      <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-xl flex items-center justify-center\">\n                        <BookOpen className=\"w-6 h-6 text-blue-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Total Students */}\n                <Card className=\"border-l-4 border-l-green-500 hover:shadow-lg transition-shadow duration-300 relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Students</p>\n                        <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{dashboardData.totalStudents}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Users className=\"w-4 h-4 text-green-500\" />\n                          <span className=\"text-sm text-gray-500\">Active learners</span>\n                        </div>\n                      </div>\n                      <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-xl flex items-center justify-center\">\n                        <Users className=\"w-6 h-6 text-green-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Overall Progress Average */}\n                <Card className=\"border-l-4 border-l-purple-500 hover:shadow-lg transition-shadow duration-300 relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Progress Average</p>\n                        <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{dashboardData.overallProgressAverage}%</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Target className=\"w-4 h-4 text-purple-500\" />\n                          <span className=\"text-sm text-gray-500\">All students</span>\n                        </div>\n                      </div>\n                      <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/20 rounded-xl flex items-center justify-center\">\n                        <Target className=\"w-6 h-6 text-purple-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Average Test Score */}\n                <Card className=\"border-l-4 border-l-orange-500 hover:shadow-lg transition-shadow duration-300 relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Average Test Score</p>\n                        <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">{dashboardData.averageScore}%</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Award className=\"w-4 h-4 text-orange-500\" />\n                          <span className=\"text-sm text-gray-500\">Platform-wide</span>\n                        </div>\n                      </div>\n                      <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900/20 rounded-xl flex items-center justify-center\">\n                        <Award className=\"w-6 h-6 text-orange-600\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <>\n                {/* Enrolled Courses */}\n                <Card className=\"border-l-4 border-l-blue-500 hover:shadow-lg transition-shadow duration-300 relative\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"absolute top-2 right-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full \" />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Enrolled Courses</p>\n                    <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      {dashboardData.totalEnrolled}\n                    </p>\n                    <p className=\"text-xs text-blue-600 dark:text-blue-400 flex items-center mt-1\">\n                      <TrendingUp className=\"w-3 h-3 mr-1\" />\n                      +{dashboardData.recentlyEnrolled} this week\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center\">\n                    <BookOpen className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Completed Courses */}\n            <Card className=\"border-l-4 border-l-green-500 hover:shadow-lg transition-shadow duration-300 relative\">\n              <CardContent className=\"p-6\">\n                <div className=\"absolute top-2 right-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full \" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Completed</p>\n                    <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      {dashboardData.completedCourses}\n                    </p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400 flex items-center mt-1\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      {dashboardData.totalEnrolled > 0 ? Math.round((dashboardData.completedCourses / dashboardData.totalEnrolled) * 100) : 0}% completion rate\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-xl flex items-center justify-center\">\n                    <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Test Performance */}\n            <Card className=\"border-l-4 border-l-purple-500 hover:shadow-lg transition-shadow duration-300 relative\">\n              <CardContent className=\"p-6\">\n                <div className=\"absolute top-2 right-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full \" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Test Score Avg</p>\n                    <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      {dashboardData.averageScore}%\n                    </p>\n                    <p className=\"text-xs text-purple-600 dark:text-purple-400 flex items-center mt-1\">\n                      <Target className=\"w-3 h-3 mr-1\" />\n                      {dashboardData.totalTests} tests completed\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center\">\n                    <Award className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Overall Progress */}\n            <Card className=\"border-l-4 border-l-orange-500 hover:shadow-lg transition-shadow duration-300 relative\">\n              <CardContent className=\"p-6\">\n                <div className=\"absolute top-2 right-2\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full \" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Overall Progress</p>\n                    <p className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      {dashboardData.overallProgress}%\n                    </p>\n                    <p className=\"text-xs text-orange-600 dark:text-orange-400 flex items-center mt-1\">\n                      <Activity className=\"w-3 h-3 mr-1\" />\n                      Manual tracking\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-xl flex items-center justify-center\">\n                    <BarChart3 className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n              </>\n            )}\n          </div>\n\n          {/* Main Dashboard Content */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Left Column - Course Progress */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              {user?.role === 'admin' ? (\n                <>\n                  {/* Admin: Student Progress Overview */}\n                  <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                          <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                          <span>Student Progress Overview</span>\n                        </CardTitle>\n                        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400 flex items-center space-x-1\">\n                          <RefreshCw className=\"w-3 h-3 mr-1\" />\n                          Manual\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-6\">\n                        {dashboardData.studentProgressData && dashboardData.studentProgressData.length > 0 ? (\n                          dashboardData.studentProgressData.slice(0, 8).map((student, index) => (\n                            <div key={index} className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-xl\">\n                              <div className=\"flex items-center justify-between mb-3\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                                    <Users className=\"w-5 h-5 text-white\" />\n                                  </div>\n                                  <div>\n                                    <p className=\"font-medium text-gray-900 dark:text-white\">\n                                      {student.name}\n                                    </p>\n                                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                      {student.testsCompleted} tests completed\n                                    </p>\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"font-bold text-gray-900 dark:text-white\">\n                                    {student.progress}%\n                                  </p>\n                                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                    Course Progress\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Course Progress</span>\n                                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{student.progress}%</span>\n                              </div>\n                              <Progress value={student.progress} className=\"h-2 mb-2\" />\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Test Average</span>\n                                <span className=\"text-sm font-medium text-purple-600 dark:text-purple-400\">{student.averageScore}%</span>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-center py-12 text-gray-500\">\n                            <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                            <p className=\"text-lg font-medium\">No student progress data</p>\n                            <p className=\"text-sm\">Students will appear here once they start taking courses</p>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Admin: Test Results Summary */}\n                  <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                    <CardHeader>\n                      <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                        <Award className=\"w-5 h-5 text-purple-600\" />\n                        <span>Platform Test Performance</span>\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Overall student test results across all courses</p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-6 rounded-xl text-center\">\n                        <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                          <Award className=\"w-8 h-8 text-white\" />\n                        </div>\n                        <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                          {dashboardData.averageScore}%\n                        </h3>\n                        <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                          Average test score across all students\n                        </p>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div className=\"bg-white/50 dark:bg-black/20 p-3 rounded-lg\">\n                            <p className=\"font-medium text-gray-900 dark:text-white\">{dashboardData.totalStudents}</p>\n                            <p className=\"text-gray-600 dark:text-gray-400\">Total Students</p>\n                          </div>\n                          <div className=\"bg-white/50 dark:bg-black/20 p-3 rounded-lg\">\n                            <p className=\"font-medium text-gray-900 dark:text-white\">{dashboardData.availableTests}</p>\n                            <p className=\"text-gray-600 dark:text-gray-400\">Available Tests</p>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              ) : (\n                <>\n                  {/* Student: Course Progress Overview */}\n                  <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                        <BookOpen className=\"w-5 h-5 text-blue-600\" />\n                        <span>My Course Progress</span>\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Track your learning journey</p>\n                    </div>\n                    <Badge className=\"bg-blue-100 text-blue-800 border-blue-300\">\n                      <RefreshCw className=\"w-3 h-3 mr-1\" />\n                      Manual\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {enrollments && enrollments.length > 0 ? (\n                      enrollments.slice(0, 5).map((enrollment, index) => {\n                        const course = courses?.find(c => c._id === enrollment.courseId);\n                        return (\n                          <div key={enrollment.id || index} className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-xl\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                                  <PlayCircle className=\"w-5 h-5 text-white\" />\n                                </div>\n                                <div>\n                                  <p className=\"font-medium text-gray-900 dark:text-white\">\n                                    {course?.title || 'Unknown Course'}\n                                  </p>\n                                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                    {course?.category || 'General'}\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-gray-900 dark:text-white\">\n                                  {enrollment.progress || 0}%\n                                </p>\n                                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                  {enrollment.progress >= 100 ? 'Completed' : 'In Progress'}\n                                </p>\n                              </div>\n                            </div>\n                            <Progress value={enrollment.progress || 0} className=\"h-2\" />\n                          </div>\n                        );\n                      })\n                    ) : (\n                      <div className=\"text-center py-12 text-gray-500\">\n                        <BookOpen className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                        <p className=\"text-lg font-medium\">No enrollments yet</p>\n                        <p className=\"text-sm\">Start your learning journey by enrolling in courses</p>\n                        <Button \n                          className=\"mt-4 bg-gradient-to-r from-blue-500 to-purple-600\"\n                          onClick={() => setLocation('/courses')}\n                        >\n                          Browse Courses\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Test Results Summary */}\n              <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                    <Award className=\"w-5 h-5 text-purple-600\" />\n                    <span>Recent Test Performance</span>\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Your latest assessment results</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {studentResults && studentResults.length > 0 ? (\n                      // Group test results by course\n                      Object.entries(\n                        studentResults.reduce((acc: any, result: any) => {\n                          const courseTitle = result.course?.title || 'Unknown Course';\n                          if (!acc[courseTitle]) {\n                            acc[courseTitle] = {\n                              course: result.course,\n                              testResults: []\n                            };\n                          }\n                          acc[courseTitle].testResults.push(result);\n                          return acc;\n                        }, {})\n                      ).slice(0, 3).map(([courseTitle, courseData]: [string, any], index) => (\n                        <div key={index} className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-4 rounded-xl\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                                <FileText className=\"w-5 h-5 text-white\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-gray-900 dark:text-white\">\n                                  {courseTitle}\n                                </p>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                  {courseData.testResults.length} tests completed\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-bold text-gray-900 dark:text-white\">\n                                {courseData.testResults.length ? \n                                  Math.round(courseData.testResults.reduce((sum: number, test: any) => sum + ((test.score || 0) / (test.maxScore || 100) * 100), 0) / courseData.testResults.length) \n                                  : 0}%\n                              </p>\n                              <p className=\"text-xs text-purple-600 dark:text-purple-400\">\n                                Average Score\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <Award className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                        <p>No test results available yet</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n                </>\n              )}\n            </div>\n\n            {/* Right Column - Quick Actions & Info */}\n            <div className=\"space-y-6\">\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-bold text-gray-900 dark:text-white\">Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <Button \n                    className=\"w-full bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white\"\n                    onClick={() => setLocation('/courses')}\n                  >\n                    <BookOpen className=\"w-4 h-4 mr-2\" />\n                    Browse All Courses\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => setLocation('/test-results')}\n                  >\n                    <Award className=\"w-4 h-4 mr-2\" />\n                    View Test Results\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Statistics Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                    {user?.role === 'admin' ? 'Platform Stats' : 'Learning Stats'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {user?.role === 'admin' ? (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Total Courses</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.totalCourses}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Total Students</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.totalStudents}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Progress Average</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.overallProgressAverage}%</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Test Average</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.averageScore}%</span>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Total Courses</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{courses?.length || 0}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Enrolled</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.totalEnrolled}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Completed</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.completedCourses}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Average Score</span>\n                        <span className=\"font-bold text-gray-900 dark:text-white\">{dashboardData.averageScore}%</span>\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Achievement Badge */}\n              <Card className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800\">\n                <CardContent className=\"p-6 text-center\">\n                  <Star className=\"w-12 h-12 text-yellow-500 mx-auto mb-4\" />\n                  <h3 className=\"font-bold text-gray-900 dark:text-white mb-2\">\n                    {user?.role === 'admin' ? 'Platform Excellence!' : 'Keep Learning!'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {user?.role === 'admin' \n                      ? 'Your platform is thriving! Monitor student progress and continue growing the learning community.'\n                      : \"You're making great progress. Complete more courses to unlock achievements!\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Manual Refresh Status */}\n          <div className=\"mt-8 flex items-center justify-center space-x-4\">\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 border border-gray-200 dark:border-gray-700\">\n              <Activity className=\"w-4 h-4 text-blue-500\" />\n              <span className=\"text-gray-700 dark:text-gray-300 text-sm font-medium\">Manual Refresh</span>\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n            </div>\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 border border-gray-200 dark:border-gray-700\">\n              <RefreshCw className=\"w-4 h-4 text-gray-500\" />\n              <span className=\"text-gray-700 dark:text-gray-300 text-sm font-medium\">Click to refresh</span>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":39493},"client/src/pages/email-verification.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Loader2, Mail, CheckCircle, Clock, RotateCcw } from \"lucide-react\";\n\nconst otpSchema = z.object({\n  otp: z.string().length(6, \"OTP must be exactly 6 digits\").regex(/^\\d+$/, \"OTP must contain only numbers\"),\n});\n\ntype OTPFormData = z.infer<typeof otpSchema>;\n\nexport default function EmailVerification() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [isVerified, setIsVerified] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [userId, setUserId] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const form = useForm<OTPFormData>({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      otp: \"\",\n    },\n  });\n\n  useEffect(() => {\n    // Get user info from URL params or localStorage\n    const urlParams = new URLSearchParams(window.location.search);\n    const userIdParam = urlParams.get('userId');\n    const emailParam = urlParams.get('email');\n    \n    if (userIdParam && emailParam) {\n      setUserId(userIdParam);\n      setEmail(emailParam);\n    } else {\n      // Redirect to auth page if no verification data\n      setLocation(\"/auth\");\n    }\n  }, [setLocation]);\n\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [countdown]);\n\n  const onSubmit = async (data: OTPFormData) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/mongo/auth/verify-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId,\n          otp: data.otp,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        setIsVerified(true);\n        toast({\n          title: \"Email verified!\",\n          description: \"Your account is now pending admin approval.\",\n        });\n        \n        // Redirect to login after 3 seconds\n        setTimeout(() => {\n          setLocation(\"/auth\");\n        }, 3000);\n      } else {\n        toast({\n          title: \"Verification failed\",\n          description: result.message || \"Invalid verification code\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Verification failed\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleResendOTP = async () => {\n    setIsResending(true);\n    try {\n      const response = await fetch(\"/api/mongo/auth/resend-otp\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ userId }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Code sent!\",\n          description: \"A new verification code has been sent to your email.\",\n        });\n        setCountdown(60); // 60 second cooldown\n        form.reset();\n      } else {\n        toast({\n          title: \"Failed to resend\",\n          description: result.message || \"Failed to send verification code\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Failed to resend\",\n        description: \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  if (isVerified) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"relative bg-white/95 backdrop-blur-xl border border-white/20 shadow-2xl rounded-3xl overflow-hidden\">\n            <CardHeader className=\"text-center py-8\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <CheckCircle className=\"w-10 h-10 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                Email Verified!\n              </CardTitle>\n              <CardDescription className=\"text-lg text-gray-600 mt-2\">\n                Your account is now pending admin approval\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center pb-8\">\n              <p className=\"text-gray-600 mb-4\">\n                You'll receive an email notification once your account is approved.\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                Redirecting to login page...\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"relative bg-white/95 backdrop-blur-xl border border-white/20 shadow-2xl rounded-3xl overflow-hidden\">\n          <CardHeader className=\"text-center py-8\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-violet-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg\">\n              <Mail className=\"w-10 h-10 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Verify Your Email\n            </CardTitle>\n            <CardDescription className=\"text-lg text-gray-600 mt-2\">\n              We've sent a verification code to\n            </CardDescription>\n            <p className=\"font-medium text-violet-600\">{email}</p>\n          </CardHeader>\n          \n          <CardContent className=\"px-8 pb-8\">\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"otp\" className=\"text-sm font-medium text-gray-700\">\n                  Enter 6-digit verification code\n                </Label>\n                <Input\n                  id=\"otp\"\n                  type=\"text\"\n                  placeholder=\"000000\"\n                  maxLength={6}\n                  className=\"h-14 text-center text-2xl font-mono tracking-widest rounded-xl border-gray-200 bg-gray-50/50 focus:bg-white focus:border-violet-400 focus:ring-violet-400/20\"\n                  {...form.register(\"otp\")}\n                  autoComplete=\"one-time-code\"\n                />\n                {form.formState.errors.otp && (\n                  <p className=\"text-sm text-red-500 flex items-center gap-1\">\n                    <span className=\"w-4 h-4 rounded-full bg-red-100 flex items-center justify-center text-xs\">!</span>\n                    {form.formState.errors.otp.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Verify Email\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 mb-3\">\n                Didn't receive the code?\n              </p>\n              <Button\n                variant=\"outline\"\n                onClick={handleResendOTP}\n                disabled={isResending || countdown > 0}\n                className=\"text-violet-600 border-violet-200 hover:bg-violet-50\"\n              >\n                {isResending ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : countdown > 0 ? (\n                  <Clock className=\"mr-2 h-4 w-4\" />\n                ) : (\n                  <RotateCcw className=\"mr-2 h-4 w-4\" />\n                )}\n                {countdown > 0 ? `Resend in ${countdown}s` : \"Resend Code\"}\n              </Button>\n            </div>\n\n            <div className=\"mt-6 pt-6 border-t border-gray-200\">\n              <p className=\"text-xs text-gray-500 text-center\">\n                The verification code will expire in 10 minutes\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9253},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { GraduationCap, BookOpen, Award, Users, Play, Rocket, Star, ArrowRight, TrendingUp, Target, Brain, Zap, ChevronRight, Check, Shield, Clock, Globe } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-1/4 -right-32 w-64 h-64 bg-gradient-to-r from-violet-500 to-purple-600 rounded-full opacity-20 animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 -left-32 w-96 h-96 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full opacity-10 animate-pulse\"></div>\n        <div className=\"absolute top-1/3 left-1/4 w-32 h-32 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full opacity-30 animate-bounce\"></div>\n        <div className=\"absolute top-3/4 right-1/4 w-24 h-24 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full opacity-25 animate-pulse\"></div>\n        \n        {/* Floating Elements */}\n        <div className=\"absolute top-20 right-20 w-4 h-4 bg-white rounded-full opacity-60 animate-float\"></div>\n        <div className=\"absolute top-40 right-40 w-2 h-2 bg-yellow-400 rounded-full opacity-80 animate-float animation-delay-1000\"></div>\n        <div className=\"absolute top-60 left-20 w-3 h-3 bg-purple-400 rounded-full opacity-70 animate-float animation-delay-2000\"></div>\n        \n        {/* Grid Pattern */}\n        <div className=\"absolute inset-0 opacity-5\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`\n        }}></div>\n      </div>\n\n      {/* Header Navigation */}\n      <nav className=\"relative z-10 flex items-center justify-between px-8 py-6 backdrop-blur-sm bg-white/5 border-b border-white/10\">\n        <div className=\"flex items-center space-x-3 cursor-pointer\" onClick={() => setLocation('/')}>\n          <div className=\"w-12 h-12 bg-gradient-to-br from-violet-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <GraduationCap className=\"w-7 h-7 text-white\" />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"text-white font-bold text-xl\">EduPlatform</span>\n            <span className=\"text-purple-300 text-xs\">Learn. Grow. Succeed.</span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"outline\" \n            className=\"text-white border-white/30 bg-white/5 hover:bg-white/10 backdrop-blur-sm transition-all duration-200\"\n            onClick={() => setLocation('/auth')}\n          >\n            Login\n          </Button>\n          <Button \n            className=\"bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white shadow-lg transition-all duration-200 hover:shadow-xl\"\n            onClick={() => setLocation('/auth')}\n          >\n            Get Started\n          </Button>\n        </div>\n      </nav>\n\n      <div className=\"relative z-10 container mx-auto px-8 pt-20 pb-24\">\n        {/* Hero Section */}\n        <div className=\"bg-gradient-to-r from-violet-500/10 to-purple-500/10 backdrop-blur-sm rounded-3xl p-12 border border-white/10 mb-16\">\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            {/* Left Content */}\n            <div className=\"space-y-8\">\n              <div className=\"flex items-center space-x-2 mb-6\">\n                <Badge className=\"bg-gradient-to-r from-violet-500 to-purple-600 text-white border-none px-4 py-2\">\n                  <Star className=\"w-4 h-4 mr-1\" />\n                  #1 Learning Platform\n                </Badge>\n              </div>\n              \n              <h1 className=\"text-6xl lg:text-7xl font-bold text-white leading-tight\">\n                Master New\n                <span className=\"block bg-gradient-to-r from-violet-400 to-purple-400 bg-clip-text text-transparent\">\n                  Skills Today\n                </span>\n              </h1>\n              \n              <p className=\"text-xl text-slate-300 max-w-lg leading-relaxed\">\n                Join over 10,000+ learners worldwide. Access expert-led courses, earn certificates, and advance your career with our comprehensive learning platform.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 pt-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white px-8 py-6 text-lg rounded-2xl shadow-2xl transition-all duration-200 hover:shadow-purple-500/25\"\n                  onClick={() => setLocation('/auth')}\n                >\n                  <Rocket className=\"mr-2 h-5 w-5\" />\n                  Start Learning Now\n                </Button>\n              </div>\n\n              {/* Trust Indicators */}\n              <div className=\"flex items-center space-x-8 pt-8\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex -space-x-2\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-violet-500 to-purple-600 rounded-full border-2 border-white\"></div>\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full border-2 border-white\"></div>\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full border-2 border-white\"></div>\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-full border-2 border-white flex items-center justify-center text-xs text-white font-bold\">\n                      +10K\n                    </div>\n                  </div>\n                  <span className=\"text-slate-300 text-sm\">Trusted by learners</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex text-yellow-400\">\n                    <Star className=\"w-4 h-4 fill-current\" />\n                    <Star className=\"w-4 h-4 fill-current\" />\n                    <Star className=\"w-4 h-4 fill-current\" />\n                    <Star className=\"w-4 h-4 fill-current\" />\n                    <Star className=\"w-4 h-4 fill-current\" />\n                  </div>\n                  <span className=\"text-slate-300 text-sm\">4.9/5 Rating</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Content - Enhanced Hero Visual */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-violet-400 via-purple-400 to-pink-400 rounded-3xl opacity-30 blur-3xl transform rotate-6 animate-pulse\"></div>\n              <div className=\"relative\">\n                <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/20 shadow-2xl\">\n                  <div className=\"grid grid-cols-2 gap-6 mb-8\">\n                    <div className=\"bg-gradient-to-br from-violet-500 to-purple-600 rounded-xl p-4 text-center\">\n                      <BookOpen className=\"w-8 h-8 text-white mx-auto mb-2\" />\n                      <div className=\"text-white font-bold text-lg\">1,000+</div>\n                      <div className=\"text-purple-100 text-sm\">Courses</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl p-4 text-center\">\n                      <Users className=\"w-8 h-8 text-white mx-auto mb-2\" />\n                      <div className=\"text-white font-bold text-lg\">10K+</div>\n                      <div className=\"text-blue-100 text-sm\">Students</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl p-4 text-center\">\n                      <Award className=\"w-8 h-8 text-white mx-auto mb-2\" />\n                      <div className=\"text-white font-bold text-lg\">500+</div>\n                      <div className=\"text-green-100 text-sm\">Certificates</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl p-4 text-center\">\n                      <Target className=\"w-8 h-8 text-white mx-auto mb-2\" />\n                      <div className=\"text-white font-bold text-lg\">95%</div>\n                      <div className=\"text-yellow-100 text-sm\">Success Rate</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-violet-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                      <GraduationCap className=\"w-12 h-12 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-white mb-2\">Start Your Journey</h3>\n                    <p className=\"text-slate-300\">Transform your skills with expert guidance</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 backdrop-blur-sm rounded-3xl p-12 border border-white/10 mb-16\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">Why Choose EduPlatform?</h2>\n            <p className=\"text-xl text-slate-300 max-w-2xl mx-auto\">\n              Experience the future of learning with our cutting-edge platform designed for success\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"bg-gradient-to-br from-violet-500 to-purple-600 backdrop-blur-sm border-0 hover:from-violet-600 hover:to-purple-700 transition-all duration-300 hover:shadow-xl hover:shadow-purple-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-violet-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Brain className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">AI-Powered Learning</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Personalized learning paths powered by AI that adapts to your pace and style\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-cyan-400 to-blue-500 backdrop-blur-sm border-0 hover:from-cyan-500 hover:to-blue-600 transition-all duration-300 hover:shadow-xl hover:shadow-cyan-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Clock className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Learn Anytime</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Access courses 24/7 from anywhere with our mobile-friendly platform\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-400 to-emerald-500 backdrop-blur-sm border-0 hover:from-green-500 hover:to-emerald-600 transition-all duration-300 hover:shadow-xl hover:shadow-green-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Award className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Certified Learning</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Earn industry-recognized certificates to boost your career prospects\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-orange-400 to-yellow-500 backdrop-blur-sm border-0 hover:from-orange-500 hover:to-yellow-600 transition-all duration-300 hover:shadow-xl hover:shadow-orange-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Users className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Expert Instructors</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Learn from industry experts with real-world experience and proven track records\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-pink-400 to-rose-500 backdrop-blur-sm border-0 hover:from-pink-500 hover:to-rose-600 transition-all duration-300 hover:shadow-xl hover:shadow-pink-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-pink-500 to-rose-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Shield className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Secure & Reliable</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Your data is protected with enterprise-grade security and 99.9% uptime\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-purple-500 to-indigo-600 backdrop-blur-sm border-0 hover:from-purple-600 hover:to-indigo-700 transition-all duration-300 hover:shadow-xl hover:shadow-purple-500/25\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Globe className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Global Community</h3>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  Join a worldwide community of learners and expand your network\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 backdrop-blur-sm rounded-3xl p-12 border border-white/10\">\n          <div className=\"text-center\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">Ready to Transform Your Future?</h2>\n            <p className=\"text-xl text-slate-300 mb-8 max-w-2xl mx-auto\">\n              Join thousands of successful learners who have advanced their careers with EduPlatform\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                className=\"bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white px-8 py-6 text-lg rounded-2xl shadow-2xl transition-all duration-200 hover:shadow-purple-500/25\"\n                onClick={() => setLocation('/auth')}\n              >\n                <Rocket className=\"mr-2 h-5 w-5\" />\n                Start Your Learning\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16297},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/test-results-backup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatDate, getGradeColor } from \"@/lib/utils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { BookOpen, Calendar, Award, User, Trophy, TrendingUp, Target, CheckCircle } from \"lucide-react\";\n\nexport default function TestResults() {\n  const { user, isAdmin } = useAuth();\n  const [selectedCourse, setSelectedCourse] = useState(\"all\");\n  \n  // Get test results based on user role\n  const { data: testResults, isLoading } = useQuery<any[]>({\n    queryKey: isAdmin ? ['/api/mongo/admin/student-results'] : ['/api/mongo/student/my-results'],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      const endpoint = isAdmin ? '/api/mongo/admin/student-results' : '/api/mongo/student/my-results';\n      \n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch test results');\n      }\n      \n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"ml-64 min-h-screen p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-10 w-40\" />\n          </div>\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n            <Skeleton className=\"h-16\" />\n            <div className=\"space-y-4 p-6\">\n              {[...Array(5)].map((_, i) => (\n                <Skeleton key={i} className=\"h-16\" />\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Extract unique courses for filtering\n  const uniqueCourses = Array.from(\n    new Set(\n      isAdmin \n        ? testResults?.flatMap((studentData: any) => \n            studentData.testResults?.map((test: any) => test.course?.title).filter(Boolean)\n          ).filter(Boolean) || []\n        : testResults?.map((result: any) => result.course?.title).filter(Boolean) || []\n    )\n  );\n\n  // Calculate stats for hero section\n  const totalTests = isAdmin \n    ? testResults?.reduce((acc: number, student: any) => acc + (student.testResults?.length || 0), 0) || 0\n    : testResults?.length || 0;\n  \n  const completedTests = isAdmin\n    ? testResults?.reduce((acc: number, student: any) => \n        acc + (student.testResults?.filter((t: any) => t.result).length || 0), 0) || 0\n    : testResults?.length || 0;\n  \n  const averageScore = 85; // Simplified for now\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"ml-64 min-h-screen overflow-auto\">\n        {/* Header Section */}\n        <div className=\"bg-gradient-to-r from-emerald-600 to-blue-600 p-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4\">\n              {isAdmin ? (\n                <span>Academic <span className=\"underline decoration-yellow-400\">Performance</span> Dashboard</span>\n              ) : (\n                <span>Your <span className=\"underline decoration-yellow-400\">Achievement</span> Journey</span>\n              )}\n            </h1>\n            <p className=\"text-xl text-green-100 mb-8 max-w-2xl mx-auto\">\n              {isAdmin \n                ? \"Track student progress and performance across all courses\"\n                : \"Monitor your learning progress and celebrate your achievements\"\n              }\n            </p>\n            \n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\">\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <Target className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" />\n                  <div className=\"text-3xl font-bold text-white mb-2\">{totalTests}</div>\n                  <p className=\"text-green-100\">Total Tests</p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"w-12 h-12 text-green-400 mx-auto mb-4\" />\n                  <div className=\"text-3xl font-bold text-white mb-2\">{completedTests}</div>\n                  <p className=\"text-green-100\">Completed</p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n                <CardContent className=\"p-6 text-center\">\n                  <Trophy className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n                  <div className=\"text-3xl font-bold text-white mb-2\">{Math.round(averageScore)}%</div>\n                  <p className=\"text-green-100\">Average Score</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n          </div>\n        </div>\n        \n        {/* Main Content */}\n        <div className=\"p-8\">\n          {/* Header */}\n        <Card className=\"mb-8 shadow-lg border-0\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-1\">\n                  {isAdmin ? \"Student Performance Overview\" : \"Performance Analytics\"}\n                </h2>\n                <p className=\"text-gray-600\">\n                  {isAdmin ? \"View detailed test results organized by student\" : \"Track your test performance and progress\"}\n                </p>\n              </div>\n              <Select value={selectedCourse} onValueChange={setSelectedCourse}>\n                <SelectTrigger className=\"w-48 border-gray-300 focus:border-emerald-500\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Courses</SelectItem>\n                  {uniqueCourses.map((course) => (\n                    <SelectItem key={course} value={course}>\n                      {course}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Results Display */}\n        <div className=\"space-y-6\">\n        {isAdmin ? (\n          // Admin view: Show all students and their results\n          testResults?.map((studentData: any) => (\n            <Card key={studentData.student._id}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <User className=\"h-5 w-5\" />\n                      {studentData.student.firstName} {studentData.student.lastName}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {studentData.student.email}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <Badge variant=\"outline\">\n                      {studentData.testResults?.filter((t: any) => t.result).length || 0} / {studentData.testResults?.length || 0} Tests Completed\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {studentData.testResults?.map((testResult: any) => {\n                    const percentage = testResult.result \n                      ? Math.round((testResult.result.score / testResult.maxScore) * 100) \n                      : 0;\n                    \n                    return (\n                      <div \n                        key={testResult.testId} \n                        className={`p-4 rounded-lg border ${testResult.result ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <BookOpen className=\"h-4 w-4 text-gray-600\" />\n                              <span className=\"font-medium\">{testResult.testTitle}</span>\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              {testResult.course?.title} • {testResult.course?.category}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-4\">\n                            {testResult.result ? (\n                              <>\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium\">{testResult.result.score}</span>\n                                  <span className=\"text-gray-500\">/{testResult.maxScore}</span>\n                                  <span className=\"text-gray-500 ml-1\">({percentage}%)</span>\n                                </div>\n                                <Badge className={getGradeColor(testResult.result.grade)}>\n                                  {testResult.result.grade}\n                                </Badge>\n                                <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  <span>\n                                    {formatDate(testResult.result.completedAt)}\n                                  </span>\n                                </div>\n                              </>\n                            ) : (\n                              <Badge variant=\"outline\" className=\"bg-gray-100\">\n                                Not Completed\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  \n                  {(!studentData.testResults || studentData.testResults.length === 0) && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <BookOpen className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p>No tests available for this student</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          // Student view: Show only their own results\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Award className=\"h-5 w-5\" />\n                My Test Results\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {testResults?.map((result: any) => (\n                  <div \n                    key={result.testId} \n                    className=\"p-4 rounded-lg border border-green-200 bg-green-50\"\n                  >\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <BookOpen className=\"h-4 w-4 text-gray-600\" />\n                          <span className=\"font-medium\">{result.testTitle}</span>\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          {result.course?.title} • {result.course?.category}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">{result.score}</span>\n                          <span className=\"text-gray-500\">/{result.maxScore}</span>\n                          <span className=\"text-gray-500 ml-1\">\n                            ({Math.round((result.score / result.maxScore) * 100)}%)\n                          </span>\n                        </div>\n                        <Badge className={getGradeColor(result.grade)}>\n                          {result.grade}\n                        </Badge>\n                        <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(result.completedAt)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )) || (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p>No test results available</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Empty state */}\n      {(!testResults || testResults.length === 0) && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <User className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {isAdmin ? \"No students found\" : \"No test results yet\"}\n            </h3>\n            <p className=\"text-gray-500\">\n              {isAdmin \n                ? \"No students are available in the system\" \n                : \"Complete some tests to see your results here\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":14431},"client/src/pages/test-results.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { formatDate, getGradeColor } from \"@/lib/utils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { BookOpen, Calendar, Award, User, Trophy, TrendingUp, Target, CheckCircle, RefreshCw, Activity, X, Mail, Clock, GraduationCap, ChevronDown, ChevronUp } from \"lucide-react\";\n\nexport default function TestResults() {\n  const { user, isAdmin } = useAuth();\n  const [selectedCourse, setSelectedCourse] = useState(\"all\");\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [modalTestFilter, setModalTestFilter] = useState(\"all\");\n  const [modalCourseFilter, setModalCourseFilter] = useState(\"all\");\n  const [expandedStudents, setExpandedStudents] = useState<Set<string>>(new Set());\n  const queryClient = useQueryClient();\n  \n  // Get test results based on user role (no automatic refresh)\n  const { data: testResults, isLoading } = useQuery<any[]>({\n    queryKey: isAdmin ? ['/api/mongo/admin/student-results'] : ['/api/mongo/student/my-results'],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      const endpoint = isAdmin ? '/api/mongo/admin/student-results' : '/api/mongo/student/my-results';\n      \n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch test results');\n      }\n      \n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Fetch all tests for statistics (no automatic refresh)\n  const { data: allTests, isLoading: testsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/tests\"],\n    enabled: !!user && isAdmin,\n  });\n\n  // Fetch admin stats for total students enrolled metric\n  const { data: adminStats } = useQuery<{\n    studentsEnrolled: number;\n    totalStudents: number;\n    averageScore: number;\n    totalCourses: number;\n  }>({\n    queryKey: [\"/api/mongo/admin/stats\"],\n    enabled: !!user && isAdmin,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-10 w-40\" />\n          </div>\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n            <Skeleton className=\"h-16\" />\n            <div className=\"space-y-4 p-6\">\n              {[...Array(5)].map((_, i) => (\n                <Skeleton key={i} className=\"h-16\" />\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Extract unique courses for filtering\n  const uniqueCourses = Array.from(\n    new Set(\n      isAdmin \n        ? testResults?.flatMap((studentData: any) => \n            studentData.testResults?.map((test: any) => test.course?.title).filter(Boolean)\n          ).filter(Boolean) || []\n        : testResults?.map((result: any) => result.course?.title).filter(Boolean) || []\n    )\n  );\n\n  // Filter data based on selected course for real-time course-specific analytics\n  const filteredTestResults = isAdmin ? testResults?.map((student: any) => {\n    if (selectedCourse === \"all\") return student;\n    \n    return {\n      ...student,\n      testResults: student.testResults?.filter((test: any) => \n        test.course?.title === selectedCourse\n      ) || []\n    };\n  }).filter((student: any) => \n    selectedCourse === \"all\" || student.testResults?.length > 0\n  ) : null;\n\n  // Filter student results for non-admin users\n  const filteredStudentResults = !isAdmin ? testResults?.filter((result: any) => \n    selectedCourse === \"all\" || result.course?.title === selectedCourse\n  ) : null;\n\n  // Calculate comprehensive real-time statistics based on selected course\n  const totalTests = isAdmin \n    ? selectedCourse === \"all\" \n      ? (allTests?.length || 0)\n      : (allTests?.filter((test: any) => \n          testResults?.some((student: any) => \n            student.testResults?.some((t: any) => \n              t.course?.title === selectedCourse && t.testId === test._id\n            )\n          )\n        ).length || 0)\n    : filteredStudentResults?.length || 0;\n  \n  // Total unique students who have completed at least one test in selected course\n  const studentsCompleted = isAdmin && filteredTestResults ? new Set(\n    filteredTestResults.filter((student: any) => \n      student.testResults?.some((t: any) => t.result)\n    ).map((student: any) => student.student._id)\n  ).size : (filteredStudentResults?.length || 0) > 0 ? 1 : 0;\n  \n  // Total students enrolled in the selected course (or all courses)\n  const totalStudentsInCourse = isAdmin && filteredTestResults ? filteredTestResults.length : 0;\n  \n  // Average score across all completed tests in selected course\n  const averageScore = (() => {\n    if (isAdmin && filteredTestResults) {\n      const allScores = filteredTestResults.reduce((scores: number[], student: any) => {\n        const studentScores = student.testResults?.filter((t: any) => t.result)\n          .map((t: any) => (t.result.score / t.maxScore) * 100) || [];\n        return scores.concat(studentScores);\n      }, []);\n      return allScores.length > 0 ? Math.round(allScores.reduce((sum, score) => sum + score, 0) / allScores.length) : 0;\n    } else if (!isAdmin && filteredStudentResults) {\n      // Student view: calculate average from their own filtered results\n      const studentScores = filteredStudentResults.map((result: any) => (result.score / result.maxScore) * 100);\n      return studentScores.length > 0 ? Math.round(studentScores.reduce((sum, score) => sum + score, 0) / studentScores.length) : 0;\n    }\n    return 0;\n  })();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"lg:ml-64 min-h-screen overflow-auto px-4 lg:px-0 pt-16 lg:pt-0\">\n        {/* Header Section */}\n        <div className=\"bg-gradient-to-r from-emerald-600 to-blue-600 p-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl lg:text-5xl font-bold mb-4\">\n              {isAdmin ? (\n                <span>Academic <span className=\"underline decoration-yellow-400\">Performance</span> Dashboard</span>\n              ) : (\n                <span>Your <span className=\"underline decoration-yellow-400\">Achievement</span> Journey</span>\n              )}\n            </h1>\n            <p className=\"text-xl text-green-100 mb-8 max-w-2xl mx-auto\">\n              {isAdmin \n                ? \"Track student progress and performance across all courses\"\n                : \"Monitor your learning progress and celebrate your achievements\"\n              }\n            </p>\n            \n            {/* Real-Time Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-12\">\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"relative\">\n                    <Target className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white mb-2 font-mono\">{totalTests}</div>\n                  <p className=\"text-green-100 font-medium\">Total Tests</p>\n                  <p className=\"text-green-200/70 text-sm mt-1\">\n                    {isAdmin ? \"Created in system\" : \"Available to you\"}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"relative\">\n                    <BookOpen className=\"w-12 h-12 text-blue-400 mx-auto mb-4\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-400 rounded-full\"></div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white mb-2 font-mono\">\n                    {isAdmin ? studentsCompleted : (testResults?.length || 0)}\n                  </div>\n                  <p className=\"text-green-100 font-medium\">\n                    {isAdmin ? \"Students Completed\" : \"Tests Taken\"}\n                  </p>\n                  <p className=\"text-green-200/70 text-sm mt-1\">\n                    {isAdmin ? \"Have taken tests\" : \"By you\"}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"relative\">\n                    <Trophy className=\"w-12 h-12 text-orange-400 mx-auto mb-4\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400 rounded-full\"></div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white mb-2 font-mono\">{averageScore}%</div>\n                  <p className=\"text-green-100 font-medium\">Average Score</p>\n                  <p className=\"text-green-200/70 text-sm mt-1\">\n                    Across all completed tests\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Manual Refresh Indicator */}\n            <div className=\"mt-8 flex items-center justify-center space-x-3\">\n              <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 border border-white/20\">\n                <Activity className=\"w-4 h-4 text-blue-400\" />\n                <span className=\"text-white text-sm font-medium\">Manual Refresh</span>\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n              </div>\n              <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2 border border-white/20\">\n                <RefreshCw className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-white text-sm font-medium\">Click to refresh</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Main Content */}\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"mb-8 bg-gradient-to-r from-emerald-500/10 via-teal-500/10 to-cyan-500/10 backdrop-blur-sm rounded-3xl border border-white/20 shadow-2xl overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex flex-col lg:flex-row gap-6 justify-between items-center\">\n                  {/* Header Section */}\n                  <div className=\"text-center lg:text-left space-y-3\">\n                    <div className=\"flex items-center justify-center lg:justify-start space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg\">\n                        {isAdmin ? <User className=\"w-6 h-6 text-white\" /> : <Award className=\"w-6 h-6 text-white\" />}\n                      </div>\n                      <div>\n                        <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 via-emerald-900 to-teal-900 dark:from-white dark:via-emerald-100 dark:to-teal-100 bg-clip-text text-transparent\">\n                          {isAdmin ? \"Student Performance Overview\" : \"Performance Analytics\"}\n                        </h2>\n                        <p className=\"text-gray-600 dark:text-gray-300 font-medium\">\n                          {isAdmin ? \"Comprehensive insights into student achievements\" : \"Track your learning journey and achievements\"}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Course Filter and Refresh Button */}\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <Select value={selectedCourse} onValueChange={setSelectedCourse}>\n                        <SelectTrigger className=\"w-full sm:w-56 h-12 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-2 border-white/30 dark:border-gray-600/30 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 focus:border-emerald-500 dark:focus:border-emerald-400\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-full\"></div>\n                            <SelectValue />\n                          </div>\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-white/95 dark:bg-gray-800/95 backdrop-blur-lg border-white/30 dark:border-gray-600/30 rounded-xl shadow-2xl\">\n                          <SelectItem value=\"all\" className=\"hover:bg-emerald-50 dark:hover:bg-emerald-900/30\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                              <span>All Courses</span>\n                            </div>\n                          </SelectItem>\n                          {uniqueCourses.map((course) => (\n                            <SelectItem key={course} value={course} className=\"hover:bg-emerald-50 dark:hover:bg-emerald-900/30\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n                                <span>{course}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {/* Manual Refresh Button */}\n                    <button \n                      onClick={() => {\n                        if (isAdmin) {\n                          queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/student-results\"] });\n                          queryClient.invalidateQueries({ queryKey: [\"/api/mongo/tests\"] });\n                        } else {\n                          queryClient.invalidateQueries({ queryKey: [\"/api/mongo/student/my-results\"] });\n                        }\n                      }}\n                      className=\"h-12 w-12 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center group\"\n                      title=\"Refresh data\"\n                    >\n                      <RefreshCw className=\"w-5 h-5 group-hover:rotate-180 transition-transform duration-500\" />\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Real-Time Course-Specific Stats Display */}\n                {isAdmin && testResults && (\n                  <div className=\"mt-6 pt-6 border-t border-white/20 dark:border-gray-600/20\">\n                    <div className=\"mb-4 flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white\">\n                        {selectedCourse === \"all\" ? \"Overall Statistics\" : `${selectedCourse} Course Analytics`}\n                      </h3>\n                      <div className=\"flex items-center space-x-2 bg-white/20 dark:bg-gray-800/20 rounded-full px-3 py-1\">\n                        <Activity className=\"w-3 h-3 text-blue-400\" />\n                        <span className=\"text-xs text-gray-700 dark:text-gray-300 font-medium\">Manual Refresh</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-blue-100 dark:border-blue-800 hover:scale-105 transition-transform duration-200\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-blue-500 rounded-lg\">\n                            <User className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-blue-600 dark:text-blue-400 font-medium uppercase tracking-wider\">\n                              Total Students Enrolled\n                            </p>\n                            <p className=\"text-lg font-bold text-blue-900 dark:text-blue-100 font-mono\">\n                              {adminStats?.studentsEnrolled || 0}\n                            </p>\n                            <p className=\"text-xs text-blue-500 dark:text-blue-300 mt-1\">\n                              All courses combined\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-100 dark:border-green-800 hover:scale-105 transition-transform duration-200\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-green-500 rounded-lg\">\n                            <Award className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-green-600 dark:text-green-400 font-medium uppercase tracking-wider\">Students Completed</p>\n                            <p className=\"text-lg font-bold text-green-900 dark:text-green-100 font-mono\">\n                              {studentsCompleted}\n                            </p>\n                            <p className=\"text-xs text-green-500 dark:text-green-300 mt-1\">\n                              {totalStudentsInCourse > 0 ? `${Math.round((studentsCompleted / totalStudentsInCourse) * 100)}% completion rate` : \"No students yet\"}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-purple-100 dark:border-purple-800 hover:scale-105 transition-transform duration-200\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-purple-500 rounded-lg\">\n                            <Trophy className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-purple-600 dark:text-purple-400 font-medium uppercase tracking-wider\">Average Score</p>\n                            <p className=\"text-lg font-bold text-purple-900 dark:text-purple-100 font-mono\">\n                              {averageScore}%\n                            </p>\n                            <p className=\"text-xs text-purple-500 dark:text-purple-300 mt-1\">\n                              {selectedCourse === \"all\" ? \"All courses combined\" : \"Course performance\"}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </div>\n          </div>\n\n        {/* Results Display */}\n        <div className=\"space-y-6\">\n        {isAdmin ? (\n          // Admin view: Show filtered students and their results based on selected course\n          filteredTestResults?.map((studentData: any, index: number) => {\n            const isExpanded = expandedStudents.has(studentData.student._id);\n            \n            const toggleExpanded = (e: React.MouseEvent) => {\n              e.stopPropagation();\n              const newExpanded = new Set(expandedStudents);\n              if (isExpanded) {\n                newExpanded.delete(studentData.student._id);\n              } else {\n                newExpanded.add(studentData.student._id);\n              }\n              setExpandedStudents(newExpanded);\n            };\n            \n            const openModal = () => {\n              setSelectedStudent(studentData);\n              setModalTestFilter(\"all\");\n              setModalCourseFilter(\"all\");\n              setIsDetailModalOpen(true);\n            };\n            \n            return (\n            <div \n              key={studentData.student._id} \n              className={`rounded-3xl border border-white/20 shadow-2xl overflow-hidden transition-all duration-300 ${\n                index % 2 === 0 \n                  ? 'bg-gradient-to-r from-green-500/10 to-emerald-500/10' \n                  : 'bg-gradient-to-r from-blue-500/10 to-indigo-500/10'\n              }`}\n            >\n              <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-start lg:items-center\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg ${\n                        index % 2 === 0 \n                          ? 'bg-gradient-to-br from-green-500 to-emerald-600' \n                          : 'bg-gradient-to-br from-blue-500 to-indigo-600'\n                      }`}>\n                        <User className=\"w-8 h-8 text-white\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-200 bg-clip-text text-transparent\">\n                          {studentData.student.firstName} {studentData.student.lastName}\n                        </CardTitle>\n                        <p className=\"text-gray-600 dark:text-gray-300 font-medium flex items-center space-x-2 mt-1\">\n                          <span>📧</span>\n                          <span>{studentData.student.email}</span>\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                      <div \n                        className={`px-4 py-2 rounded-xl border shadow-lg cursor-pointer hover:scale-105 transition-transform ${\n                          index % 2 === 0 \n                            ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' \n                            : 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800'\n                        }`}\n                        onClick={openModal}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <Award className={`h-4 w-4 ${\n                            index % 2 === 0 ? 'text-green-600' : 'text-blue-600'\n                          }`} />\n                          <span className={`text-sm font-bold ${\n                            index % 2 === 0 \n                              ? 'text-green-800 dark:text-green-200' \n                              : 'text-blue-800 dark:text-blue-200'\n                          }`}>\n                            {studentData.testResults?.filter((t: any) => t.result).length || 0} / {studentData.testResults?.length || 0} Tests Completed\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={toggleExpanded}\n                        className={`flex items-center space-x-1 ${\n                          index % 2 === 0 ? 'text-green-600 hover:text-green-700' : 'text-blue-600 hover:text-blue-700'\n                        }`}\n                      >\n                        {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                        <span className=\"text-sm font-medium\">\n                          {isExpanded ? 'Hide Details' : 'Show Details'}\n                        </span>\n                      </Button>\n                      \n                      {/* Progress Circle */}\n                      <div className=\"relative w-12 h-12\">\n                        <svg className=\"w-12 h-12 transform -rotate-90\" viewBox=\"0 0 48 48\">\n                          <circle\n                            cx=\"24\"\n                            cy=\"24\"\n                            r=\"20\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"4\"\n                            fill=\"none\"\n                            className=\"text-gray-200 dark:text-gray-700\"\n                          />\n                          <circle\n                            cx=\"24\"\n                            cy=\"24\"\n                            r=\"20\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"4\"\n                            fill=\"none\"\n                            strokeDasharray={`${2 * Math.PI * 20}`}\n                            strokeDashoffset={`${2 * Math.PI * 20 * (1 - ((studentData.testResults?.filter((t: any) => t.result).length || 0) / Math.max(studentData.testResults?.length || 1, 1)))}`}\n                            className={index % 2 === 0 ? 'text-green-500' : 'text-blue-500'}\n                            strokeLinecap=\"round\"\n                          />\n                        </svg>\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                          <span className={`text-xs font-bold ${\n                            index % 2 === 0 ? 'text-green-600' : 'text-blue-600'\n                          }`}>\n                            {Math.round(((studentData.testResults?.filter((t: any) => t.result).length || 0) / Math.max(studentData.testResults?.length || 1, 1)) * 100)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                {isExpanded && (\n                <CardContent className=\"px-8 pb-8\">\n                  <div className=\"space-y-4\">\n                    {studentData.testResults?.map((testResult: any, testIndex: number) => {\n                      const percentage = testResult.result \n                        ? Math.round((testResult.result.score / testResult.maxScore) * 100) \n                        : 0;\n                      \n                      return (\n                        <div \n                          key={testResult.testId} \n                          className={`p-3 rounded-xl border transition-all duration-300 hover:shadow-md ${\n                            testResult.result \n                              ? 'border-green-200 dark:border-green-800 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 hover:shadow-green-200/50' \n                              : 'border-gray-200 dark:border-gray-700 bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-800/20 dark:to-slate-800/20 hover:shadow-gray-200/50'\n                          }`}\n                        >\n                          <div className=\"flex flex-col lg:flex-row gap-2 justify-between items-start lg:items-center\">\n                            <div className=\"flex-1 space-y-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <div className={`p-1 rounded-md ${\n                                  testResult.result ? 'bg-green-500' : 'bg-gray-400'\n                                }`}>\n                                  <BookOpen className=\"h-3 w-3 text-white\" />\n                                </div>\n                                <div>\n                                  <h4 className=\"font-bold text-base text-gray-900 dark:text-white\">\n                                    {testResult.testTitle}\n                                  </h4>\n                                  <p className=\"text-xs text-gray-600 dark:text-gray-300 font-medium\">\n                                    {testResult.course?.title} • <span className=\"text-purple-600 dark:text-purple-400\">{testResult.course?.category}</span>\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-1 sm:space-y-0 sm:space-x-2\">\n                              {testResult.result ? (\n                                <>\n                                  <div className=\"bg-white dark:bg-gray-800 px-2 py-1 rounded-lg border border-gray-200 dark:border-gray-600 shadow-sm\">\n                                    <div className=\"text-center\">\n                                      <div className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                                        {testResult.result.score}<span className=\"text-gray-500 dark:text-gray-400\">/{testResult.maxScore}</span>\n                                      </div>\n                                      <div className=\"text-xs text-gray-500 dark:text-gray-400 font-medium\">\n                                        {percentage}%\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <Badge className={`${getGradeColor(testResult.result.grade)} px-2 py-1 text-xs font-bold shadow-sm`}>\n                                    {testResult.result.grade}\n                                  </Badge>\n                                  \n                                  <div className=\"bg-blue-50 dark:bg-blue-900/20 px-2 py-1 rounded-lg border border-blue-200 dark:border-blue-800\">\n                                    <div className=\"flex items-center space-x-1 text-blue-700 dark:text-blue-300\">\n                                      <Calendar className=\"h-3 w-3\" />\n                                      <span className=\"text-xs font-medium\">\n                                        {formatDate(testResult.result.completedAt).split(',')[0]}\n                                      </span>\n                                    </div>\n                                  </div>\n                                </>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"bg-gray-100 dark:bg-gray-800 px-4 py-2 text-sm font-medium border-2 border-gray-300 dark:border-gray-600\">\n                                  📋 Not Completed\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {/* Progress Bar for Completed Tests */}\n                          {testResult.result && (\n                            <div className=\"mt-4 pt-4 border-t border-green-200 dark:border-green-800\">\n                              <div className=\"flex justify-between items-center mb-2\">\n                                <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">Performance</span>\n                                <span className=\"text-sm font-bold text-green-800 dark:text-green-200\">{percentage}%</span>\n                              </div>\n                              <div className=\"h-2 bg-green-100 dark:bg-green-900 rounded-full overflow-hidden\">\n                                <div \n                                  className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full transition-all duration-1000 ease-out\"\n                                  style={{ width: `${percentage}%` }}\n                                />\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                    \n                    {(!studentData.testResults || studentData.testResults.length === 0) && (\n                      <div className=\"text-center py-12 bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-800/50 dark:to-slate-800/50 rounded-2xl border-2 border-dashed border-gray-300 dark:border-gray-600\">\n                        <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-400 dark:text-gray-500\" />\n                        <h4 className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2\">No Tests Available</h4>\n                        <p className=\"text-gray-500 dark:text-gray-400\">This student hasn't been assigned any tests yet</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n                )}\n              </div>\n            </div>\n            );\n          })\n        ) : (\n          // Student view: Show only their own results\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Award className=\"h-5 w-5\" />\n                My Test Results\n                {selectedCourse !== \"all\" && (\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {selectedCourse}\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredStudentResults?.map((result: any) => (\n                  <div \n                    key={result.testId} \n                    className=\"p-4 rounded-lg border border-green-200 bg-green-50\"\n                  >\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <BookOpen className=\"h-4 w-4 text-gray-600\" />\n                          <span className=\"font-medium\">{result.testTitle}</span>\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          {result.course?.title} • {result.course?.category}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">{result.score}</span>\n                          <span className=\"text-gray-500\">/{result.maxScore}</span>\n                          <span className=\"text-gray-500 ml-1\">\n                            ({Math.round((result.score / result.maxScore) * 100)}%)\n                          </span>\n                        </div>\n                        <Badge className={getGradeColor(result.grade)}>\n                          {result.grade}\n                        </Badge>\n                        <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(result.completedAt)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )) || (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p>\n                      {selectedCourse === \"all\" \n                        ? \"No test results available\" \n                        : `No test results found for ${selectedCourse}`\n                      }\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Empty state */}\n      {(!filteredTestResults || filteredTestResults.length === 0) && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <User className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {isAdmin \n                ? selectedCourse === \"all\" \n                  ? \"No students found\" \n                  : `No students found for ${selectedCourse}`\n                : \"No test results yet\"\n              }\n            </h3>\n            <p className=\"text-gray-500\">\n              {isAdmin \n                ? selectedCourse === \"all\"\n                  ? \"No students are available in the system\" \n                  : `No students have taken tests in ${selectedCourse} course yet`\n                : \"Complete some tests to see your results here\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n        </div>\n      </main>\n\n      {/* Student Detail Modal */}\n      <Dialog open={isDetailModalOpen} onOpenChange={setIsDetailModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <DialogTitle className=\"text-2xl font-bold\">Student Test Results</DialogTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsDetailModalOpen(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </DialogHeader>\n\n          {selectedStudent && (() => {\n            // Filter logic for modal\n            const getUniqueTestTitles = () => {\n              const titles = selectedStudent.testResults?.map((t: any) => t.testTitle).filter(Boolean) || [];\n              return Array.from(new Set(titles));\n            };\n            \n            const getUniqueCourses = () => {\n              const courses = selectedStudent.testResults?.map((t: any) => t.course?.title).filter(Boolean) || [];\n              return Array.from(new Set(courses));\n            };\n            \n            const filteredModalResults = selectedStudent.testResults?.filter((testResult: any) => {\n              const matchesTest = modalTestFilter === \"all\" || testResult.testTitle === modalTestFilter;\n              const matchesCourse = modalCourseFilter === \"all\" || testResult.course?.title === modalCourseFilter;\n              return matchesTest && matchesCourse;\n            }) || [];\n            \n            return (\n            <div className=\"space-y-6\">\n              {/* Student Info Header */}\n              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg\">\n                    <User className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {selectedStudent.student.firstName} {selectedStudent.student.lastName}\n                    </h3>\n                    <div className=\"flex items-center space-x-4 mt-2 text-gray-600 dark:text-gray-300\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Mail className=\"h-4 w-4\" />\n                        <span>{selectedStudent.student.email}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <GraduationCap className=\"h-4 w-4\" />\n                        <span className=\"capitalize\">{selectedStudent.student.role}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Quick Stats for Filtered Results */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n                  <div className=\"bg-white/80 dark:bg-gray-800/80 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {filteredModalResults.length}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">Filtered Tests</div>\n                  </div>\n                  <div className=\"bg-white/80 dark:bg-gray-800/80 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {filteredModalResults.filter((t: any) => t.result).length}\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">Completed</div>\n                  </div>\n                  <div className=\"bg-white/80 dark:bg-gray-800/80 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {filteredModalResults.length > 0 \n                        ? Math.round((filteredModalResults.filter((t: any) => t.result).length / filteredModalResults.length) * 100)\n                        : 0}%\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">Completion Rate</div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Filter Controls */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200 dark:border-gray-700\">\n                <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Filter Results</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Filter by Test</label>\n                    <Select value={modalTestFilter} onValueChange={setModalTestFilter}>\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue placeholder=\"Select test\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Tests</SelectItem>\n                        {getUniqueTestTitles().map((testTitle) => (\n                          <SelectItem key={testTitle} value={testTitle}>{testTitle}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Filter by Course</label>\n                    <Select value={modalCourseFilter} onValueChange={setModalCourseFilter}>\n                      <SelectTrigger className=\"w-full\">\n                        <SelectValue placeholder=\"Select course\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Courses</SelectItem>\n                        {getUniqueCourses().map((course) => (\n                          <SelectItem key={course} value={course}>{course}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"mt-3 text-sm text-gray-600 dark:text-gray-400\">\n                  Showing {filteredModalResults.length} of {selectedStudent.testResults?.length || 0} test results\n                </div>\n              </div>\n\n              {/* Test Results Details */}\n              <div className=\"space-y-4\">\n                <h4 className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                  <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                  <span>Detailed Test Performance</span>\n                </h4>\n\n                {filteredModalResults.length > 0 ? (\n                  filteredModalResults.map((testResult: any, index: number) => (\n                    <div\n                      key={testResult.testId}\n                      className={`p-6 rounded-xl border-2 ${\n                        testResult.result\n                          ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20'\n                          : 'border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800/20'\n                      }`}\n                    >\n                      <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-start lg:items-center\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-3\">\n                            <div className={`p-2 rounded-lg ${\n                              testResult.result ? 'bg-green-500' : 'bg-gray-400'\n                            }`}>\n                              <BookOpen className=\"h-4 w-4 text-white\" />\n                            </div>\n                            <div>\n                              <h5 className=\"font-bold text-lg text-gray-900 dark:text-white\">\n                                {testResult.testTitle}\n                              </h5>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                {testResult.course?.title} • {testResult.course?.category}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                          {testResult.result ? (\n                            <>\n                              <div className=\"bg-white dark:bg-gray-800 px-4 py-2 rounded-lg border shadow-sm\">\n                                <div className=\"text-center\">\n                                  <div className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                                    {testResult.result.score} / {testResult.maxScore}\n                                  </div>\n                                  <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                                    {Math.round((testResult.result.score / testResult.maxScore) * 100)}% Score\n                                  </div>\n                                </div>\n                              </div>\n\n                              <Badge className={`${getGradeColor(testResult.result.grade)} px-3 py-1 text-sm font-bold`}>\n                                {testResult.result.grade}\n                              </Badge>\n\n                              <div className=\"bg-blue-50 dark:bg-blue-900/20 px-3 py-2 rounded-lg border border-blue-200 dark:border-blue-800\">\n                                <div className=\"flex items-center space-x-2 text-blue-700 dark:text-blue-300\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  <span className=\"text-sm\">\n                                    {formatDate(testResult.result.completedAt)}\n                                  </span>\n                                </div>\n                              </div>\n                            </>\n                          ) : (\n                            <Badge variant=\"outline\" className=\"px-3 py-1\">\n                              Not Completed\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Answer Details (if available) */}\n                      {testResult.result?.answers && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                          <h6 className=\"font-semibold text-gray-900 dark:text-white mb-2\">Answer Details:</h6>\n                          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 text-sm\">\n                            <pre className=\"whitespace-pre-wrap text-gray-700 dark:text-gray-300\">\n                              {JSON.stringify(testResult.result.answers, null, 2)}\n                            </pre>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    {modalTestFilter === \"all\" && modalCourseFilter === \"all\" \n                      ? \"No test results available for this student.\"\n                      : \"No test results match the selected filters.\"}\n                  </div>\n                )}\n              </div>\n            </div>\n            );\n          })()}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":50399},"client/src/pages/video-player.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Play, Clock, BookOpen, Check } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function VideoPlayer() {\n  const [match, params] = useRoute(\"/video/:courseId/:moduleId\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: course, isLoading } = useQuery<any>({\n    queryKey: [`/api/mongo/courses/${params?.courseId}`],\n    enabled: !!params?.courseId,\n  });\n\n  // Module completion mutation\n  const completionMutation = useMutation({\n    mutationFn: async ({ moduleId, isCompleted }: { moduleId: string; isCompleted: boolean }) => {\n      const method = isCompleted ? 'POST' : 'DELETE';\n      return await apiRequest(method, `/api/mongo/courses/${params?.courseId}/modules/${moduleId}/complete`, {});\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/mongo/courses/${params?.courseId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/student/enrollments\"] });\n      \n      toast({\n        title: variables.isCompleted ? \"Module Completed\" : \"Module Uncompleted\",\n        description: variables.isCompleted ? \"Great job! Keep up the progress.\" : \"Module marked as incomplete.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update module completion\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Helper function to check if module is completed\n  const isModuleCompleted = (module: any) => {\n    if (!user?.id || !module?.completedBy) return false;\n    return module.completedBy.some((completion: any) => \n      completion.userId === user.id\n    );\n  };\n\n  // Handle module completion toggle\n  const handleModuleToggle = (moduleId: string, currentlyCompleted: boolean) => {\n    completionMutation.mutate({ \n      moduleId, \n      isCompleted: !currentlyCompleted \n    });\n  };\n\n  if (!match || !params) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Video Not Found</h2>\n            <p className=\"text-gray-600 mt-2\">The requested video could not be found.</p>\n            <Link href=\"/courses\">\n              <Button className=\"mt-4\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Courses\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-8\">\n          <Skeleton className=\"h-8 w-64 mb-6\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Skeleton className=\"aspect-video w-full mb-4\" />\n              <Skeleton className=\"h-6 w-3/4 mb-2\" />\n              <Skeleton className=\"h-4 w-full\" />\n            </div>\n            <div className=\"lg:col-span-1\">\n              <Skeleton className=\"h-64 w-full\" />\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const module = course?.modules?.find((m: any) => m._id === params.moduleId);\n  \n  if (!module) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Module Not Found</h2>\n            <p className=\"text-gray-600 mt-2\">The requested video module could not be found.</p>\n            <Link href={`/courses/${params.courseId}`}>\n              <Button className=\"mt-4\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Course\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Extract YouTube video ID\n  const getYouTubeVideoId = (url: string) => {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[2].length === 11 ? match[2] : null;\n  };\n\n  const videoId = getYouTubeVideoId(module.youtubeUrl);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"ml-64 p-4 md:p-8 max-w-full overflow-x-hidden\">\n        {/* Navigation */}\n        <div className=\"mb-6\">\n          <Link href={`/courses/${params.courseId}`}>\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Course\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-8\">\n          {/* Video Player */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-0\">\n                {videoId ? (\n                  <div className=\"aspect-video relative overflow-hidden rounded-t-lg\">\n                    <iframe\n                      src={`https://www.youtube.com/embed/${videoId}`}\n                      title={module.title}\n                      className=\"absolute top-0 left-0 w-full h-full border-0\"\n                      frameBorder=\"0\"\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen\n                    />\n                  </div>\n                ) : (\n                  <div className=\"aspect-video bg-gray-100 flex items-center justify-center rounded-t-lg\">\n                    <div className=\"text-center\">\n                      <Play className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500\">Invalid video URL</p>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h1 className=\"text-2xl font-bold text-gray-900\">{module.title}</h1>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`module-completion-${module._id}`}\n                        checked={isModuleCompleted(module)}\n                        onCheckedChange={(checked) => handleModuleToggle(module._id, isModuleCompleted(module))}\n                        disabled={completionMutation.isPending}\n                        className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                      />\n                      <label \n                        htmlFor={`module-completion-${module._id}`} \n                        className=\"text-sm font-medium text-gray-700 cursor-pointer select-none\"\n                      >\n                        {isModuleCompleted(module) ? 'Completed' : 'Mark Complete'}\n                      </label>\n                    </div>\n                  </div>\n                  {module.description && (\n                    <p className=\"text-gray-600 mb-4\">{module.description}</p>\n                  )}\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <Play className=\"h-4 w-4 mr-1\" />\n                    <span>Video Module</span>\n                    {isModuleCompleted(module) && (\n                      <div className=\"flex items-center ml-4 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium\">\n                        <Check className=\"h-3 w-3 mr-1\" />\n                        Completed\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Course Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Course Content\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <h3 className=\"font-semibold text-gray-900 mb-4\">{course?.title}</h3>\n                <div className=\"space-y-2\">\n                  {course?.modules?.map((mod: any, index: number) => {\n                    const isCompleted = isModuleCompleted(mod);\n                    return (\n                      <Link\n                        key={mod._id}\n                        href={`/video/${params.courseId}/${mod._id}`}\n                      >\n                        <div\n                          className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                            mod._id === params.moduleId\n                              ? 'bg-blue-50 border-blue-200'\n                              : isCompleted \n                                ? 'bg-green-50 border-green-200 hover:bg-green-100'\n                                : 'bg-white border-gray-200 hover:bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"text-sm font-medium text-gray-900 truncate\">\n                                  {index + 1}. {mod.title}\n                                </p>\n                                {isCompleted && (\n                                  <div className=\"flex-shrink-0 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center\">\n                                    <Check className=\"h-3 w-3 text-white\" />\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"flex items-center text-xs text-gray-500 mt-1\">\n                                <Play className=\"h-3 w-3 mr-1\" />\n                                Video\n                                {isCompleted && (\n                                  <span className=\"ml-2 text-green-600 font-medium\">• Completed</span>\n                                )}\n                              </div>\n                            </div>\n                            {mod._id === params.moduleId && (\n                              <Play className=\"h-4 w-4 text-blue-600\" />\n                            )}\n                          </div>\n                        </div>\n                      </Link>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11367},"client/src/components/admin/course-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Trash2, Youtube, FileText } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst courseSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  thumbnail: z.string().url(\"Please enter a valid image URL\"),\n  level: z.enum([\"Beginner\", \"Intermediate\", \"Advanced\"]),\n  price: z.number().min(0, \"Price must be 0 or greater\"),\n});\n\nconst moduleSchema = z.object({\n  title: z.string().min(1, \"Module title is required\"),\n  description: z.string().optional(),\n  youtubeUrl: z.string().min(1, \"YouTube URL is required\").refine(\n    (url) => /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/.test(url),\n    \"Please enter a valid YouTube URL (youtube.com or youtu.be)\"\n  ),\n  duration: z.number().min(1, \"Duration must be at least 1 minute\"),\n  orderIndex: z.number().min(0, \"Order index must be 0 or greater\").optional(),\n});\n\nconst noteSchema = z.object({\n  title: z.string().min(1, \"Note title is required\"),\n  pdfUrl: z.string().min(1, \"PDF URL is required\").refine(\n    (url) => /^https?:\\/\\/.+/.test(url),\n    \"Please enter a valid URL\"\n  ),\n  fileSize: z.string().optional(),\n});\n\ntype CourseFormData = z.infer<typeof courseSchema>;\ntype ModuleFormData = z.infer<typeof moduleSchema>;\ntype NoteFormData = z.infer<typeof noteSchema>;\n\ninterface CourseFormProps {\n  course?: any;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function CourseForm({ course, onSuccess, onCancel }: CourseFormProps) {\n  const [modules, setModules] = useState<ModuleFormData[]>([]);\n  const [notes, setNotes] = useState<NoteFormData[]>([]);\n  const [existingModules, setExistingModules] = useState<any[]>([]);\n  const [existingNotes, setExistingNotes] = useState<any[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load existing modules and notes when editing\n  useEffect(() => {\n    if (course && course.modules) {\n      setExistingModules(course.modules || []);\n    }\n    if (course && course.notes) {\n      setExistingNotes(course.notes || []);\n    }\n  }, [course]);\n\n  const form = useForm<CourseFormData>({\n    resolver: zodResolver(courseSchema),\n    defaultValues: course ? {\n      title: course.title || \"\",\n      description: course.description || \"\",\n      category: course.category || \"\",\n      thumbnail: course.thumbnail || \"\",\n      level: course.level || \"Beginner\",\n      price: course.price || 0,\n    } : {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      thumbnail: \"\",\n      level: \"Beginner\",\n      price: 0,\n    },\n  });\n\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: CourseFormData & { modules: ModuleFormData[]; notes: NoteFormData[] }) => {\n      const url = course ? `/api/mongo/courses/${course._id || course.id}` : '/api/mongo/courses';\n      const method = course ? 'PUT' : 'POST';\n\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/courses\"] });\n      toast({\n        title: \"Success\",\n        description: `Course ${course ? 'updated' : 'created'} successfully`,\n      });\n      form.reset();\n      setModules([]);\n      setNotes([]);\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${course ? 'update' : 'create'} course`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addModule = () => {\n    setModules([\n      ...modules,\n      {\n        title: \"\",\n        description: \"\",\n        youtubeUrl: \"\",\n        duration: 1,\n      },\n    ]);\n  };\n\n  const removeModule = (index: number) => {\n    setModules(modules.filter((_, i) => i !== index));\n  };\n\n  const updateModule = (index: number, field: keyof ModuleFormData, value: any) => {\n    const updatedModules = [...modules];\n    updatedModules[index] = { ...updatedModules[index], [field]: value };\n    setModules(updatedModules);\n  };\n\n  const addNote = () => {\n    setNotes([\n      ...notes,\n      {\n        title: \"\",\n        pdfUrl: \"\",\n        fileSize: \"\",\n      },\n    ]);\n  };\n\n  const removeExistingModule = (moduleIndex: number) => {\n    setExistingModules(existingModules.filter((_, i) => i !== moduleIndex));\n  };\n\n  const removeExistingNote = (noteIndex: number) => {\n    setExistingNotes(existingNotes.filter((_, i) => i !== noteIndex));\n  };\n\n  const removeNote = (index: number) => {\n    setNotes(notes.filter((_, i) => i !== index));\n  };\n\n  const updateNote = (index: number, field: keyof NoteFormData, value: any) => {\n    const updatedNotes = [...notes];\n    updatedNotes[index] = { ...updatedNotes[index], [field]: value };\n    setNotes(updatedNotes);\n  };\n\n  const onSubmit = (data: CourseFormData) => {\n    // Validate modules and notes before submitting\n    const validatedModules = modules.map((module, index) => ({\n      ...module,\n      orderIndex: index,\n    }));\n\n    const validatedNotes = notes.map(note => ({\n      ...note,\n      fileSize: note.fileSize || 'Unknown',\n    }));\n\n    // Combine existing and new content\n    const allModules = [...existingModules, ...validatedModules];\n    const allNotes = [...existingNotes, ...validatedNotes];\n\n    // Check if at least one module or note exists\n    if (allModules.length === 0 && allNotes.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one video module or PDF note\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate modules\n    for (const module of validatedModules) {\n      if (!module.title || !module.youtubeUrl || !module.duration || module.duration < 1) {\n        toast({\n          title: \"Error\",\n          description: \"All video modules must have title, YouTube URL, and duration (minimum 1 minute)\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    // Validate notes\n    for (const note of validatedNotes) {\n      if (!note.title || !note.pdfUrl) {\n        toast({\n          title: \"Error\",\n          description: \"All PDF notes must have title and URL\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    const courseData = {\n      ...data,\n      modules: allModules,\n      notes: allNotes,\n    };\n\n    console.log(\"Submitting course data:\", courseData);\n    createCourseMutation.mutate(courseData);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n\n      <Form {...form}>\n        <form className=\"space-y-8\">\n          {/* Basic Course Information */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-orange-50 dark:from-gray-800 dark:to-orange-900/10\">\n            <CardHeader className=\"bg-gradient-to-r from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 rounded-t-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">📋</span>\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl text-gray-800 dark:text-white\">Course Information</CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Define the basic details of your course</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6 p-8\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-orange-500\">📚</span>\n                      <span>Course Title</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter an engaging course title\" \n                        {...field} \n                        className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-orange-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-red-500\">💬</span>\n                      <span>Description</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe what students will learn and achieve in this course...\" \n                        rows={4}\n                        {...field} \n                        className=\"text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-red-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm resize-none\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-blue-600 dark:text-blue-400\">🏷️</span>\n                        </div>\n                        <span>Category</span>\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-blue-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\">\n                            <SelectValue placeholder=\"Choose category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"rounded-xl shadow-xl border-2\">\n                          <SelectItem value=\"Programming\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>💻</span>\n                              <span>Programming</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Data Science\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-green-50 hover:to-emerald-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>📊</span>\n                              <span>Data Science</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Mathematics\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>📐</span>\n                              <span>Mathematics</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Business\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>💼</span>\n                              <span>Business</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Design\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-pink-50 hover:to-rose-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>🎨</span>\n                              <span>Design</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Other\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-gray-50 hover:to-slate-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>📚</span>\n                              <span>Other</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"level\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-green-600 dark:text-green-400\">📈</span>\n                        </div>\n                        <span>Level</span>\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-green-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\">\n                            <SelectValue placeholder=\"Select difficulty\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"rounded-xl shadow-xl border-2\">\n                          <SelectItem value=\"Beginner\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-green-50 hover:to-emerald-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>🌱</span>\n                              <span>Beginner</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Intermediate\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-amber-50 hover:to-orange-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>🌿</span>\n                              <span>Intermediate</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"Advanced\" className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-red-50 hover:to-rose-50\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>🌳</span>\n                              <span>Advanced</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-purple-600 dark:text-purple-400\">💰</span>\n                        </div>\n                        <span>Price</span>\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"Enter price\" \n                            {...field}\n                            value={field.value || ''}\n                            onChange={(e) => field.onChange(e.target.value === '' ? 0 : Number(e.target.value))}\n                            className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-purple-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm pl-12\"\n                          />\n                          <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 font-medium\">\n                            $\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"thumbnail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-pink-500\">🖼️</span>\n                      <span>Thumbnail URL</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"https://example.com/beautiful-course-image.jpg\" \n                        {...field} \n                        className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-pink-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Existing Video Modules */}\n          {course && existingModules.length > 0 && (\n            <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-blue-50 dark:from-gray-800 dark:to-blue-900/10\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 rounded-t-xl\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n                    <Youtube className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl text-gray-800 dark:text-white flex items-center gap-2\">\n                      Existing Video Lectures\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Manage your current course content</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4 p-8\">\n                {existingModules.map((module, index) => (\n                  <div key={`existing-${index}`} className=\"group relative bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 border border-blue-200 dark:border-blue-700 rounded-xl p-6 hover:shadow-lg transition-all duration-300\">\n                    <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-t-xl\"></div>\n                    \n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-white font-bold\">{index + 1}</span>\n                        </div>\n                        <div>\n                          <h4 className=\"font-bold text-gray-900 dark:text-white text-lg\">Existing Module {index + 1}</h4>\n                          <p className=\"text-sm text-blue-600 dark:text-blue-400\">Currently Published</p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeExistingModule(index)}\n                        className=\"opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\"\n                      >\n                        <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"mt-4 space-y-3\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-blue-200 dark:border-blue-700\">\n                          <span className=\"font-semibold text-blue-700 dark:text-blue-300 text-sm\">Title:</span>\n                          <p className=\"text-gray-900 dark:text-white font-medium\">{module.title}</p>\n                        </div>\n                        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-blue-200 dark:border-blue-700\">\n                          <span className=\"font-semibold text-blue-700 dark:text-blue-300 text-sm\">Status:</span>\n                          <p className=\"text-gray-900 dark:text-white font-medium\">Video Module</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-blue-200 dark:border-blue-700\">\n                        <span className=\"font-semibold text-blue-700 dark:text-blue-300 text-sm\">YouTube URL:</span>\n                        <a href={module.youtubeUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:underline mt-1 break-all\">\n                          {module.youtubeUrl}\n                        </a>\n                      </div>\n                      \n                      {module.description && (\n                        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-blue-200 dark:border-blue-700\">\n                          <span className=\"font-semibold text-blue-700 dark:text-blue-300 text-sm\">Description:</span>\n                          <p className=\"text-gray-700 dark:text-gray-300 mt-1\">{module.description}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* New Video Modules */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-purple-50 dark:from-gray-800 dark:to-purple-900/10\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 rounded-t-xl\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                    <Youtube className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl text-gray-800 dark:text-white flex items-center gap-2\">\n                      {course ? \"Add New Video Lectures\" : \"Video Lectures\"}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Create engaging video content for your course</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"px-3 py-1 bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/50 dark:to-pink-900/50 rounded-full border border-purple-200 dark:border-purple-700\">\n                    <span className=\"text-purple-700 dark:text-purple-300 text-sm font-semibold\">\n                      {modules.length} {modules.length === 1 ? 'Module' : 'Modules'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6 p-8\">\n              {modules.map((module, index) => (\n                <div key={index} className=\"group relative bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border border-purple-200 dark:border-purple-700 rounded-xl p-6 hover:shadow-lg transition-all duration-300\">\n                  <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-pink-500 rounded-t-xl\"></div>\n                  \n                  <div className=\"flex justify-between items-center mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">{index + 1}</span>\n                      </div>\n                      <div>\n                        <h4 className=\"font-bold text-gray-900 dark:text-white text-lg\">Module {index + 1}</h4>\n                        <p className=\"text-sm text-purple-600 dark:text-purple-400\">New Content</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeModule(index)}\n                      className=\"opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\"\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-semibold text-purple-700 dark:text-purple-300 mb-2\">\n                          📝 Module Title\n                        </label>\n                        <Input\n                          placeholder=\"Enter module title\"\n                          value={module.title}\n                          onChange={(e) => updateModule(index, \"title\", e.target.value)}\n                          className=\"h-11 border-2 border-purple-200 dark:border-purple-700 focus:border-purple-500 rounded-lg bg-white dark:bg-gray-800\"\n                        />\n                      </div>\n\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-semibold text-purple-700 dark:text-purple-300 mb-2\">\n                        🎥 YouTube URL\n                      </label>\n                      <Input\n                        placeholder=\"https://youtube.com/watch?v=...\"\n                        value={module.youtubeUrl}\n                        onChange={(e) => updateModule(index, \"youtubeUrl\", e.target.value)}\n                        className=\"h-11 border-2 border-purple-200 dark:border-purple-700 focus:border-purple-500 rounded-lg bg-white dark:bg-gray-800\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-semibold text-purple-700 dark:text-purple-300 mb-2\">\n                        ⏱️ Duration (minutes)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Enter duration in minutes\"\n                        value={module.duration || ''}\n                        onChange={(e) => updateModule(index, \"duration\", e.target.value === '' ? 1 : Number(e.target.value))}\n                        className=\"h-11 border-2 border-purple-200 dark:border-purple-700 focus:border-purple-500 rounded-lg bg-white dark:bg-gray-800\"\n                        min=\"1\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-semibold text-purple-700 dark:text-purple-300 mb-2\">\n                        💬 Description (Optional)\n                      </label>\n                      <Textarea\n                        placeholder=\"Describe what students will learn in this module...\"\n                        value={module.description}\n                        onChange={(e) => updateModule(index, \"description\", e.target.value)}\n                        rows={3}\n                        className=\"border-2 border-purple-200 dark:border-purple-700 focus:border-purple-500 rounded-lg bg-white dark:bg-gray-800 resize-none\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={addModule}\n                className=\"w-full h-12 border-2 border-dashed border-purple-300 dark:border-purple-600 hover:border-purple-500 hover:bg-purple-50 dark:hover:bg-purple-900/20 text-purple-700 dark:text-purple-300 rounded-xl transition-all duration-200\"\n              >\n                <Plus className=\"h-5 w-5 mr-2\" />\n                Add Video Module\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Existing PDF Notes */}\n          {course && existingNotes.length > 0 && (\n            <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-green-50 dark:from-gray-800 dark:to-green-900/10\">\n              <CardHeader className=\"bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 rounded-t-xl\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl text-gray-800 dark:text-white flex items-center gap-2\">\n                      Existing PDF Notes\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Manage your current course materials</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4 p-8\">\n                {existingNotes.map((note, index) => (\n                  <div key={`existing-note-${index}`} className=\"group relative bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200 dark:border-green-700 rounded-xl p-6 hover:shadow-lg transition-all duration-300\">\n                    <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-green-500 to-emerald-500 rounded-t-xl\"></div>\n                    \n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-bold text-gray-900 dark:text-white text-lg\">Existing Note {index + 1}</h4>\n                          <p className=\"text-sm text-green-600 dark:text-green-400\">Currently Available</p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeExistingNote(index)}\n                        className=\"opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\"\n                      >\n                        <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"mt-4 space-y-3\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-green-200 dark:border-green-700\">\n                          <span className=\"font-semibold text-green-700 dark:text-green-300 text-sm\">Title:</span>\n                          <p className=\"text-gray-900 dark:text-white font-medium\">{note.title}</p>\n                        </div>\n                        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-green-200 dark:border-green-700\">\n                          <span className=\"font-semibold text-green-700 dark:text-green-300 text-sm\">File Size:</span>\n                          <p className=\"text-gray-900 dark:text-white font-medium\">{note.fileSize || 'Unknown'}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border border-green-200 dark:border-green-700\">\n                        <span className=\"font-semibold text-green-700 dark:text-green-300 text-sm\">PDF URL:</span>\n                        <a href={note.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"block text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 hover:underline mt-1 break-all\">\n                          {note.pdfUrl}\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* New PDF Notes */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-amber-50 dark:from-gray-800 dark:to-amber-900/10\">\n            <CardHeader className=\"bg-gradient-to-r from-amber-100 to-yellow-100 dark:from-amber-900/30 dark:to-yellow-900/30 rounded-t-xl\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-amber-500 to-yellow-500 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl text-gray-800 dark:text-white flex items-center gap-2\">\n                      {course ? \"Add New PDF Notes\" : \"PDF Notes\"}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Provide downloadable resources for students</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"px-3 py-1 bg-gradient-to-r from-amber-100 to-yellow-100 dark:from-amber-900/50 dark:to-yellow-900/50 rounded-full border border-amber-200 dark:border-amber-700\">\n                    <span className=\"text-amber-700 dark:text-amber-300 text-sm font-semibold\">\n                      {notes.length} {notes.length === 1 ? 'Note' : 'Notes'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6 p-8\">\n              {notes.map((note, index) => (\n                <div key={index} className=\"group relative bg-gradient-to-br from-amber-50 to-yellow-50 dark:from-amber-900/20 dark:to-yellow-900/20 border border-amber-200 dark:border-amber-700 rounded-xl p-6 hover:shadow-lg transition-all duration-300\">\n                  <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-amber-500 to-yellow-500 rounded-t-xl\"></div>\n                  \n                  <div className=\"flex justify-between items-center mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-amber-500 to-yellow-500 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-bold text-gray-900 dark:text-white text-lg\">Note {index + 1}</h4>\n                        <p className=\"text-sm text-amber-600 dark:text-amber-400\">New Resource</p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeNote(index)}\n                      className=\"opacity-0 group-hover:opacity-100 transition-opacity h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\"\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-semibold text-amber-700 dark:text-amber-300 mb-2\">\n                          📄 Note Title\n                        </label>\n                        <Input\n                          placeholder=\"Enter note title\"\n                          value={note.title}\n                          onChange={(e) => updateNote(index, \"title\", e.target.value)}\n                          className=\"h-11 border-2 border-amber-200 dark:border-amber-700 focus:border-amber-500 rounded-lg bg-white dark:bg-gray-800\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-semibold text-amber-700 dark:text-amber-300 mb-2\">\n                          📊 File Size\n                        </label>\n                        <Input\n                          placeholder=\"e.g., 2.5 MB\"\n                          value={note.fileSize}\n                          onChange={(e) => updateNote(index, \"fileSize\", e.target.value)}\n                          className=\"h-11 border-2 border-amber-200 dark:border-amber-700 focus:border-amber-500 rounded-lg bg-white dark:bg-gray-800\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-semibold text-amber-700 dark:text-amber-300 mb-2\">\n                        🔗 PDF URL\n                      </label>\n                      <Input\n                        placeholder=\"https://example.com/document.pdf\"\n                        value={note.pdfUrl}\n                        onChange={(e) => updateNote(index, \"pdfUrl\", e.target.value)}\n                        className=\"h-11 border-2 border-amber-200 dark:border-amber-700 focus:border-amber-500 rounded-lg bg-white dark:bg-gray-800\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={addNote}\n                className=\"w-full h-12 border-2 border-dashed border-amber-300 dark:border-amber-600 hover:border-amber-500 hover:bg-amber-50 dark:hover:bg-amber-900/20 text-amber-700 dark:text-amber-300 rounded-xl transition-all duration-200\"\n              >\n                <Plus className=\"h-5 w-5 mr-2\" />\n                Add PDF Note\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Action Section */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-800 dark:to-slate-800\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0 md:space-x-6\">\n                {/* Preview Section */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center\">\n                    <span className=\"text-white text-xl\">👁️</span>\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-gray-900 dark:text-white\">Ready to Preview</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Review your course before publishing</p>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={onCancel}\n                    className=\"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 px-8 py-3 h-12\"\n                  >\n                    <span className=\"mr-2\">❌</span>\n                    Cancel\n                  </Button>\n                  \n                  \n                  \n                  <Button \n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={createCourseMutation.isPending}\n                    className=\"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-semibold px-8 py-3 h-12 shadow-lg hover:shadow-xl transition-all duration-200\"\n                  >\n                    {createCourseMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        {course ? \"Updating...\" : \"Publishing...\"}\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"mr-2\">{course ? \"📝\" : \"🚀\"}</span>\n                        {course ? \"Update Course\" : \"Publish Course\"}\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Progress Indicator */}\n              <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>Form Valid</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <span>{modules.length + (existingModules?.length || 0)} Modules</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-amber-500 rounded-full\"></div>\n                      <span>{notes.length + (existingNotes?.length || 0)} Notes</span>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n                    Auto-saved • Last change: just now\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":45460},"client/src/components/admin/student-grades.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Edit, Plus, Award, Users, BookOpen, RefreshCw, Activity, ChevronDown, ChevronRight, GraduationCap } from \"lucide-react\";\n\ninterface GradeFormProps {\n  student: any;\n  test: any;\n  existingResult?: any;\n  onSuccess: () => void;\n}\n\ninterface TestGradingCardProps {\n  test: any;\n  onGradeDialog: (student: any, test: any, existingResult?: any) => void;\n  getGradeColor: (grade: string) => string;\n}\n\nfunction GradeForm({ student, test, existingResult, onSuccess }: GradeFormProps) {\n  const [score, setScore] = useState(existingResult?.score || \"\");\n  const [grade, setGrade] = useState(existingResult?.grade || \"\");\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const token = localStorage.getItem('token');\n      const url = `/api/mongo/tests/${test._id}/results`;\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          studentId: student._id,\n          score: parseInt(score),\n          grade: grade,\n          maxScore: test.maxScore || 100\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save grade');\n      }\n\n      // Invalidate and refetch relevant queries\n      await queryClient.invalidateQueries({ queryKey: [\"/api/mongo/tests\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/student-results\"] });\n      \n      toast({\n        title: existingResult ? \"Grade Updated\" : \"Grade Added\",\n        description: `${grade} grade saved for ${student.firstName} ${student.lastName}`,\n      });\n      \n      onSuccess();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save grade. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"score\">Score</Label>\n          <Input\n            id=\"score\"\n            type=\"number\"\n            placeholder=\"Enter score\"\n            value={score}\n            onChange={(e) => setScore(e.target.value)}\n            min=\"0\"\n            max={test.maxScore || 100}\n            required\n          />\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Out of {test.maxScore || 100} points\n          </p>\n        </div>\n        <div>\n          <Label htmlFor=\"grade\">Grade</Label>\n          <Select value={grade} onValueChange={setGrade} required>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select grade\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"A+\">A+</SelectItem>\n              <SelectItem value=\"A\">A</SelectItem>\n              <SelectItem value=\"B+\">B+</SelectItem>\n              <SelectItem value=\"B\">B</SelectItem>\n              <SelectItem value=\"C+\">C+</SelectItem>\n              <SelectItem value=\"C\">C</SelectItem>\n              <SelectItem value=\"D\">D</SelectItem>\n              <SelectItem value=\"F\">F</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      <Button type=\"submit\" disabled={loading} className=\"w-full\">\n        {loading ? (\n          <>\n            <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            Saving...\n          </>\n        ) : (\n          existingResult ? \"Update Grade\" : \"Add Grade\"\n        )}\n      </Button>\n    </form>\n  );\n}\n\nfunction TestGradingCard({ test, onGradeDialog, getGradeColor }: TestGradingCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { data: students, isLoading: studentsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/admin/course\", test.course?._id, \"students\"],\n    queryFn: async () => {\n      if (!test.course?._id) return [];\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/mongo/admin/course/${test.course._id}/students`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    },\n    enabled: !!test.course?._id,\n  });\n\n  if (studentsLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-6 w-48\" />\n          <Skeleton className=\"h-4 w-64\" />\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-32 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow duration-300\">\n      <CardHeader className=\"pb-4\">\n          \n          <div className=\"flex justify-between items-start pt-2\">\n            <div className=\"flex-1 space-y-2\">\n              {/* Enhanced Title Section */}\n              <div className=\"relative\">\n                <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\n                  <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center\">\n                    <BookOpen className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span>{test.title}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsExpanded(!isExpanded)}\n                      className=\"p-1 h-6 w-6 hover:bg-indigo-100 dark:hover:bg-indigo-900/20\"\n                      data-testid={`toggle-test-${test._id}`}\n                    >\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-3 w-3 text-indigo-600\" />\n                      ) : (\n                        <ChevronRight className=\"h-3 w-3 text-indigo-600\" />\n                      )}\n                    </Button>\n                  </div>\n                </CardTitle>\n                \n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                  Course: {test.course?.title} • Max Score: {test.maxScore || 100} points\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                {test.results?.length || 0}/{students?.length || 0}\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Completed</p>\n            </div>\n          </div>\n        </CardHeader>\n      {isExpanded && (\n        <CardContent className=\"p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full text-xs\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left py-2\">Student</th>\n                <th className=\"text-left py-2\">Email</th>\n                <th className=\"text-center py-2\">Score</th>\n                <th className=\"text-center py-2\">Grade</th>\n                <th className=\"text-center py-2\">Date Completed</th>\n                <th className=\"text-center py-2\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {students?.map((student: any) => {\n                const result = test.results?.find((r: any) => \n                  r.student.toString() === student._id.toString()\n                );\n                \n                return (\n                  <tr key={student._id} className=\"border-b\">\n                    <td className=\"py-2 font-medium\">\n                      {student.firstName} {student.lastName}\n                    </td>\n                    <td className=\"py-2 text-gray-600\">{student.email}</td>\n                    <td className=\"py-2 text-center\">\n                      {result ? (\n                        <span className=\"font-semibold\">\n                          {result.score}/{result.maxScore || test.maxScore || 100}\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-400\">Not graded</span>\n                      )}\n                    </td>\n                    <td className=\"py-2 text-center\">\n                      {result ? (\n                        <Badge className={getGradeColor(result.grade)}>\n                          {result.grade}\n                        </Badge>\n                      ) : (\n                        <span className=\"text-gray-400\">-</span>\n                      )}\n                    </td>\n                    <td className=\"py-2 text-center text-gray-600\">\n                      {result ? (\n                        new Date(result.completedAt).toLocaleDateString()\n                      ) : (\n                        <span className=\"text-gray-400\">-</span>\n                      )}\n                    </td>\n                    <td className=\"py-2 text-center\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onGradeDialog(student, test, result)}\n                      >\n                        {result ? (\n                          <>\n                            <Edit className=\"h-3 w-3 mr-1\" />\n                            Edit\n                          </>\n                        ) : (\n                          <>\n                            <Plus className=\"h-3 w-3 mr-1\" />\n                            Add Grade\n                          </>\n                        )}\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          \n          {(!students || students.length === 0) && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Users className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No students enrolled in this course</p>\n            </div>\n          )}\n        </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n\nexport default function StudentGrades() {\n  const [selectedTest, setSelectedTest] = useState<string>(\"all\");\n  const [gradeDialogOpen, setGradeDialogOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [selectedTestData, setSelectedTestData] = useState<any>(null);\n  const [existingResult, setExistingResult] = useState<any>(null);\n  const queryClient = useQueryClient();\n\n  const { data: tests, isLoading: testsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/tests\"],\n  });\n\n  const { data: studentResults, isLoading: resultsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/admin/student-results\"],\n  });\n\n\n  const openGradeDialog = (student: any, test: any, existingResult?: any) => {\n    setSelectedStudent(student);\n    setSelectedTestData(test);\n    setExistingResult(existingResult || null);\n    setGradeDialogOpen(true);\n  };\n\n  const getGradeColor = (grade: string) => {\n    const colors: Record<string, string> = {\n      'A+': 'bg-green-100 text-green-800',\n      'A': 'bg-green-100 text-green-800',\n      'B+': 'bg-blue-100 text-blue-800',\n      'B': 'bg-blue-100 text-blue-800',\n      'C+': 'bg-yellow-100 text-yellow-800',\n      'C': 'bg-yellow-100 text-yellow-800',\n      'D': 'bg-orange-100 text-orange-800',\n      'F': 'bg-red-100 text-red-800',\n    };\n    return colors[grade] || 'bg-gray-100 text-gray-800';\n  };\n\n  if (testsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const filteredTests = selectedTest && selectedTest !== \"all\"\n    ? tests?.filter(test => test._id === selectedTest)\n    : tests;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"relative group\">\n        <div className=\"relative rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-br from-white/90 via-blue-50/80 to-purple-50/60 dark:from-gray-900/90 dark:via-blue-900/30 dark:to-purple-900/20 backdrop-blur-xl\">\n          <div className=\"h-2 bg-gradient-to-r from-blue-500 via-indigo-500 via-purple-500 to-pink-500 relative\"></div>\n          <div className=\"relative bg-gradient-to-r from-white/20 via-white/10 to-white/5 backdrop-blur-sm\">\n            <div className=\"p-10\">\n              <div className=\"flex flex-col lg:flex-row gap-8 justify-between items-start lg:items-center\">\n                <div className=\"flex items-center space-x-8\">\n                  <div className=\"relative group/icon\">\n                    <div className=\"relative w-24 h-24 rounded-3xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 flex items-center justify-center shadow-2xl\">\n                      <GraduationCap className=\"w-12 h-12 text-white drop-shadow-lg\" />\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <h2 className=\"text-4xl font-black bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 dark:from-white dark:via-blue-200 dark:to-purple-200 bg-clip-text text-transparent\">\n                      Student Grading\n                    </h2>\n                    <p className=\"text-gray-600 dark:text-gray-300 text-xl font-medium max-w-md\">\n                      Manage and track student performance across all courses\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Test Filter */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"text-sm font-medium\">Filter by Test:</label>\n            <Select value={selectedTest} onValueChange={setSelectedTest}>\n              <SelectTrigger className=\"w-64\">\n                <SelectValue placeholder=\"All Tests\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tests</SelectItem>\n                {tests?.map((test) => (\n                  <SelectItem key={test._id} value={test._id}>\n                    {test.title} ({test.course?.title})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tests with Students */}\n      <div className=\"space-y-4\">\n        {filteredTests?.map((test) => (\n          <TestGradingCard\n            key={test._id}\n            test={test}\n            onGradeDialog={openGradeDialog}\n            getGradeColor={getGradeColor}\n          />\n        ))}\n      </div>\n\n      {/* Grade Dialog */}\n      <Dialog open={gradeDialogOpen} onOpenChange={setGradeDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>\n              {existingResult ? \"Edit Grade\" : \"Add Grade\"}\n            </DialogTitle>\n            <DialogDescription>\n              {existingResult ? \"Update\" : \"Add\"} grade for {selectedStudent?.firstName} {selectedStudent?.lastName} \n              on {selectedTestData?.title}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedStudent && selectedTestData && (\n            <GradeForm\n              student={selectedStudent}\n              test={selectedTestData}\n              existingResult={existingResult}\n              onSuccess={() => setGradeDialogOpen(false)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {filteredTests?.length === 0 && (\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <Award className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Tests Found</h3>\n            <p className=\"text-gray-500\">\n              {selectedTest !== \"all\" ? \"No test found for the selected filter\" : \"No tests available\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17145},"client/src/components/admin/test-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst testSchema = z.object({\n  title: z.string().min(1, \"Test title is required\"),\n  description: z.string().optional(),\n  courseId: z.string().min(1, \"Please select a course\"),\n  timeLimit: z.number().min(1, \"Time limit must be at least 1 minute\"),\n  passingScore: z.number().min(0).max(100, \"Passing score must be between 0-100\"),\n  attempts: z.number().min(1, \"Must allow at least 1 attempt\"),\n  maxScore: z.number().min(1, \"Max score must be at least 1\"),\n});\n\ntype TestFormData = z.infer<typeof testSchema>;\n\ninterface TestFormProps {\n  editingTest?: any;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function TestForm({ editingTest, onSuccess, onCancel }: TestFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: courses, isLoading: coursesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/mongo/courses\"],\n  });\n\n  const form = useForm<TestFormData>({\n    resolver: zodResolver(testSchema),\n    defaultValues: {\n      title: editingTest?.title || \"\",\n      description: editingTest?.description || \"\",\n      courseId: editingTest?.course?._id || \"\",\n      timeLimit: editingTest?.timeLimit || 60,\n      passingScore: editingTest?.passingScore || 60,\n      attempts: editingTest?.attempts || 3,\n      maxScore: editingTest?.maxScore || 100,\n    },\n  });\n\n  const testMutation = useMutation({\n    mutationFn: async (data: TestFormData) => {\n      const url = editingTest ? `/api/mongo/tests/${editingTest._id}` : \"/api/mongo/tests\";\n      const method = editingTest ? \"PUT\" : \"POST\";\n      \n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mongo/tests\"] });\n      toast({\n        title: \"Success\",\n        description: editingTest ? \"Test updated successfully\" : \"Test created successfully\",\n      });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingTest ? 'update' : 'create'} test`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TestFormData) => {\n    testMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n      {/* Header with gradient background */}\n      <div className=\"relative bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 rounded-2xl p-8 shadow-2xl\">\n        <div className=\"absolute inset-0 bg-black/20 rounded-2xl\"></div>\n        <div className=\"relative z-10 flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center\">\n              <span className=\"text-3xl\">📝</span>\n            </div>\n            <div>\n              <h2 className=\"text-3xl font-bold text-white\">\n                {editingTest ? \"Edit Test\" : \"Create New Test\"}\n              </h2>\n              <p className=\"text-white/80 mt-1\">\n                {editingTest ? \"Update your test settings and content\" : \"Design engaging assessments for your students\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={onCancel}\n              className=\"bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-sm\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={form.handleSubmit(onSubmit)}\n              disabled={testMutation.isPending}\n              className=\"bg-white text-blue-600 hover:bg-white/90 font-semibold shadow-lg\"\n            >\n              {testMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n                  {editingTest ? \"Updating...\" : \"Creating...\"}\n                </>\n              ) : (\n                <>\n                  <span className=\"mr-2\">{editingTest ? \"💾\" : \"✨\"}</span>\n                  {editingTest ? \"Update Test\" : \"Create Test\"}\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form className=\"space-y-8\">\n          {/* Main Information Card */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n            <CardHeader className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-t-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">📋</span>\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl text-gray-800 dark:text-white\">Test Information</CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Define the basic details of your test</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6 p-8\">\n              {/* Title Field */}\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-blue-500\">📝</span>\n                      <span>Test Title</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter an engaging test title\" \n                        {...field} \n                        className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-blue-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Description Field */}\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-purple-500\">💬</span>\n                      <span>Description</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe what this test covers and any special instructions...\" \n                        rows={4}\n                        {...field} \n                        className=\"text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-purple-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm resize-none\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Course Selection */}\n              <FormField\n                control={form.control}\n                name=\"courseId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                      <span className=\"text-green-500\">🎓</span>\n                      <span>Associated Course</span>\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-green-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm\">\n                          <SelectValue placeholder=\"Choose the course for this test\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"rounded-xl shadow-xl border-2\">\n                        {courses?.map((course) => (\n                          <SelectItem key={course._id} value={course._id} className=\"text-lg p-3 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center\">\n                                <span className=\"text-white text-xs font-bold\">📚</span>\n                              </div>\n                              <div>\n                                <div className=\"font-semibold\">{course.title}</div>\n                                <div className=\"text-sm text-gray-500\">({course.category})</div>\n                              </div>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Settings Card */}\n          <Card className=\"border-0 shadow-xl bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n            <CardHeader className=\"bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 rounded-t-xl\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-500 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">⚙️</span>\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl text-gray-800 dark:text-white\">Test Settings</CardTitle>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Configure timing, scoring, and attempt limits</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                {/* Time Limit */}\n                <FormField\n                  control={form.control}\n                  name=\"timeLimit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-blue-600 dark:text-blue-400\">⏱️</span>\n                        </div>\n                        <span>Time Limit</span>\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"60\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                            className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-blue-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm pl-4 pr-20\"\n                          />\n                          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 font-medium\">\n                            minutes\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Passing Score */}\n                <FormField\n                  control={form.control}\n                  name=\"passingScore\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-green-600 dark:text-green-400\">🎯</span>\n                        </div>\n                        <span>Passing Score</span>\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"60\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                            className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-green-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm pl-4 pr-12\"\n                          />\n                          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 font-medium\">\n                            %\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Max Score */}\n                <FormField\n                  control={form.control}\n                  name=\"maxScore\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-yellow-100 to-orange-200 dark:from-yellow-900 dark:to-orange-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-yellow-600 dark:text-yellow-400\">🏆</span>\n                        </div>\n                        <span>Max Score</span>\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"100\" \n                            value={field.value || ''}\n                            onChange={(e) => field.onChange(Number(e.target.value) || 100)}\n                            className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-yellow-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm pl-4 pr-16\"\n                          />\n                          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 font-medium\">\n                            points\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Max Attempts */}\n                <FormField\n                  control={form.control}\n                  name=\"attempts\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-purple-600 dark:text-purple-400\">🔄</span>\n                        </div>\n                        <span>Max Attempts</span>\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"3\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                            className=\"h-12 text-lg border-2 border-gray-200 dark:border-gray-700 focus:border-purple-500 rounded-xl bg-white dark:bg-gray-800 shadow-sm pl-4 pr-20\"\n                          />\n                          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 font-medium\">\n                            attempts\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":18060},"client/src/components/admin/user-approvals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserCheck, UserX, Users, Clock, Mail, Calendar, BookOpen, Award, Shield } from \"lucide-react\";\n\nexport default function UserApprovals() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: pendingApprovals, isLoading: approvalsLoading } = useQuery({\n    queryKey: [\"/api/mongo/admin/pending-approvals\"],\n  });\n\n  const { data: courses } = useQuery({\n    queryKey: [\"/api/mongo/courses\"],\n  });\n\n  const handleApproveUser = async (userId: any, selectedCourses: any[] = []) => {\n    try {\n      const response = await fetch(`/api/mongo/admin/users/${userId}/approval`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          isApproved: true,\n          enrolledCourses: selectedCourses\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"User Approved\",\n          description: \"User has been approved and enrolled in selected courses.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/pending-approvals\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/users\"] });\n      } else {\n        throw new Error('Failed to approve user');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve user. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectUser = async (userId: any) => {\n    try {\n      const response = await fetch(`/api/mongo/admin/users/${userId}/approval`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          isApproved: false\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"User Rejected\",\n          description: \"User request has been rejected.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/pending-approvals\"] });\n      } else {\n        throw new Error('Failed to reject user');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject user. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (approvalsLoading) {\n    return (\n      <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-emerald-500/10 to-green-500/10\">\n        <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg bg-gradient-to-br from-emerald-500 to-green-600\">\n                <Clock className=\"w-8 h-8 text-white animate-spin\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-200 bg-clip-text text-transparent\">\n                  Loading Approval Requests\n                </CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-300 font-medium\">\n                  Fetching pending student registrations...\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Enhanced Header Section */}\n      <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-emerald-500/10 to-green-500/10\">\n        <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n          <CardHeader className=\"pb-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-start lg:items-center\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center shadow-lg bg-gradient-to-br from-emerald-500 to-green-600\">\n                  <Shield className=\"w-8 h-8 text-white\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-200 bg-clip-text text-transparent\">\n                    User Approval Center\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-600 dark:text-gray-300 font-medium text-lg mt-1\">\n                    Review and approve student registration requests with course enrollment\n                  </CardDescription>\n                </div>\n              </div>\n              \n              {/* Quick Stats */}\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                <div className=\"bg-emerald-50 dark:bg-emerald-900/20 px-4 py-2 rounded-xl border border-emerald-200 dark:border-emerald-800 shadow-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4 text-emerald-600\" />\n                    <span className=\"text-sm font-bold text-emerald-800 dark:text-emerald-200\">\n                      {(pendingApprovals as any[])?.length || 0} Pending Requests\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n        </div>\n      </div>\n\n      {/* Content Section */}\n      <div className=\"space-y-6\">\n        {!pendingApprovals || (pendingApprovals as any[])?.length === 0 ? (\n          <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-emerald-50/50 via-teal-50/50 to-cyan-50/50 dark:from-emerald-900/20 dark:via-teal-900/20 dark:to-cyan-900/20\">\n            {/* Top Border Accent */}\n            <div className=\"h-1 bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500\" />\n            \n            <div className=\"text-center py-20 px-8\">\n              {/* Enhanced Empty State Icon */}\n              <div className=\"relative mx-auto mb-8\">\n                <div className=\"w-32 h-32 mx-auto rounded-3xl bg-gradient-to-br from-emerald-100 to-cyan-100 dark:from-emerald-900/30 dark:to-cyan-900/30 flex items-center justify-center shadow-2xl\">\n                  <Users className=\"h-16 w-16 text-emerald-500\" />\n                </div>\n                {/* Floating Elements */}\n                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full animate-bounce\" />\n                <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-gradient-to-br from-teal-400 to-cyan-500 rounded-full animate-pulse\" />\n                <div className=\"absolute top-1/2 -left-4 w-3 h-3 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full animate-ping\" />\n              </div>\n              \n              <h3 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n                All Clear! 🎉\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-300 text-lg max-w-md mx-auto mb-8\">\n                All registration requests have been processed. New requests will appear here for your review.\n              </p>\n              \n              {/* Feature Highlights */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-2xl mx-auto\">\n                <div className=\"bg-white/50 dark:bg-gray-800/50 p-4 rounded-2xl border border-gray-200 dark:border-gray-700\">\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <UserCheck className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm\">Quick Approval</h4>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Approve users instantly</p>\n                </div>\n                \n                <div className=\"bg-white/50 dark:bg-gray-800/50 p-4 rounded-2xl border border-gray-200 dark:border-gray-700\">\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <BookOpen className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm\">Course Enrollment</h4>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Assign courses during approval</p>\n                </div>\n                \n                <div className=\"bg-white/50 dark:bg-gray-800/50 p-4 rounded-2xl border border-gray-200 dark:border-gray-700\">\n                  <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                    <Award className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm\">Smart Management</h4>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">Efficient user management</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {(pendingApprovals as any[])?.map((user: any, index: number) => (\n              <ApprovalRequestCard \n                key={user._id} \n                user={user} \n                courses={(courses as any[]) || []}\n                onApprove={handleApproveUser}\n                onReject={handleRejectUser}\n                index={index}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction ApprovalRequestCard({ user, courses, onApprove, onReject, index }: { \n  user: any; \n  courses: any[]; \n  onApprove: any; \n  onReject: any; \n  index: number;\n}) {\n  const [selectedCourses, setSelectedCourses] = useState<string[]>([]);\n  const [isApproving, setIsApproving] = useState(false);\n  const [showCourseSelection, setShowCourseSelection] = useState(false);\n\n  const handleCourseChange = (courseId: string, checked: any) => {\n    if (checked) {\n      setSelectedCourses([...selectedCourses, courseId]);\n    } else {\n      setSelectedCourses(selectedCourses.filter(id => id !== courseId));\n    }\n  };\n\n  const handleApprove = async () => {\n    setIsApproving(true);\n    await onApprove(user._id, selectedCourses);\n    setIsApproving(false);\n    setShowCourseSelection(false);\n  };\n\n  const waitDays = Math.floor((Date.now() - new Date(user.createdAt).getTime()) / (1000 * 60 * 60 * 24));\n\n  return (\n    <div className=\"group relative bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 hover:scale-105\">\n      {/* Header with gradient background */}\n      <div className=\"absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-emerald-500 via-green-500 to-teal-500 rounded-t-xl\"></div>\n      \n      {/* User Icon */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-100 to-green-100 dark:from-emerald-900 dark:to-green-900 rounded-lg flex items-center justify-center\">\n            <UserCheck className=\"h-6 w-6 text-emerald-600 dark:text-emerald-400\" />\n          </div>\n          <div>\n            <h4 className=\"font-bold text-gray-900 dark:text-white text-lg leading-tight\">\n              {user.firstName} {user.lastName}\n            </h4>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">{user.email}</p>\n          </div>\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10 relative\">\n          <Dialog open={showCourseSelection} onOpenChange={setShowCourseSelection}>\n            <DialogTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"h-8 w-8 p-0 hover:bg-emerald-50 dark:hover:bg-emerald-900\" \n                title=\"Approve User\"\n              >\n                <UserCheck className=\"h-4 w-4 text-emerald-600 dark:text-emerald-400\" />\n              </Button>\n            </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl font-bold flex items-center space-x-2\">\n                    <Award className=\"h-6 w-6 text-emerald-600\" />\n                    <span>Approve User & Enroll in Courses</span>\n                  </DialogTitle>\n                  <DialogDescription className=\"text-lg\">\n                    Select courses to enroll <span className=\"font-semibold text-emerald-600\">{user.firstName} {user.lastName}</span> in upon approval\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-6 mt-6\">\n                  <div>\n                    <Label className=\"text-base font-semibold mb-4 flex items-center space-x-2\">\n                      <BookOpen className=\"h-5 w-5 text-blue-600\" />\n                      <span>Available Courses:</span>\n                    </Label>\n                    <div className=\"mt-4 space-y-3 max-h-80 overflow-y-auto bg-gray-50 dark:bg-gray-800 rounded-xl p-4\">\n                      {courses.map((course: any) => (\n                        <div key={course._id} className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors\">\n                          <Checkbox\n                            id={`course-${course._id}`}\n                            checked={selectedCourses.includes(course._id)}\n                            onCheckedChange={(checked) => handleCourseChange(course._id, checked)}\n                            className=\"h-5 w-5\"\n                          />\n                          <Label htmlFor={`course-${course._id}`} className=\"flex-1 font-medium cursor-pointer\">\n                            {course.title}\n                          </Label>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {course.category}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-3 pt-4 border-t\">\n                    <Button \n                      onClick={handleApprove}\n                      disabled={isApproving}\n                      className=\"flex-1 bg-gradient-to-r from-emerald-500 to-green-600 hover:from-emerald-600 hover:to-green-700 text-white font-semibold\"\n                      size=\"lg\"\n                    >\n                      {isApproving ? (\n                        <>\n                          <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Approving...\n                        </>\n                      ) : (\n                        <>\n                          <Award className=\"w-4 h-4 mr-2\" />\n                          Approve & Enroll in {selectedCourses.length} course{selectedCourses.length !== 1 ? 's' : ''}\n                        </>\n                      )}\n                    </Button>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => setShowCourseSelection(false)}\n                      size=\"lg\"\n                      className=\"px-8\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"h-8 w-8 p-0 hover:bg-red-50 dark:hover:bg-red-900\" \n            title=\"Reject User\"\n            onClick={() => onReject(user._id)}\n          >\n            <UserX className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* User Details */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Username</span>\n          <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">@{user.username}</span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Registered</span>\n          <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n            {new Date(user.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Wait Time</span>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {waitDays} day{waitDays !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Status Badge */}\n      <div className=\"mt-4 pt-3 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xs text-green-600 dark:text-green-400 font-medium flex items-center\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\" />\n            Pending Review\n          </span>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {courses.length} courses available\n          </span>\n        </div>\n      </div>\n\n      {/* Hover Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-500/0 to-green-500/0 group-hover:from-emerald-500/5 group-hover:to-green-500/5 rounded-xl transition-all duration-300 pointer-events-none\"></div>\n    </div>\n  );\n}","size_bytes":18895},"client/src/components/admin/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, UserMinus, Edit, Trash2, Shield, Crown, Calendar, BookOpen, Mail, UserCheck, Settings, Star, Award, Clock } from \"lucide-react\";\n\nexport default function UserManagement() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/mongo/admin/users\"],\n  });\n\n  const { data: courses } = useQuery({\n    queryKey: [\"/api/mongo/courses\"],\n  });\n\n  const handleSuspendUser = async (userId: any, coursesToRemove: any) => {\n    try {\n      const response = await fetch(`/api/mongo/admin/users/${userId}/suspend`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          coursesToRemove\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"User Suspended\",\n          description: \"User has been suspended from selected courses.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/users\"] });\n      } else {\n        throw new Error('Failed to suspend user');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to suspend user. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditUserCourses = async (userId: any, newCourses: any) => {\n    try {\n      const response = await fetch(`/api/mongo/admin/users/${userId}/courses`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          enrolledCourses: newCourses\n        })\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Courses Updated\",\n          description: \"User courses have been updated successfully.\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/mongo/admin/users\"] });\n      } else {\n        throw new Error('Failed to update user courses');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user courses. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (usersLoading) {\n    return (\n      <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-indigo-50/50 to-purple-50/50 dark:from-indigo-900/20 dark:to-purple-900/20\">\n        <div className=\"bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-sm p-8\">\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center shadow-lg\">\n              <Users className=\"w-8 h-8 text-white animate-pulse\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">User Management</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">Loading platform users...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const approvedUsers = (users as any[])?.filter(user => user.isApproved && user.role !== 'admin') || [];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header Section */}\n      <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-indigo-50/50 to-purple-50/50 dark:from-indigo-900/20 dark:to-purple-900/20\">\n        <div className=\"bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-sm\">\n          <div className=\"p-8\">\n            <div className=\"flex flex-col lg:flex-row gap-6 justify-between items-start lg:items-center\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"w-20 h-20 rounded-2xl bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center shadow-lg\">\n                  <Users className=\"w-10 h-10 text-white\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                    User Management\n                  </h2>\n                  <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                    Manage platform users and their course access\n                  </p>\n                </div>\n              </div>\n              \n              {/* Statistics */}\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                <div className=\"bg-indigo-50 dark:bg-indigo-900/20 px-4 py-2 rounded-xl border border-indigo-200 dark:border-indigo-800 shadow-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"h-4 w-4 text-indigo-600\" />\n                    <span className=\"text-sm font-bold text-indigo-800 dark:text-indigo-200\">\n                      {approvedUsers.length} Active Users\n                    </span>\n                  </div>\n                </div>\n                \n                <Badge className=\"px-3 py-1 text-sm font-medium bg-indigo-100 text-indigo-800 border-indigo-300\">\n                  🎯 Management Hub\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content Section */}\n      <div className=\"space-y-6\">\n        {approvedUsers.length === 0 ? (\n          <div className=\"rounded-3xl border border-white/20 shadow-2xl overflow-hidden bg-gradient-to-r from-gray-50/50 to-slate-50/50 dark:from-gray-800/50 dark:to-slate-800/50\">\n            <div className=\"text-center py-16 px-8\">\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 flex items-center justify-center\">\n                <Users className=\"h-12 w-12 text-indigo-500\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-3\">No Active Users</h3>\n              <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                No approved users to manage yet. Once users are approved, they'll appear here for management.\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {approvedUsers.map((user: any, index: number) => (\n              <UserManagementCard\n                key={user._id}\n                user={user}\n                courses={(courses as any[]) || []}\n                onSuspend={handleSuspendUser}\n                onEditCourses={handleEditUserCourses}\n                index={index}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction UserManagementCard({ user, courses, onSuspend, onEditCourses, index }: {\n  user: any;\n  courses: any[];\n  onSuspend: any;\n  onEditCourses: any;\n  index: number;\n}) {\n  const [selectedCoursesToRemove, setSelectedCoursesToRemove] = useState<string[]>([]);\n  const [newCourseSelection, setNewCourseSelection] = useState<string[]>(\n    user.enrolledCourses?.map((c: any) => c._id || c) || []\n  );\n\n  const handleSuspendCourseChange = (courseId: string, checked: any) => {\n    if (checked) {\n      setSelectedCoursesToRemove([...selectedCoursesToRemove, courseId]);\n    } else {\n      setSelectedCoursesToRemove(selectedCoursesToRemove.filter((id: string) => id !== courseId));\n    }\n  };\n\n  const handleEditCourseChange = (courseId: string, checked: any) => {\n    if (checked) {\n      setNewCourseSelection([...newCourseSelection, courseId]);\n    } else {\n      setNewCourseSelection(newCourseSelection.filter((id: string) => id !== courseId));\n    }\n  };\n\n  const userEnrolledCourseIds = user.enrolledCourses?.map((c: any) => c._id || c) || [];\n\n  return (\n    <div className={`rounded-2xl border border-white/20 shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl ${\n      index % 2 === 0 \n        ? 'bg-gradient-to-r from-blue-500/10 to-indigo-500/10' \n        : 'bg-gradient-to-r from-purple-500/10 to-pink-500/10'\n    }`}>\n      <div className=\"bg-gradient-to-r from-white/5 to-white/10 backdrop-blur-sm\">\n        <div className=\"p-4\">\n          {/* User Profile Section */}\n          <div className=\"flex flex-col lg:flex-row gap-4 justify-between items-start lg:items-center mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Avatar className=\"h-14 w-14 border-2 border-white/30 shadow-lg\">\n                  <AvatarImage src={user.avatar} className=\"object-cover\" />\n                  <AvatarFallback className={`text-xl font-bold text-white ${\n                    index % 2 === 0 \n                      ? 'bg-gradient-to-br from-blue-500 to-indigo-600' \n                      : 'bg-gradient-to-br from-purple-500 to-pink-600'\n                  }`}>\n                    {user.firstName[0]}{user.lastName[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-lg flex items-center justify-center shadow-lg ${\n                  index % 2 === 0 \n                    ? 'bg-gradient-to-br from-blue-500 to-indigo-600' \n                    : 'bg-gradient-to-br from-purple-500 to-pink-600'\n                }`}>\n                  <Crown className=\"w-3 h-3 text-white\" />\n                </div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                  {user.firstName} {user.lastName}\n                </h3>\n                <div className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-300\">\n                  <Mail className=\"h-3 w-3\" />\n                  <span className=\"text-sm font-medium\">{user.email}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge className={`px-2 py-1 text-xs font-medium ${\n                    index % 2 === 0 \n                      ? 'bg-blue-100 text-blue-800 border-blue-300' \n                      : 'bg-purple-100 text-purple-800 border-purple-300'\n                  }`}>\n                    <Shield className=\"w-2 h-2 mr-1\" />\n                    {user.role}\n                  </Badge>\n                  <Badge className={`px-2 py-1 text-xs font-medium ${\n                    index % 2 === 0 \n                      ? 'bg-blue-50 text-blue-700 border-blue-200' \n                      : 'bg-purple-50 text-purple-700 border-purple-200'\n                  }`}>\n                    <BookOpen className=\"w-2 h-2 mr-1\" />\n                    {userEnrolledCourseIds.length} courses\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            \n            {/* User Status Info */}\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-1 sm:space-y-0 sm:space-x-2\">\n              <div className={`px-3 py-1 rounded-lg border shadow-sm ${\n                index % 2 === 0 \n                  ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800' \n                  : 'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800'\n              }`}>\n                <div className=\"flex items-center space-x-1\">\n                  <Calendar className={`h-3 w-3 ${\n                    index % 2 === 0 ? 'text-blue-600' : 'text-purple-600'\n                  }`} />\n                  <span className={`text-xs font-bold ${\n                    index % 2 === 0 \n                      ? 'text-blue-800 dark:text-blue-200' \n                      : 'text-purple-800 dark:text-purple-200'\n                  }`}>\n                    {new Date(user.createdAt).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric' \n                    })}\n                  </span>\n                </div>\n              </div>\n              \n              <Badge className={`px-2 py-1 text-xs font-medium ${\n                index % 2 === 0 \n                  ? 'bg-emerald-100 text-emerald-800 border-emerald-300' \n                  : 'bg-rose-100 text-rose-800 border-rose-300'\n              }`}>\n                <UserCheck className=\"w-2 h-2 mr-1\" />\n                Active\n              </Badge>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-2\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  className={`flex-1 border font-medium shadow-sm hover:shadow-md transition-all duration-300 ${\n                    index % 2 === 0 \n                      ? 'border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300' \n                      : 'border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300'\n                  }`}\n                >\n                  <UserMinus className=\"w-4 h-4 mr-2\" />\n                  Suspend\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl font-bold flex items-center space-x-2\">\n                    <UserMinus className=\"h-6 w-6 text-red-600\" />\n                    <span>Suspend User from Courses</span>\n                  </DialogTitle>\n                  <DialogDescription className=\"text-lg\">\n                    Select courses to remove <span className=\"font-semibold text-red-600\">{user.firstName} {user.lastName}</span> from\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-6 mt-6\">\n                  {userEnrolledCourseIds.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <BookOpen className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                      <p className=\"text-gray-500 text-lg\">User is not enrolled in any courses</p>\n                    </div>\n                  ) : (\n                    <div>\n                      <Label className=\"text-base font-semibold mb-4 flex items-center space-x-2\">\n                        <BookOpen className=\"h-5 w-5 text-red-600\" />\n                        <span>Enrolled Courses:</span>\n                      </Label>\n                      <div className=\"mt-4 space-y-3 max-h-80 overflow-y-auto bg-gray-50 dark:bg-gray-800 rounded-xl p-4\">\n                        {courses.filter((course: any) => userEnrolledCourseIds.includes(course._id)).map((course: any) => (\n                          <div key={course._id} className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors\">\n                            <Checkbox\n                              id={`suspend-${course._id}`}\n                              checked={selectedCoursesToRemove.includes(course._id)}\n                              onCheckedChange={(checked) => handleSuspendCourseChange(course._id, checked)}\n                              className=\"h-5 w-5\"\n                            />\n                            <Label htmlFor={`suspend-${course._id}`} className=\"flex-1 font-medium cursor-pointer\">\n                              {course.title}\n                            </Label>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {course.category}\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex space-x-3 pt-4 border-t\">\n                    <Button \n                      onClick={() => onSuspend(user._id, selectedCoursesToRemove)}\n                      disabled={selectedCoursesToRemove.length === 0}\n                      variant=\"destructive\"\n                      className=\"flex-1 bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 font-semibold\"\n                      size=\"lg\"\n                    >\n                      <UserMinus className=\"w-4 h-4 mr-2\" />\n                      Suspend from {selectedCoursesToRemove.length} Selected Course{selectedCoursesToRemove.length !== 1 ? 's' : ''}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button \n                  size=\"sm\" \n                  className={`flex-1 text-white font-medium shadow-sm hover:shadow-md transition-all duration-300 ${\n                    index % 2 === 0 \n                      ? 'bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700' \n                      : 'bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700'\n                  }`}\n                >\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Edit Courses\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl font-bold flex items-center space-x-2\">\n                    <Settings className=\"h-6 w-6 text-blue-600\" />\n                    <span>Edit User Courses</span>\n                  </DialogTitle>\n                  <DialogDescription className=\"text-lg\">\n                    Manage <span className=\"font-semibold text-blue-600\">{user.firstName} {user.lastName}</span>'s course enrollments\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-6 mt-6\">\n                  <div>\n                    <Label className=\"text-base font-semibold mb-4 flex items-center space-x-2\">\n                      <BookOpen className=\"h-5 w-5 text-blue-600\" />\n                      <span>Available Courses:</span>\n                    </Label>\n                    <div className=\"mt-4 space-y-3 max-h-80 overflow-y-auto bg-gray-50 dark:bg-gray-800 rounded-xl p-4\">\n                      {courses.map((course: any) => (\n                        <div key={course._id} className=\"flex items-center space-x-3 p-3 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors\">\n                          <Checkbox\n                            id={`edit-${course._id}`}\n                            checked={newCourseSelection.includes(course._id)}\n                            onCheckedChange={(checked) => handleEditCourseChange(course._id, checked)}\n                            className=\"h-5 w-5\"\n                          />\n                          <Label htmlFor={`edit-${course._id}`} className=\"flex-1 font-medium cursor-pointer\">\n                            {course.title}\n                          </Label>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {course.category}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-3 pt-4 border-t\">\n                    <Button \n                      onClick={() => onEditCourses(user._id, newCourseSelection)}\n                      className=\"flex-1 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-semibold\"\n                      size=\"lg\"\n                    >\n                      <Award className=\"w-4 h-4 mr-2\" />\n                      Update Course Enrollments ({newCourseSelection.length} course{newCourseSelection.length !== 1 ? 's' : ''})\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20899},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/seedDatabase.js":{"content":"import mongoose from 'mongoose';\nimport Course from './models/Course.js';\nimport User from './models/User.js';\nimport Test from './models/Test.js';\nimport Enrollment from './models/Enrollment.js';\n\nconst MONGO_URI = 'mongodb+srv://Himanshu:Himanshu123@himanshu.pe7xrly.mongodb.net/LMS?retryWrites=true&w=majority&appName=himanshu';\n\nexport const seedDatabase = async () => {\n  try {\n    console.log('Starting database seeding...');\n    \n    // Connect to MongoDB\n    await mongoose.connect(MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('Connected to MongoDB for seeding');\n\n    // Check if data already exists\n    const existingCourses = await Course.countDocuments();\n    const existingUsers = await User.countDocuments();\n    \n    console.log(`Existing courses: ${existingCourses}, existing users: ${existingUsers}`);\n    \n    if (existingCourses > 0 && existingUsers > 5) {\n      console.log('Database already has data, skipping seeding');\n      return;\n    }\n\n    // Create sample courses\n    const courses = await Course.insertMany([\n      {\n        title: 'React Fundamentals',\n        description: 'Learn the basics of React development',\n        category: 'Programming',\n        instructor: 'John Doe',\n        price: 99.99,\n        duration: 8,\n        level: 'Beginner',\n        isActive: true,\n        thumbnail: 'https://via.placeholder.com/300x200',\n        lectures: [\n          {\n            title: 'Introduction to React',\n            type: 'video',\n            url: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n            duration: 15\n          },\n          {\n            title: 'React Components',\n            type: 'video', \n            url: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n            duration: 20\n          }\n        ]\n      },\n      {\n        title: 'Node.js Backend Development',\n        description: 'Build robust backend applications with Node.js',\n        category: 'Programming',\n        instructor: 'Jane Smith',\n        price: 129.99,\n        duration: 12,\n        level: 'Intermediate',\n        isActive: true,\n        thumbnail: 'https://via.placeholder.com/300x200',\n        lectures: [\n          {\n            title: 'Setting up Node.js',\n            type: 'video',\n            url: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n            duration: 18\n          }\n        ]\n      },\n      {\n        title: 'Database Design Principles',\n        description: 'Learn how to design efficient databases',\n        category: 'Database',\n        instructor: 'Bob Wilson',\n        price: 79.99,\n        duration: 6,\n        level: 'Intermediate',\n        isActive: true,\n        thumbnail: 'https://via.placeholder.com/300x200',\n        lectures: [\n          {\n            title: 'Database Fundamentals',\n            type: 'video',\n            url: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n            duration: 25\n          }\n        ]\n      }\n    ]);\n    console.log(`Created ${courses.length} courses`);\n\n    // Create sample users\n    const users = await User.insertMany([\n      {\n        username: 'student1',\n        email: 'student1@example.com',\n        password: 'password123',\n        firstName: 'Alice',\n        lastName: 'Johnson',\n        role: 'student',\n        isApproved: true,\n        avatar: 'https://images.unsplash.com/photo-1494790108755-2616b9a6c6e5?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n      },\n      {\n        username: 'student2',\n        email: 'student2@example.com',\n        password: 'password123',\n        firstName: 'Bob',\n        lastName: 'Smith',\n        role: 'student',\n        isApproved: true,\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n      },\n      {\n        username: 'student3',\n        email: 'student3@example.com',\n        password: 'password123',\n        firstName: 'Carol',\n        lastName: 'Davis',\n        role: 'student',\n        isApproved: true,\n        avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n      }\n    ]);\n    console.log(`Created ${users.length} students`);\n\n    // Create sample enrollments\n    const enrollments = [];\n    for (let i = 0; i < users.length; i++) {\n      for (let j = 0; j < Math.min(2, courses.length); j++) {\n        enrollments.push({\n          student: users[i]._id,\n          course: courses[j]._id,\n          progress: Math.floor(Math.random() * 100),\n          enrolledAt: new Date()\n        });\n      }\n    }\n    \n    await Enrollment.insertMany(enrollments);\n    console.log(`Created ${enrollments.length} enrollments`);\n\n    // Create sample tests\n    const tests = await Test.insertMany([\n      {\n        title: 'React Basics Quiz',\n        course: courses[0]._id,\n        maxScore: 100,\n        timeLimit: 60,\n        isActive: true,\n        questions: [\n          {\n            question: 'What is React?',\n            type: 'multiple-choice',\n            options: ['Library', 'Framework', 'Language', 'Database'],\n            correctAnswer: 'Library'\n          },\n          {\n            question: 'What is JSX?',\n            type: 'multiple-choice', \n            options: ['JavaScript XML', 'Java Syntax Extension', 'JSON XML', 'JavaScript Extension'],\n            correctAnswer: 'JavaScript XML'\n          }\n        ],\n        results: [\n          {\n            student: users[0]._id,\n            score: 85,\n            maxScore: 100,\n            answers: ['Library', 'JavaScript XML'],\n            completedAt: new Date()\n          },\n          {\n            student: users[1]._id,\n            score: 92,\n            maxScore: 100,\n            answers: ['Library', 'JavaScript XML'],\n            completedAt: new Date()\n          }\n        ]\n      },\n      {\n        title: 'Node.js Fundamentals Test',\n        course: courses[1]._id,\n        maxScore: 100,\n        timeLimit: 45,\n        isActive: true,\n        questions: [\n          {\n            question: 'What is Node.js?',\n            type: 'multiple-choice',\n            options: ['Runtime Environment', 'Database', 'Framework', 'Library'],\n            correctAnswer: 'Runtime Environment'\n          }\n        ],\n        results: [\n          {\n            student: users[1]._id,\n            score: 78,\n            maxScore: 100,\n            answers: ['Runtime Environment'],\n            completedAt: new Date()\n          }\n        ]\n      }\n    ]);\n    console.log(`Created ${tests.length} tests with results`);\n\n    console.log('Database seeding completed successfully!');\n    \n    // Log final counts\n    const finalCourses = await Course.countDocuments();\n    const finalUsers = await User.countDocuments();\n    const finalTests = await Test.countDocuments();\n    const finalEnrollments = await Enrollment.countDocuments();\n    \n    console.log('Final database counts:');\n    console.log(`- Courses: ${finalCourses}`);\n    console.log(`- Users: ${finalUsers}`);\n    console.log(`- Tests: ${finalTests}`);\n    console.log(`- Enrollments: ${finalEnrollments}`);\n    \n  } catch (error) {\n    console.error('Error seeding database:', error);\n  } finally {\n    await mongoose.disconnect();\n    console.log('Disconnected from MongoDB');\n  }\n};\n\n// Run seeding if this file is executed directly\nif (process.argv[1].endsWith('seedDatabase.js')) {\n  seedDatabase();\n}","size_bytes":7438},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { \n  User, \n  Mail, \n  Edit3, \n  Save, \n  X, \n  Camera,\n  Shield,\n  Calendar,\n  BookOpen\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    username: \"\"\n  });\n\n  // Fetch user profile data\n  const { data: profile, isLoading, refetch } = useQuery({\n    queryKey: ['/api/mongo/auth/user'],\n    queryFn: async () => {\n      const response = await fetch('/api/mongo/auth/user', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch profile');\n      }\n      return response.json();\n    },\n  });\n\n  // Update form data when profile is loaded\n  useEffect(() => {\n    if (profile) {\n      setFormData({\n        firstName: profile.firstName || \"\",\n        lastName: profile.lastName || \"\",\n        email: profile.email || \"\",\n        username: profile.username || \"\"\n      });\n    }\n  }, [profile]);\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", \"/api/mongo/auth/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsEditing(false);\n      refetch();\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    if (profile) {\n      setFormData({\n        firstName: profile.firstName || \"\",\n        lastName: profile.lastName || \"\",\n        email: profile.email || \"\",\n        username: profile.username || \"\"\n      });\n    }\n    setIsEditing(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-lg shadow-sm p-8\">\n              <div className=\"animate-pulse space-y-6\">\n                <div className=\"flex items-center space-x-6\">\n                  <div className=\"w-24 h-24 bg-gray-200 rounded-full\"></div>\n                  <div className=\"space-y-3\">\n                    <div className=\"h-6 bg-gray-200 rounded w-48\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                  <div className=\"h-10 bg-gray-200 rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"lg:ml-64 min-h-screen p-4 lg:p-8 pt-16 lg:pt-8\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-700 rounded-2xl p-8 text-white\">\n            <div className=\"flex flex-col lg:flex-row items-start lg:items-center justify-between\">\n              <div className=\"flex items-center space-x-6\">\n                <div className=\"relative\">\n                  <Avatar className=\"w-24 h-24 border-4 border-white/20\">\n                    <AvatarImage src={profile?.profileImageUrl || profile?.avatar} />\n                    <AvatarFallback className=\"bg-white/20 text-white text-2xl font-bold\">\n                      {profile?.firstName?.[0]}{profile?.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <button className=\"absolute bottom-0 right-0 w-8 h-8 bg-blue-500 hover:bg-blue-600 rounded-full flex items-center justify-center transition-colors\">\n                    <Camera className=\"w-4 h-4 text-white\" />\n                  </button>\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold mb-2\">\n                    {profile?.firstName} {profile?.lastName}\n                  </h1>\n                  <p className=\"text-blue-100 flex items-center\">\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    {profile?.email}\n                  </p>\n                  <div className=\"flex items-center mt-2 space-x-4\">\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                      profile?.role === 'admin' \n                        ? 'bg-yellow-500/20 text-yellow-100' \n                        : 'bg-green-500/20 text-green-100'\n                    }`}>\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      {profile?.role === 'admin' ? 'Administrator' : 'Student'}\n                    </span>\n                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${\n                      profile?.isApproved \n                        ? 'bg-green-500/20 text-green-100'\n                        : 'bg-orange-500/20 text-orange-100'\n                    }`}>\n                      {profile?.isApproved ? 'Approved' : 'Pending Approval'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"mt-6 lg:mt-0\">\n                {!isEditing ? (\n                  <Button\n                    onClick={() => setIsEditing(true)}\n                    className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                  >\n                    <Edit3 className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={handleSubmit}\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      disabled={updateProfileMutation.isPending}\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {updateProfileMutation.isPending ? 'Saving...' : 'Save Changes'}\n                    </Button>\n                    <Button\n                      onClick={handleCancel}\n                      variant=\"outline\"\n                      className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                    >\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancel\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"w-5 h-5 mr-2\" />\n                  Personal Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <form onSubmit={handleSubmit}>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"firstName\"\n                          value={formData.firstName}\n                          onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">{profile?.firstName || 'Not set'}</p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"lastName\"\n                          value={formData.lastName}\n                          onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">{profile?.lastName || 'Not set'}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"username\">Username</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"username\"\n                          value={formData.username}\n                          onChange={(e) => setFormData({...formData, username: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">{profile?.username || 'Not set'}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      {isEditing ? (\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => setFormData({...formData, email: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      ) : (\n                        <p className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">{profile?.email || 'Not set'}</p>\n                      )}\n                    </div>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Account Statistics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BookOpen className=\"w-5 h-5 mr-2\" />\n                  Account Statistics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {profile?.enrolledCourses?.length || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Enrolled Courses</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {profile?.completedCourses || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Completed Courses</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Email Verified</span>\n                    <span className={`text-sm font-medium ${profile?.emailVerified ? 'text-green-600' : 'text-orange-600'}`}>\n                      {profile?.emailVerified ? 'Yes' : 'No'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Account Status</span>\n                    <span className={`text-sm font-medium ${profile?.isActive ? 'text-green-600' : 'text-red-600'}`}>\n                      {profile?.isActive ? 'Active' : 'Inactive'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Member Since</span>\n                    <span className=\"text-sm text-gray-900 flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      {profile?.createdAt ? new Date(profile.createdAt).toLocaleDateString() : 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13526},"client/src/components/pagination.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  totalItems: number;\n  itemsPerPage: number;\n  onPageChange: (page: number) => void;\n  onItemsPerPageChange: (itemsPerPage: number) => void;\n  showItemsPerPage?: boolean;\n  className?: string;\n}\n\nexport default function Pagination({\n  currentPage,\n  totalPages,\n  totalItems,\n  itemsPerPage,\n  onPageChange,\n  onItemsPerPageChange,\n  showItemsPerPage = true,\n  className = \"\"\n}: PaginationProps) {\n  const generatePageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 5;\n    \n    if (totalPages <= maxVisiblePages) {\n      // Show all pages if total pages is small\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // Complex pagination logic for many pages\n      const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\n      const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n      \n      // Add first page\n      if (startPage > 1) {\n        pages.push(1);\n        if (startPage > 2) {\n          pages.push('...');\n        }\n      }\n      \n      // Add visible pages\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      \n      // Add last page\n      if (endPage < totalPages) {\n        if (endPage < totalPages - 1) {\n          pages.push('...');\n        }\n        pages.push(totalPages);\n      }\n    }\n    \n    return pages;\n  };\n\n  const pageNumbers = generatePageNumbers();\n  const startItem = (currentPage - 1) * itemsPerPage + 1;\n  const endItem = Math.min(currentPage * itemsPerPage, totalItems);\n\n  return (\n    <div className={`flex flex-col sm:flex-row items-center justify-between gap-4 ${className}`}>\n      {/* Items per page selector */}\n      {showItemsPerPage && (\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-700 dark:text-gray-300\">Items per page:</span>\n          <Select value={itemsPerPage.toString()} onValueChange={(value) => onItemsPerPageChange(parseInt(value))}>\n            <SelectTrigger className=\"w-20\" data-testid=\"items-per-page-select\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"10\">10</SelectItem>\n              <SelectItem value=\"20\">20</SelectItem>\n              <SelectItem value=\"50\">50</SelectItem>\n              <SelectItem value=\"100\">100</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      )}\n\n      {/* Pagination info */}\n      <div className=\"flex items-center justify-center flex-1\">\n        <span className=\"text-sm text-gray-700 dark:text-gray-300\" data-testid=\"pagination-info\">\n          Showing {startItem} to {endItem} of {totalItems} results\n        </span>\n      </div>\n\n      {/* Pagination controls */}\n      <div className=\"flex items-center space-x-2\">\n        {/* Previous button */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n          className=\"flex items-center space-x-1\"\n          data-testid=\"pagination-previous\"\n        >\n          <ChevronLeft className=\"w-4 h-4\" />\n          <span className=\"hidden sm:inline\">Previous</span>\n        </Button>\n\n        {/* Page numbers */}\n        <div className=\"flex items-center space-x-1\">\n          {pageNumbers.map((page, index) => {\n            if (page === '...') {\n              return (\n                <span key={`ellipsis-${index}`} className=\"px-2 py-1 text-gray-500\">\n                  <MoreHorizontal className=\"w-4 h-4\" />\n                </span>\n              );\n            }\n            \n            const pageNum = page as number;\n            return (\n              <Button\n                key={pageNum}\n                variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => onPageChange(pageNum)}\n                className=\"min-w-[40px]\"\n                data-testid={`pagination-page-${pageNum}`}\n              >\n                {pageNum}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Next button */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n          className=\"flex items-center space-x-1\"\n          data-testid=\"pagination-next\"\n        >\n          <span className=\"hidden sm:inline\">Next</span>\n          <ChevronRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Hook for managing pagination state\nexport function usePagination(totalItems: number, initialItemsPerPage: number = 20) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(initialItemsPerPage);\n  \n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  \n  // Reset to first page when items per page changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [itemsPerPage]);\n  \n  // Reset to first page when total items changes significantly\n  useEffect(() => {\n    if (currentPage > totalPages && totalPages > 0) {\n      setCurrentPage(1);\n    }\n  }, [totalPages, currentPage]);\n  \n  const handlePageChange = (page: number) => {\n    setCurrentPage(Math.max(1, Math.min(page, totalPages)));\n  };\n  \n  const handleItemsPerPageChange = (newItemsPerPage: number) => {\n    setItemsPerPage(newItemsPerPage);\n  };\n  \n  const getPageData = <T,>(data: T[]) => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return data.slice(startIndex, endIndex);\n  };\n  \n  return {\n    currentPage,\n    itemsPerPage,\n    totalPages,\n    handlePageChange,\n    handleItemsPerPageChange,\n    getPageData\n  };\n}","size_bytes":6117}},"version":1}